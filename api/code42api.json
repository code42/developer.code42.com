{
  "swagger": "2.0",
  "info": {
    "title": "Code42 API Documentation",
    "version": "v1"
  },
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "paths": {
    "/v1/alert-rules/update-is-enabled": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "Enable or disable a list of rules",
        "operationId": "Rules_UpdateIsEnabled",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "The update is enabled command.",
            "schema": {
              "$ref": "#/definitions/UpdateIsEnabledCommand-alert-rules"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Given rules are set to the indicated enabled state."
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/alert-rules/add-users": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "Add users to a rule's watch list",
        "description": "Note that the added users could become either included included or excluded from the rule, depending on the rule's configuration.\nThis command requires a userIdFromAuthority to be associated with the user aliases for successful removal. Some users, such as ones added from the Code42 console or CLI do not have this id associated and cannot be removed with this API command. See our [support docs](https://support.code42.com/Cloud/Monitoring_and_managing/Manage_security_alerts_with_the_Code42_API) for more information on this id.",
        "operationId": "Rules_AddUsersToRule",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "The command to add users to the rule watch list.",
            "schema": {
              "$ref": "#/definitions/AddUsersToRuleCommand-alert-rules"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Given users are added to the rule."
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/alert-rules/remove-users": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "Remove users from a rule's watch list",
        "description": "Note that the removed users could become either included or excluded from the rule, depending on the rule's configuration.\nThis command requires a userIdFromAuthority to be associated with the user aliases for successful removal. Some users, such as ones added from the Code42 console or CLI do not have this id associated and cannot be removed with this API command. See our [support docs](https://support.code42.com/Cloud/Monitoring_and_managing/Manage_security_alerts_with_the_Code42_API) for more information on this id.",
        "operationId": "Rules_RemoveUsersFromRule",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "The command to remove users from the rule watch list.",
            "schema": {
              "$ref": "#/definitions/RemoveUsersFromRuleCommand-alert-rules"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Given users are removed from the rule."
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/alert-rules/remove-user-aliases": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "Remove user aliases from a rule's watch list",
        "description": "Note that the removed user aliases could become either included or excluded from the rule, depending on the rule's configuration.\nThis command requires a userIdFromAuthority to be associated with the user aliases for successful removal. Some users, such as ones added from the Code42 console or CLI do not have this id associated and cannot be removed with this API command. See our [support docs](https://support.code42.com/Cloud/Monitoring_and_managing/Manage_security_alerts_with_the_Code42_API) for more information on this id.",
        "operationId": "Rules_RemoveUserAliasesFromRule",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "The command to remove users from the rule watch list.",
            "schema": {
              "$ref": "#/definitions/RemoveUserAliasesFromRuleCommand-alert-rules"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Given user aliases are removed from the rule."
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/alert-rules/remove-all-users": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "Remove all users from a rule's watch list",
        "description": "Note that the removed users could become either included or excluded from the rule, depending on the rule's configuration.\nThis command requires a userIdFromAuthority to be associated with the user aliases for successful removal. Some users, such as ones added from the Code42 console or CLI do not have this id associated and cannot be removed with this API command. See our [support docs](https://support.code42.com/Cloud/Monitoring_and_managing/Manage_security_alerts_with_the_Code42_API) for more information on this id.",
        "operationId": "Rules_RemoveAllUsersFromRule",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "The command to remove all users from the rule watch list.",
            "schema": {
              "$ref": "#/definitions/RemoveAllUsersFromRuleCommand-alert-rules"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success: All users are removed from the rule."
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/alert-rules/query-users": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "Get users assigned to a given rule",
        "operationId": "Rules_QueryUsersOnRule",
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "required": true,
            "description": "The query to run.",
            "schema": {
              "$ref": "#/definitions/GetUsersInRuleQuery-alert-rules"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success: Response containing a list of users included in the rule.",
            "schema": {
              "$ref": "#/definitions/UsersInRuleResponse-alert-rules"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/alert-rules/query-cloud-share-permissions-rule": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "Get details about a set of Cloud Share Permissions rules",
        "operationId": "Rules_QueryCloudSharePermissionsRule",
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "required": true,
            "description": "The query to run.",
            "schema": {
              "$ref": "#/definitions/GetCloudSharePermissionsRuleDetailsQuery-alert-rules"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success: Response containing rule details for given rule id.",
            "schema": {
              "$ref": "#/definitions/CloudSharePermissionsRuleDetailsResponse-alert-rules"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/alert-rules/query-endpoint-exfiltration-rule": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "Get details about a set of Endpoint Exfiltration rules",
        "operationId": "Rules_QueryEndpointExfiltrationRule",
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "required": true,
            "description": "The query to run.",
            "schema": {
              "$ref": "#/definitions/GetEndpointExfiltrationRuleDetailsQuery-alert-rules"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success: Response containing rule details for given rule id.",
            "schema": {
              "$ref": "#/definitions/EndpointExfiltrationRuleDetailsResponse-alert-rules"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/alert-rules/query-file-type-mismatch-rule": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "Get details about a set of File Type Mismatch rules",
        "operationId": "Rules_QueryFileTypeMismatchRule",
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "required": true,
            "description": "The query to run.",
            "schema": {
              "$ref": "#/definitions/GetFileTypeMismatchRuleDetailsQuery-alert-rules"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success: Response containing rule details for given rule id.",
            "schema": {
              "$ref": "#/definitions/FileTypeMismatchRuleDetailsResponse-alert-rules"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/alert-rules/query-file-name-rule": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "Get details about a set of File Name rules",
        "operationId": "Rules_QueryFileNameRule",
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "required": true,
            "description": "The query to run.",
            "schema": {
              "$ref": "#/definitions/GetFileNameRuleDetailsQuery-alert-rules"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success: Response containing rule details for given rule id.",
            "schema": {
              "$ref": "#/definitions/FileNameRuleDetailsResponse-alert-rules"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/alerts/resolve-alert": {
      "post": {
        "tags": [
          "Alerts"
        ],
        "summary": "Resolve a set of alerts",
        "description": "This endpoint is deprecated. Use the 'update-state' endpoint instead.",
        "operationId": "Alerts_ResolveAlert",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "The command to resolve the given alerts.",
            "schema": {
              "$ref": "#/definitions/ResolveCommand-alerts"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Given alerts are resolved."
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        },
        "deprecated": true
      }
    },
    "/v1/alerts/reopen-alert": {
      "post": {
        "tags": [
          "Alerts"
        ],
        "summary": "Reopen a set of alerts",
        "description": "This endpoint is deprecated. Use the 'update-state' endpoint instead.",
        "operationId": "Alerts_ReopenAlert",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "The command to reopen the given alerts.",
            "schema": {
              "$ref": "#/definitions/ReopenCommand-alerts"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Given alerts are reopened."
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        },
        "deprecated": true
      }
    },
    "/v1/alerts/update-state": {
      "post": {
        "tags": [
          "Alerts"
        ],
        "summary": "Change the state of a set of alerts",
        "operationId": "Alerts_UpdateAlertState",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "The command to change the state of the given alerts.",
            "schema": {
              "$ref": "#/definitions/UpdateStateCommand-alerts"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Given alerts are updated to the indicated status."
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/alerts/add-note": {
      "post": {
        "tags": [
          "Alerts"
        ],
        "summary": "Add a note to an alert",
        "operationId": "Alerts_AddNoteToAlert",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "Add note command for the alert.",
            "schema": {
              "$ref": "#/definitions/AddNoteCommand-alerts"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Note is added to the alert."
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/alerts/query-alerts": {
      "post": {
        "tags": [
          "Alerts"
        ],
        "summary": "Search for alerts",
        "operationId": "Alerts_QueryAlert",
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "required": true,
            "description": "The search query to execute.",
            "schema": {
              "$ref": "#/definitions/SearchQuery-alerts"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success: Response containing alerts that match the provided query.",
            "schema": {
              "$ref": "#/definitions/AlertQueryResponse-alerts"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/alerts/query-details": {
      "post": {
        "tags": [
          "Alerts"
        ],
        "summary": "Get details about an alert",
        "operationId": "Alerts_QueryAlertDetails",
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "required": true,
            "description": "The alert id query to execute.",
            "schema": {
              "$ref": "#/definitions/DetailsQuery-alerts"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success: Response containing alerts that match the provided query.",
            "schema": {
              "$ref": "#/definitions/AlertDetailsResponse-alerts"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/alerts/query-details-aggregate": {
      "post": {
        "tags": [
          "Alerts"
        ],
        "summary": "Get aggregated data about a set of alerts",
        "operationId": "Alerts_QueryAlertDetailsAggregate",
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "required": true,
            "description": "The alert id query to execute.",
            "schema": {
              "$ref": "#/definitions/DetailsInAggregateQuery-alerts"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success: Response containing alerts that match the provided query.",
            "schema": {
              "$ref": "#/definitions/AlertDetailsInAggregateResponse-alerts"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/alerts/rules/query-rule-metadata": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "Query list of all rules in the alerting application.",
        "operationId": "Rules_QueryRuleMetadata",
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "required": true,
            "description": "The RuleMetadataSearchQuery to execute.",
            "schema": {
              "$ref": "#/definitions/RuleMetadataSearchQuery-alerts"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success: Response containing rules that match the provided query.",
            "schema": {
              "$ref": "#/definitions/RuleMetadataSearchResponse-alerts"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/cases": {
      "get": {
        "tags": [
          "Cases"
        ],
        "summary": "Get all cases for a tenant",
        "operationId": "getCasesUsingGET",
        "parameters": [
          {
            "name": "assignee",
            "in": "query",
            "description": "User UID of an assignee of a case on which to filter.",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "createdAt",
            "in": "query",
            "description": "Filter cases created between the supplied start and end times. Must use ISO time interval, for example: 2020-08-31T11:00:00Z/2020-09-01T15:30:00Z",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "isAssigned",
            "in": "query",
            "description": "Filter cases with an assignee (true) or without (false)",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false
          },
          {
            "name": "lastModifiedBy",
            "in": "query",
            "description": "User UID of the user who most recently modified the case.",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of a case on which to filter; will include partial matches",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "pgNum",
            "in": "query",
            "description": "Page number for results, starting at 1.",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "pgSize",
            "in": "query",
            "description": "Max number of results to return for a page.",
            "required": false,
            "type": "integer",
            "default": 2147483647,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "srtDir",
            "in": "query",
            "description": "The direction on which to sort the response, based on the corresponding key.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "collectionFormat": "multi",
            "default": "asc",
            "allowEmptyValue": false,
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "name": "srtKey",
            "in": "query",
            "description": "One or more values on which the response will be sorted.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "name",
                "number",
                "createdAt",
                "updatedAt",
                "status",
                "assigneeUsername",
                "subjectUsername"
              ]
            },
            "collectionFormat": "multi",
            "default": "number",
            "allowEmptyValue": false,
            "enum": [
              "name",
              "number",
              "createdAt",
              "updatedAt",
              "status",
              "assigneeUsername",
              "subjectUsername"
            ]
          },
          {
            "name": "status",
            "in": "query",
            "description": "One or more case statuses on which to filter.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "OPEN",
                "CLOSED"
              ]
            },
            "collectionFormat": "multi",
            "allowEmptyValue": false,
            "enum": [
              "OPEN",
              "CLOSED"
            ]
          },
          {
            "name": "subject",
            "in": "query",
            "description": "User UID of a subject of a case on which to filter.",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "updatedAt",
            "in": "query",
            "description": "Filter cases last updated between the supplied start and end times. Must use ISO time interval, for example: 2020-08-31T11:00:00Z/2020-09-01T15:30:00Z",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MultiCaseResponse-cases"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Cases"
        ],
        "summary": "Create a case",
        "operationId": "createCaseUsingPOST",
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCaseRequest-cases"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SingleCaseResponse-cases"
            }
          },
          "400": {
            "description": "Failure",
            "schema": {
              "$ref": "#/definitions/CaseProblemResponse-cases"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/cases/{caseNumber}": {
      "get": {
        "tags": [
          "Cases"
        ],
        "summary": "Get a single case for a tenant",
        "operationId": "getCaseUsingGET",
        "parameters": [
          {
            "name": "caseNumber",
            "in": "path",
            "description": "caseNumber",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Case exists",
            "schema": {
              "$ref": "#/definitions/SingleCaseResponse-cases"
            }
          },
          "404": {
            "description": "Case not found"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Cases"
        ],
        "summary": "Update a case",
        "operationId": "updateCaseUsingPUT",
        "parameters": [
          {
            "name": "caseNumber",
            "in": "path",
            "description": "caseNumber",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCaseRequest-cases"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SingleCaseResponse-cases"
            }
          },
          "400": {
            "description": "Failure",
            "schema": {
              "$ref": "#/definitions/CaseProblemResponse-cases"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "deprecated": false
      }
    },
    "/v1/cases/{caseNumber}/export": {
      "get": {
        "tags": [
          "Cases"
        ],
        "summary": "Download case summary as a PDF file.",
        "operationId": "pdfExportUsingGET",
        "parameters": [
          {
            "name": "caseNumber",
            "in": "path",
            "description": "caseNumber",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "language",
            "in": "query",
            "description": "language",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StreamingResponseBody-cases"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/cases/{caseNumber}/fileevent": {
      "get": {
        "tags": [
          "File Events"
        ],
        "summary": "Get all events associated with a case (abbreviated view)",
        "operationId": "getEventsByCaseUsingGET",
        "parameters": [
          {
            "name": "caseNumber",
            "in": "path",
            "description": "caseNumber",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Case exists",
            "schema": {
              "$ref": "#/definitions/MultipleEventsResponse-cases"
            }
          },
          "404": {
            "description": "Case not found"
          }
        },
        "deprecated": false
      }
    },
    "/v1/cases/{caseNumber}/fileevent/export": {
      "get": {
        "tags": [
          "Cases"
        ],
        "summary": "Export file events for a case as a CSV file.",
        "operationId": "csvExportUsingGET",
        "parameters": [
          {
            "name": "caseNumber",
            "in": "path",
            "description": "caseNumber",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StreamingResponseBody-cases"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/cases/{caseNumber}/fileevent/{eventId}": {
      "get": {
        "tags": [
          "File Events"
        ],
        "summary": "Get the full JSON for a single event",
        "operationId": "getEventUsingGET",
        "parameters": [
          {
            "name": "caseNumber",
            "in": "path",
            "description": "caseNumber",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "eventId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Case with event exists",
            "schema": {
              "$ref": "#/definitions/EventResponse-cases"
            }
          },
          "404": {
            "description": "Case or event not found"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "File Events"
        ],
        "summary": "Add an event to a case",
        "operationId": "addEventToCaseUsingPOST",
        "parameters": [
          {
            "name": "caseNumber",
            "in": "path",
            "description": "caseNumber",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "eventId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "Success",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Case or event do not exist or the case already has the event",
            "schema": {
              "$ref": "#/definitions/EventProblemResponse-cases"
            }
          },
          "403": {
            "description": "Forbidden by events",
            "schema": {
              "$ref": "#/definitions/EventProblemResponse-cases"
            }
          },
          "502": {
            "description": "Failure to reach events",
            "schema": {
              "$ref": "#/definitions/EventProblemResponse-cases"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "File Events"
        ],
        "summary": "Delete an event from a case",
        "operationId": "deleteEventUsingDELETE",
        "parameters": [
          {
            "name": "caseNumber",
            "in": "path",
            "description": "caseNumber",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "eventId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "Success",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Case does not exist or the case has been closed",
            "schema": {
              "$ref": "#/definitions/EventProblemResponse-cases"
            }
          },
          "404": {
            "description": "Case or event not found"
          }
        },
        "deprecated": false
      }
    },
    "/v1/auth": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Get an authentication token",
        "description": "Most APIs require a Bearer token to be submitted in order to determine the calling user's identity and permissions. Call this endpoint with your user's basic authentication credentials to retrieve its Bearer token.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/JwtResponse-core"
            }
          }
        }
      }
    },
    "/v1/customer": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get customer account information",
        "description": "Some APIs require a tenant ID to be submitted to retrieve or edit Code42 data. Call this endpoint to retrieve the tenant ID to use for those APIs.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CustomerResponse-core"
            }
          }
        }
      }
    },
    "/v1/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get a list of users",
        "parameters": [
          {
            "in": "query",
            "name": "active",
            "description": "When true, return only active users. When false, return only inactive users. Defaults to returning both.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "blocked",
            "description": "When true, return only blocked users. When false, return only unblocked users. Defaults to returning both.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "username",
            "description": "The username of a user to search for.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "page",
            "description": "The page number of the result set to return.",
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "The maximum number of users to return in the response.",
            "type": "integer",
            "format": "int32",
            "default": 500
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UserListResponse-core"
            }
          }
        }
      }
    },
    "/v1/users/{userId}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get a user",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The unique Code42 userId of the user to return.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UserResponse-core"
            }
          }
        }
      }
    },
    "/v1/detection-lists/departingemployee/get": {
      "post": {
        "tags": [
          "Detection Lists"
        ],
        "summary": "Get a departing employee",
        "operationId": "DepartingEmployeeControllerV2_GetEmployee",
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "required": true,
            "description": "Parameters used to search for a specific departing employee.",
            "schema": {
              "$ref": "#/definitions/GetDepartingEmployeeV2Query-detection-lists"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/DepartingEmployeeV2-detection-lists"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/detection-lists/departingemployee/search": {
      "post": {
        "tags": [
          "Detection Lists"
        ],
        "summary": "Search for departing employees",
        "operationId": "DepartingEmployeeControllerV2_Search",
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "required": true,
            "description": "Parameters used to return a paginated list of departing employees.",
            "schema": {
              "$ref": "#/definitions/DepartingEmployeeSearchV2Query-detection-lists"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/DepartingEmployeeSearchResponseV2-detection-lists"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/detection-lists/departingemployee/add": {
      "post": {
        "tags": [
          "Detection Lists"
        ],
        "summary": "Add a departing employee",
        "operationId": "DepartingEmployeeControllerV2_AddEmployee",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "The employee's departure details needed.",
            "schema": {
              "$ref": "#/definitions/AddDepartingEmployeeV2Command-detection-lists"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/DepartingEmployeeV2-detection-lists"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/detection-lists/departingemployee/update": {
      "post": {
        "tags": [
          "Detection Lists"
        ],
        "summary": "Update an employee's departure date",
        "operationId": "DepartingEmployeeControllerV2_UpdateDepartureDate",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "Departing employee information.",
            "schema": {
              "$ref": "#/definitions/UpdateDepartureDateV2Command-detection-lists"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/DepartingEmployeeV2-detection-lists"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/detection-lists/departingemployee/setalertstate": {
      "post": {
        "tags": [
          "Detection Lists"
        ],
        "summary": "Set alert state for departing employees",
        "operationId": "DepartingEmployeeControllerV2_SetAlertState",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "Desired alert settings for the tenant.",
            "schema": {
              "$ref": "#/definitions/DepartingEmployeeSetAlertStateV2Command-detection-lists"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/detection-lists/departingemployee/remove": {
      "post": {
        "tags": [
          "Detection Lists"
        ],
        "summary": "Remove a departing employee",
        "operationId": "DepartingEmployeeControllerV2_RemoveUser",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "A RemoveDepartingEmployeeV2Command.",
            "schema": {
              "$ref": "#/definitions/RemoveDepartingEmployeeV2Command-detection-lists"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/detection-lists/highriskemployee/add": {
      "post": {
        "tags": [
          "Detection Lists"
        ],
        "summary": "Add a high risk employee",
        "operationId": "HighRiskEmployeeControllerV2_AddEmployee",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "The employee's details.",
            "schema": {
              "$ref": "#/definitions/AddHighRiskEmployeeV2Command-detection-lists"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/HighRiskEmployeeV2-detection-lists"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/detection-lists/highriskemployee/get": {
      "post": {
        "tags": [
          "Detection Lists"
        ],
        "summary": "Get a high risk employee",
        "operationId": "HighRiskEmployeeControllerV2_GetEmployee",
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "required": true,
            "description": "Parameters used to search for a specific high risk employee.",
            "schema": {
              "$ref": "#/definitions/GetHighRiskEmployeeV2Query-detection-lists"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/HighRiskEmployeeV2-detection-lists"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/detection-lists/highriskemployee/search": {
      "post": {
        "tags": [
          "Detection Lists"
        ],
        "summary": "Search for high risk employees",
        "operationId": "HighRiskEmployeeControllerV2_Search",
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "required": true,
            "description": "Parameters used to return a paginated list of high risk employees.",
            "schema": {
              "$ref": "#/definitions/HighRiskEmployeeSearchV2Query-detection-lists"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/HighRiskSearchResponseV2-detection-lists"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/detection-lists/highriskemployee/setalertstate": {
      "post": {
        "tags": [
          "Detection Lists"
        ],
        "summary": "Set alert state for high risk employees",
        "operationId": "HighRiskEmployeeControllerV2_SetAlertState",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "Desired alert settings for the tenant.",
            "schema": {
              "$ref": "#/definitions/HighRiskSetAlertStateV2Command-detection-lists"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/detection-lists/highriskemployee/remove": {
      "post": {
        "tags": [
          "Detection Lists"
        ],
        "summary": "Remove a high risk employee",
        "operationId": "HighRiskEmployeeControllerV2_RemoveUser",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "A RemoveHighRiskEmployeeV2Command.",
            "schema": {
              "$ref": "#/definitions/RemoveHighRiskEmployeeV2Command-detection-lists"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/detection-lists/user/create": {
      "post": {
        "tags": [
          "Detection Lists"
        ],
        "summary": "Create a detection lists profile",
        "operationId": "UserControllerV2_Create",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "A CreateUserV2Command.",
            "schema": {
              "$ref": "#/definitions/CreateUserV2Command-detection-lists"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/UserV2-detection-lists"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/detection-lists/user/getbyusername": {
      "post": {
        "tags": [
          "Detection Lists"
        ],
        "summary": "Get a user by username",
        "operationId": "UserControllerV2_GetByUsername",
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "required": true,
            "description": "A GetUserByUsernameV2Query.",
            "schema": {
              "$ref": "#/definitions/GetUserByUsernameV2Query-detection-lists"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/UserV2-detection-lists"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/detection-lists/user/getbyid": {
      "post": {
        "tags": [
          "Detection Lists"
        ],
        "summary": "Get a user by id",
        "operationId": "UserControllerV2_GetByUserId",
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "required": true,
            "description": "A GetUserByIdV2Query.",
            "schema": {
              "$ref": "#/definitions/GetUserByIdV2Query-detection-lists"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/UserV2-detection-lists"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/detection-lists/user/addriskfactors": {
      "post": {
        "tags": [
          "Detection Lists"
        ],
        "summary": "Add risk factors to a user",
        "operationId": "UserControllerV2_AddRiskFactors",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "A AddRiskFactorsV2Command.",
            "schema": {
              "$ref": "#/definitions/AddRiskFactorsV2Command-detection-lists"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/UserV2-detection-lists"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/detection-lists/user/removeriskfactors": {
      "post": {
        "tags": [
          "Detection Lists"
        ],
        "summary": "Remove risk factors from a user",
        "operationId": "UserControllerV2_RemoveRiskFactors",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "A RemoveRiskFactorsV2Command.",
            "schema": {
              "$ref": "#/definitions/RemoveRiskFactorsV2Command-detection-lists"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/UserV2-detection-lists"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/detection-lists/user/addcloudusernames": {
      "post": {
        "tags": [
          "Detection Lists"
        ],
        "summary": "Add cloud usernames to a user",
        "operationId": "UserControllerV2_AddCloudUsernames",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "A AddCloudUsernamesV2Command.",
            "schema": {
              "$ref": "#/definitions/AddCloudUsernamesV2Command-detection-lists"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/UserV2-detection-lists"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/detection-lists/user/removecloudusernames": {
      "post": {
        "tags": [
          "Detection Lists"
        ],
        "summary": "Remove cloud usernames from a user",
        "operationId": "UserControllerV2_RemoveCloudUsernames",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "A RemoveCloudUsernamesV2Command.",
            "schema": {
              "$ref": "#/definitions/RemoveCloudUsernamesV2Command-detection-lists"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/UserV2-detection-lists"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/detection-lists/user/updatenotes": {
      "post": {
        "tags": [
          "Detection Lists"
        ],
        "summary": "Update notes for a user",
        "operationId": "UserControllerV2_UpdateNotes",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "A UpdateNotesV2Command.",
            "schema": {
              "$ref": "#/definitions/UpdateNotesV2Command-detection-lists"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/UserV2-detection-lists"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/detection-lists/user/refresh": {
      "post": {
        "tags": [
          "Detection Lists"
        ],
        "summary": "Refresh SCIM attributes for a user",
        "operationId": "UserControllerV2_RefreshUser",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "A RefreshUserAttributesV2Command.",
            "schema": {
              "$ref": "#/definitions/RefreshUserAttributesV2Command-detection-lists"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/UserV2-detection-lists"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/file-events": {
      "post": {
        "tags": [
          "File Events"
        ],
        "summary": "Search for file events.",
        "operationId": "searchEventsUsingPOST",
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchRequest-file-events"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FileEventResponse-file-events"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/v1/file-events/export": {
      "post": {
        "tags": [
          "File Events"
        ],
        "summary": "Search for file events and download the results as a CSV file.",
        "operationId": "exportUsingPOST",
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExportRequest-file-events"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StreamingResponseBody-file-events"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/v1/file-events/grouping": {
      "post": {
        "tags": [
          "File Events"
        ],
        "summary": "Search file events and provide a group parameter to bucket results into unique values and approximate counts for each value. ",
        "operationId": "groupingUsingPOST",
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupingRequest-file-events"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GroupingResponse-file-events"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    }
  },
  "definitions": {
    "UpdateIsEnabledCommand-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "isEnabled",
            "tenantId",
            "ruleIds"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 100,
              "example": "MyExampleTenant"
            },
            "ruleIds": {
              "type": "array",
              "description": "The unique identifiers representing the rules you want to act upon.",
              "maxLength": 100,
              "example": [
                "ExampleRuleId1",
                "ExampleRuleId2"
              ],
              "items": {
                "type": "string"
              }
            },
            "isEnabled": {
              "type": "boolean",
              "description": "What to set the rule's enabled activity to.  Either TRUE or FALSE.",
              "example": "TRUE"
            }
          }
        }
      ]
    },
    "DomainValue-alert-rules": {
      "type": "object",
      "x-abstract": true
    },
    "AddUsersToRuleCommand-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "ruleId",
            "userList"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 100,
              "example": "MyExampleTenant"
            },
            "ruleId": {
              "type": "string",
              "description": "The unique identifier representing the rule you want to act upon.",
              "maxLength": 40,
              "example": "ExampleRuleId"
            },
            "userList": {
              "type": "array",
              "description": "List of users to add to the rule.",
              "items": {
                "$ref": "#/definitions/UserBag-alert-rules"
              }
            }
          }
        }
      ]
    },
    "UserBag-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "userIdFromAuthority",
            "userAliasList"
          ],
          "properties": {
            "userIdFromAuthority": {
              "type": "string",
              "description": "User ID from authority.",
              "example": "userIdFromAuthority"
            },
            "userAliasList": {
              "type": "array",
              "description": "List of user aliases corresponding to the user ID from the authority.",
              "example": [
                "userAlias1",
                "userAlias2"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "RemoveUsersFromRuleCommand-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "ruleId",
            "userIdList"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 100,
              "example": "MyExampleTenant"
            },
            "ruleId": {
              "type": "string",
              "description": "The unique identifier representing the rule you want to act upon.",
              "maxLength": 40,
              "example": "ExampleRuleId"
            },
            "userIdList": {
              "type": "array",
              "description": "List of user id (from authority) to remove from the rule.  Will remove all associated aliases",
              "example": [
                "userIdFromAuthority"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "RemoveUserAliasesFromRuleCommand-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "ruleId",
            "userList"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 100,
              "example": "MyExampleTenant"
            },
            "ruleId": {
              "type": "string",
              "description": "The unique identifier representing the rule you want to act upon.",
              "maxLength": 40,
              "example": "ExampleRuleId"
            },
            "userList": {
              "type": "array",
              "description": "List of users to add to the rule.",
              "items": {
                "$ref": "#/definitions/UserBag-alert-rules"
              }
            }
          }
        }
      ]
    },
    "RemoveAllUsersFromRuleCommand-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "ruleId"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 100,
              "example": "MyExampleTenant"
            },
            "ruleId": {
              "type": "string",
              "description": "The unique identifier representing the rule you want to act upon.",
              "maxLength": 40,
              "example": "ExampleRuleId"
            }
          }
        }
      ]
    },
    "UsersInRuleResponse-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "usersToAlertOn"
          ],
          "properties": {
            "users": {
              "type": "array",
              "description": "List of users to being watched in the rule.\nNote that a userIdFromAuthority value of \"Null UserIdFromAuthority.  These usernames must be edited in the web app.\"indicates that the user alias must be edited via the Code42 console or the Code42 CLI.",
              "items": {
                "$ref": "#/definitions/UserBag-alert-rules"
              }
            },
            "usersToAlertOn": {
              "$ref": "#/definitions/UsersToAlertOn-alert-rules"
            }
          }
        }
      ]
    },
    "UsersToAlertOn-alert-rules": {
      "type": "integer",
      "description": "Possible users list config values for a rule.",
      "example": "ALL_USERS",
      "x-enumNames": [
        "AllUsers",
        "SpecifiedUsers",
        "AllUsersNotSpecified"
      ],
      "enum": [
        "ALL_USERS",
        "ALL_USERS_NOT_SPECIFIED",
        "SPECIFIED_USERS"
      ]
    },
    "GetUsersInRuleQuery-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "ruleId"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 100,
              "example": "MyExampleTenant"
            },
            "ruleId": {
              "type": "string",
              "description": "The unique identifier representing the rule you want to act upon.",
              "maxLength": 40,
              "example": "ExampleRuleId"
            }
          }
        }
      ]
    },
    "CloudSharePermissionsRuleDetailsResponse-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "properties": {
            "rules": {
              "type": "array",
              "description": "List of rule details returned from the query.",
              "items": {
                "$ref": "#/definitions/CloudSharePermissionsRuleDetails-alert-rules"
              }
            }
          }
        }
      ]
    },
    "CloudSharePermissionsRuleDetails-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/CloudSharePermissionsRule-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "createdAt",
            "modifiedAt",
            "isSystem"
          ],
          "properties": {
            "createdAt": {
              "type": "string",
              "description": "The timestamp when the rule was created.",
              "format": "date-time",
              "example": "2020-02-18T01:00:45.006683Z"
            },
            "createdBy": {
              "type": "string",
              "description": "Username of the individual who created the rule.",
              "example": "UserWhoCreatedTheRule"
            },
            "modifiedAt": {
              "type": "string",
              "description": "Timestamp of when the rule was last modified.",
              "format": "date-time",
              "example": "2020-02-19T01:57:45.006683Z"
            },
            "modifiedBy": {
              "type": "string",
              "description": "Username of the individual who last modified the rule.",
              "example": "UserWhoMostRecentlyModifiedTheRule"
            },
            "isSystem": {
              "type": "boolean",
              "description": "Boolean indicator of if the rule is a system rule.",
              "example": "FALSE"
            }
          }
        }
      ]
    },
    "CloudSharePermissionsRule-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/CloudSharePermissionsCriteria-alert-rules"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique of the rule.",
              "example": "RuleId"
            }
          }
        }
      ]
    },
    "CloudSharePermissionsCriteria-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/ExfiltrationRule-alert-rules"
        },
        {
          "type": "object",
          "properties": {
            "watchGoogleDrive": {
              "description": "Watch configuration for google.",
              "$ref": "#/definitions/WatchGoogleDrive-alert-rules"
            },
            "watchMicrosoftOneDrive": {
              "description": "Watch configuration for microsoft one drive.",
              "$ref": "#/definitions/WatchMicrosoftOneDrive-alert-rules"
            },
            "watchBox": {
              "description": "Watch configuration for box.",
              "$ref": "#/definitions/WatchBox-alert-rules"
            }
          }
        }
      ]
    },
    "WatchGoogleDrive-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "publicOnTheWeb",
            "publicViaLink"
          ],
          "properties": {
            "publicOnTheWeb": {
              "type": "boolean",
              "description": "Boolean indicating whether to alert on public on the web shares.",
              "example": "TRUE"
            },
            "publicViaLink": {
              "type": "boolean",
              "description": "Boolean indicating whether to alert on public via link shares.",
              "example": "FALSE"
            },
            "outsideTrustedDomains": {
              "type": "boolean",
              "description": "Boolean indicating whether to alert on outside trusted domains shares.",
              "example": "TRUE"
            }
          }
        }
      ]
    },
    "WatchMicrosoftOneDrive-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "publicViaLink"
          ],
          "properties": {
            "publicViaLink": {
              "type": "boolean",
              "description": "Boolean indicating whether to alert on public via link shares.",
              "example": "FALSE"
            },
            "outsideTrustedDomains": {
              "type": "boolean",
              "description": "Boolean indicating whether to alert on outside trusted domains shares.",
              "example": "TRUE"
            }
          }
        }
      ]
    },
    "WatchBox-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "publicViaLink"
          ],
          "properties": {
            "publicViaLink": {
              "type": "boolean",
              "description": "Boolean indicating whether to alert on public via link shares.",
              "example": "FALSE"
            },
            "outsideTrustedDomains": {
              "type": "boolean",
              "description": "Boolean indicating whether to alert on outside trusted domains shares.",
              "example": "TRUE"
            }
          }
        }
      ]
    },
    "ExfiltrationRule-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "x-abstract": true,
          "required": [
            "severity",
            "isEnabled",
            "tenantId"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 100,
              "example": "MyExampleTenant"
            },
            "name": {
              "type": "string",
              "description": "The name of the rule.",
              "example": "Removable Media Exfiltration Rule"
            },
            "description": {
              "type": "string",
              "description": "The description of the rule.",
              "example": "Alert me on all removable media exfiltration."
            },
            "severity": {
              "description": "Indicates severity of the rule.",
              "$ref": "#/definitions/SeverityRating-alert-rules"
            },
            "isEnabled": {
              "type": "boolean",
              "description": "Boolean indicating if the rule is currently enabled.",
              "example": "TRUE"
            },
            "fileBelongsTo": {
              "$ref": "#/definitions/FileBelongsTo-alert-rules"
            },
            "notificationConfig": {
              "$ref": "#/definitions/NotificationConfig-alert-rules"
            },
            "fileCategoryWatch": {
              "$ref": "#/definitions/FileCategoryWatch-alert-rules"
            },
            "ruleSource": {
              "type": "string",
              "description": "Indicates source of rule creation.  Either alerting or lens application name.",
              "example": "Departing Employee"
            }
          }
        }
      ]
    },
    "SeverityRating-alert-rules": {
      "type": "integer",
      "description": "Possible severity values for a rule.",
      "example": "LOW",
      "x-enumNames": [
        "Low",
        "Medium",
        "High"
      ],
      "enum": [
        "HIGH",
        "MEDIUM",
        "LOW"
      ]
    },
    "FileBelongsTo-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "usersToAlertOn"
          ],
          "properties": {
            "usersToAlertOn": {
              "description": "Indicates setting of how to interact with user list.",
              "$ref": "#/definitions/UsersToAlertOn-alert-rules"
            },
            "userList": {
              "type": "array",
              "description": "List of users who's activity is specified as either watching or excluding from watching.",
              "example": [
                "user1",
                "user2"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "NotificationConfig-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "enabled"
          ],
          "properties": {
            "enabled": {
              "type": "boolean",
              "description": "Boolean indicating if the notifications are turned on.",
              "example": "TRUE"
            },
            "notificationInfo": {
              "type": "array",
              "description": "Config information for notifications.",
              "items": {
                "$ref": "#/definitions/NotificationInfo-alert-rules"
              }
            }
          }
        }
      ]
    },
    "NotificationInfo-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "notificationType"
          ],
          "properties": {
            "notificationType": {
              "description": "Type of notification.",
              "$ref": "#/definitions/NotificationType-alert-rules"
            },
            "notificationAddress": {
              "type": "string",
              "description": "Address notifications are configured to send to.",
              "example": "myUsername@company.com"
            }
          }
        }
      ]
    },
    "NotificationType-alert-rules": {
      "type": "integer",
      "description": "Type of notification.",
      "example": "EMAIL",
      "x-enumNames": [
        "Email"
      ],
      "enum": [
        "EMAIL"
      ]
    },
    "FileCategoryWatch-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "watchAllFiles"
          ],
          "properties": {
            "watchAllFiles": {
              "type": "boolean",
              "description": "Boolean indicating if rule is watching all file categories.",
              "example": "FALSE"
            },
            "fileCategoryList": {
              "type": "array",
              "description": "List of file categories to watch.",
              "items": {
                "$ref": "#/definitions/FileCategory-alert-rules"
              }
            }
          }
        }
      ]
    },
    "FileCategory-alert-rules": {
      "type": "integer",
      "description": "Type of file category.",
      "example": "ARCHIVE",
      "x-enumNames": [
        "Archive",
        "Audio",
        "Document",
        "Executable",
        "Image",
        "Pdf",
        "Presentation",
        "Script",
        "SourceCode",
        "Spreadsheet",
        "Video",
        "VirtualDiskImage"
      ],
      "enum": [
        "ARCHIVE",
        "AUDIO",
        "DOCUMENT",
        "EXECUTABLE",
        "IMAGE",
        "PDF",
        "PRESENTATION",
        "SCRIPT",
        "SOURCE_CODE",
        "SPREADSHEET",
        "VIDEO",
        "VIRTUAL_DISK_IMAGE"
      ]
    },
    "GetCloudSharePermissionsRuleDetailsQuery-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "ruleIds"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 100,
              "example": "MyExampleTenant"
            },
            "ruleIds": {
              "type": "array",
              "description": "The unique identifiers representing the rules you want to act upon.",
              "maxLength": 100,
              "example": [
                "ExampleRuleId1",
                "ExampleRuleId2"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "EndpointExfiltrationRuleDetailsResponse-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "properties": {
            "rules": {
              "type": "array",
              "description": "List of rule details returned from the query.",
              "items": {
                "$ref": "#/definitions/EndpointExfiltrationRuleDetails-alert-rules"
              }
            }
          }
        }
      ]
    },
    "EndpointExfiltrationRuleDetails-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/EndpointExfiltrationRule-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "createdAt",
            "modifiedAt",
            "isSystem"
          ],
          "properties": {
            "createdAt": {
              "type": "string",
              "description": "The timestamp when the rule was created.",
              "format": "date-time",
              "example": "2020-02-18T01:00:45.006683Z"
            },
            "createdBy": {
              "type": "string",
              "description": "Username of the individual who created the rule.",
              "example": "UserWhoCreatedTheRule"
            },
            "modifiedAt": {
              "type": "string",
              "description": "Timestamp of when the rule was last modified.",
              "format": "date-time",
              "example": "2020-02-19T01:57:45.006683Z"
            },
            "modifiedBy": {
              "type": "string",
              "description": "Username of the individual who last modified the rule.",
              "example": "UserWhoMostRecentlyModifiedTheRule"
            },
            "isSystem": {
              "type": "boolean",
              "description": "Boolean indicator of if the rule is a system rule.",
              "example": "FALSE"
            }
          }
        }
      ]
    },
    "EndpointExfiltrationRule-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/EndpointExfiltrationCriteria-alert-rules"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique of the rule.",
              "example": "RuleId"
            }
          }
        }
      ]
    },
    "EndpointExfiltrationCriteria-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/ExfiltrationRule-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "timeWindow"
          ],
          "properties": {
            "fileSizeAndCount": {
              "description": "File size and count watch configuration.",
              "$ref": "#/definitions/FileSizeAndCount-alert-rules"
            },
            "fileActivityIs": {
              "description": "Type of file activity the rule is watching.",
              "$ref": "#/definitions/FileActivity-alert-rules"
            },
            "timeWindow": {
              "type": "integer",
              "description": "How long of a period for the activity to aggregate to hit the specified file size and count thresholds.",
              "format": "int32",
              "example": "60"
            }
          }
        }
      ]
    },
    "FileSizeAndCount-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "properties": {
            "fileCountGreaterThan": {
              "type": "integer",
              "description": "Number of files exfiltrated within time window for alert to trigger.",
              "format": "int64",
              "example": "15"
            },
            "totalSizeGreaterThanInBytes": {
              "type": "integer",
              "description": "Size of total files exfiltrated within time window for alert to trigger.",
              "format": "int64",
              "example": "5000"
            },
            "operator": {
              "description": "Operator to use to combine size and count threshold.",
              "$ref": "#/definitions/Operator-alert-rules"
            }
          }
        }
      ]
    },
    "Operator-alert-rules": {
      "type": "integer",
      "description": "Operators to use in file size and count configuration.",
      "x-enumNames": [
        "And",
        "Or"
      ],
      "enum": [
        "AND",
        "OR"
      ]
    },
    "FileActivity-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "uploadedOnRemovableMedia",
            "readByBrowserOrOther"
          ],
          "properties": {
            "syncedToCloudService": {
              "description": "Cloud services to watch for alerts.",
              "$ref": "#/definitions/SyncedToCloudService-alert-rules"
            },
            "uploadedOnRemovableMedia": {
              "type": "boolean",
              "description": "Boolean indicating if we are watching removable media uploads.",
              "example": "TRUE"
            },
            "readByBrowserOrOther": {
              "type": "boolean",
              "description": "Boolean indicating if we are watching browser read activity.",
              "example": "FALSE"
            }
          }
        }
      ]
    },
    "SyncedToCloudService-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "watchBox",
            "watchBoxDrive",
            "watchDropBox",
            "watchGoogleBackupAndSync",
            "watchAppleIcLoud",
            "watchMicrosoftOneDrive"
          ],
          "properties": {
            "watchBox": {
              "type": "boolean",
              "description": "Boolean indicating if we are watching for box cloud sync activity.",
              "example": "TRUE"
            },
            "watchBoxDrive": {
              "type": "boolean",
              "description": "Boolean indicating if we are watching for box drive cloud sync activity.",
              "example": "FALSE"
            },
            "watchDropBox": {
              "type": "boolean",
              "description": "Boolean indicating if we are watching for drop box cloud sync activity.",
              "example": "TRUE"
            },
            "watchGoogleBackupAndSync": {
              "type": "boolean",
              "description": "Boolean indicating if we are watching for google backup and sync cloud sync activity.",
              "example": "FALSE"
            },
            "watchAppleIcLoud": {
              "type": "boolean",
              "description": "Boolean indicating if we are watching for apple iCloud sync activity.",
              "example": "TRUE"
            },
            "watchMicrosoftOneDrive": {
              "type": "boolean",
              "description": "Boolean indicating if we are watching for microsoft one drive cloud sync activity.",
              "example": "TRUE"
            }
          }
        }
      ]
    },
    "GetEndpointExfiltrationRuleDetailsQuery-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "ruleIds"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 100,
              "example": "MyExampleTenant"
            },
            "ruleIds": {
              "type": "array",
              "description": "The unique identifiers representing the rules you want to act upon.",
              "maxLength": 100,
              "example": [
                "ExampleRuleId1",
                "ExampleRuleId2"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "FileTypeMismatchRuleDetailsResponse-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "properties": {
            "rules": {
              "type": "array",
              "description": "List of rule details returned from the query.",
              "items": {
                "$ref": "#/definitions/FileTypeMismatchRuleDetails-alert-rules"
              }
            }
          }
        }
      ]
    },
    "FileTypeMismatchRuleDetails-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/FileTypeMismatchRule-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "createdAt",
            "modifiedAt",
            "isSystem"
          ],
          "properties": {
            "createdAt": {
              "type": "string",
              "description": "The timestamp when the rule was created.",
              "format": "date-time",
              "example": "2020-02-18T01:00:45.006683Z"
            },
            "createdBy": {
              "type": "string",
              "description": "Username of the individual who created the rule.",
              "example": "UserWhoCreatedTheRule"
            },
            "modifiedAt": {
              "type": "string",
              "description": "Timestamp of when the rule was last modified.",
              "format": "date-time",
              "example": "2020-02-19T01:57:45.006683Z"
            },
            "modifiedBy": {
              "type": "string",
              "description": "Username of the individual who last modified the rule.",
              "example": "UserWhoMostRecentlyModifiedTheRule"
            },
            "isSystem": {
              "type": "boolean",
              "description": "Boolean indicator of if the rule is a system rule.",
              "example": "FALSE"
            }
          }
        }
      ]
    },
    "FileTypeMismatchRule-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/FileTypeMismatchCriteria-alert-rules"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique of the rule.",
              "example": "RuleId"
            }
          }
        }
      ]
    },
    "FileTypeMismatchCriteria-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/ExfiltrationRule-alert-rules"
        },
        {
          "type": "object"
        }
      ]
    },
    "GetFileTypeMismatchRuleDetailsQuery-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "ruleIds"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 100,
              "example": "MyExampleTenant"
            },
            "ruleIds": {
              "type": "array",
              "description": "The unique identifiers representing the rules you want to act upon.",
              "maxLength": 100,
              "example": [
                "ExampleRuleId1",
                "ExampleRuleId2"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "FileNameRuleDetailsResponse-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "properties": {
            "rules": {
              "type": "array",
              "description": "List of rule details returned from the query.",
              "items": {
                "$ref": "#/definitions/FileNameRuleDetails-alert-rules"
              }
            }
          }
        }
      ]
    },
    "FileNameRuleDetails-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/FileNameRule-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "createdAt",
            "modifiedAt",
            "isSystem"
          ],
          "properties": {
            "createdAt": {
              "type": "string",
              "description": "The timestamp when the rule was created.",
              "format": "date-time",
              "example": "2020-02-18T01:00:45.006683Z"
            },
            "createdBy": {
              "type": "string",
              "description": "Username of the individual who created the rule.",
              "example": "UserWhoCreatedTheRule"
            },
            "modifiedAt": {
              "type": "string",
              "description": "Timestamp of when the rule was last modified.",
              "format": "date-time",
              "example": "2020-02-19T01:57:45.006683Z"
            },
            "modifiedBy": {
              "type": "string",
              "description": "Username of the individual who last modified the rule.",
              "example": "UserWhoMostRecentlyModifiedTheRule"
            },
            "isSystem": {
              "type": "boolean",
              "description": "Boolean indicator of if the rule is a system rule.",
              "example": "FALSE"
            }
          }
        }
      ]
    },
    "FileNameRule-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/FileNameCriteria-alert-rules"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique of the rule.",
              "example": "RuleId"
            }
          }
        }
      ]
    },
    "FileNameCriteria-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/ExfiltrationRule-alert-rules"
        },
        {
          "type": "object",
          "properties": {
            "fileNamePatterns": {
              "type": "array",
              "description": "List of file name patterns being watched by the rule.",
              "example": [
                "Q?ProductPlan.*",
                "*.cs"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "GetFileNameRuleDetailsQuery-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "ruleIds"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 100,
              "example": "MyExampleTenant"
            },
            "ruleIds": {
              "type": "array",
              "description": "The unique identifiers representing the rules you want to act upon.",
              "maxLength": 100,
              "example": [
                "ExampleRuleId1",
                "ExampleRuleId2"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "ResolveCommand-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "alertIds"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 40,
              "example": "MyExampleTenant"
            },
            "alertIds": {
              "type": "array",
              "description": "The unique identifiers representing the alerts you want to act upon.",
              "maxLength": 100,
              "example": [
                "ExampleAlertId1",
                "ExampleAlertId2"
              ],
              "items": {
                "type": "string"
              }
            },
            "note": {
              "type": "string",
              "description": "An optional note to attach to the alert",
              "maxLength": 2000,
              "example": "This is an example note."
            }
          }
        }
      ]
    },
    "DomainValue-alerts": {
      "type": "object",
      "x-abstract": true
    },
    "ReopenCommand-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "alertIds"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 40,
              "example": "MyExampleTenant"
            },
            "alertIds": {
              "type": "array",
              "description": "The unique identifiers representing the alerts you want to act upon.",
              "maxLength": 100,
              "example": [
                "ExampleAlertId1",
                "ExampleAlertId2"
              ],
              "items": {
                "type": "string"
              }
            },
            "note": {
              "type": "string",
              "description": "An optional note to attach to the alert",
              "maxLength": 2000,
              "example": "This is an example note."
            }
          }
        }
      ]
    },
    "UpdateStateCommand-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "required": [
            "state",
            "tenantId",
            "alertIds"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 40,
              "example": "MyExampleTenant"
            },
            "alertIds": {
              "type": "array",
              "description": "The unique identifiers representing the alerts you want to act upon.",
              "maxLength": 100,
              "example": [
                "ExampleAlertId1",
                "ExampleAlertId2"
              ],
              "items": {
                "type": "string"
              }
            },
            "state": {
              "description": "The state to update the given alerts to.",
              "$ref": "#/definitions/AlertState-alerts"
            },
            "note": {
              "type": "string",
              "description": "An optional note to attach to the alert",
              "maxLength": 2000,
              "example": "This is an example note."
            }
          }
        }
      ]
    },
    "AlertState-alerts": {
      "type": "integer",
      "description": "Enum indicating possible alert states.",
      "example": "OPEN",
      "x-enumNames": [
        "Open",
        "Resolved",
        "InProgress",
        "Pending"
      ],
      "enum": [
        "OPEN",
        "RESOLVED",
        "PENDING",
        "IN_PROGRESS"
      ]
    },
    "AddNoteCommand-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "alertId",
            "note"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 40,
              "example": "MyExampleTenant"
            },
            "alertId": {
              "type": "string",
              "description": "The unique identifier representing the alert you want to act upon.",
              "maxLength": 40,
              "example": "ExampleAlertId"
            },
            "note": {
              "type": "string",
              "description": "The note to attach to the alert.",
              "maxLength": 2000,
              "example": "This is an example note."
            }
          }
        }
      ]
    },
    "AlertQueryResponse-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "required": [
            "totalCount"
          ],
          "properties": {
            "alerts": {
              "type": "array",
              "description": "List of alerts that are returned.",
              "items": {
                "$ref": "#/definitions/AlertSummary-alerts"
              }
            },
            "totalCount": {
              "type": "integer",
              "description": "The number of alerts that match the given query.",
              "format": "int64",
              "example": "3"
            },
            "problems": {
              "type": "array",
              "description": "Potential issues that were hit while trying to run the query.",
              "example": [],
              "items": {
                "$ref": "#/definitions/QueryProblem-alerts"
              }
            }
          }
        }
      ]
    },
    "AlertSummary-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/AlertEssentials-alerts"
        },
        {
          "type": "object",
          "required": [
            "createdAt",
            "state"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique id of the alert.",
              "example": "alertId"
            },
            "createdAt": {
              "type": "string",
              "description": "The timestamp when the alert was created.",
              "format": "date-time",
              "example": "2020-02-19T01:57:45.006683Z"
            },
            "state": {
              "description": "The current state of the alert.",
              "$ref": "#/definitions/AlertState-alerts"
            },
            "stateLastModifiedBy": {
              "type": "string"
            },
            "stateLastModifiedAt": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      ]
    },
    "AlertEssentials-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "required": [
            "type",
            "severity",
            "tenantId"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 40,
              "example": "MyExampleTenant"
            },
            "type": {
              "description": "Rule type that generated the alert.",
              "$ref": "#/definitions/RuleType-alerts"
            },
            "name": {
              "type": "string",
              "description": "The name of the alert.  Same as the name of the rule that triggered it.",
              "example": "Removable Media Exfiltration Rule"
            },
            "description": {
              "type": "string",
              "description": "The description of the alert.  Same as the description of the rule that triggered it.",
              "example": "Alert me on all removable media exfiltration."
            },
            "actor": {
              "type": "string",
              "description": "The user who triggered the alert.",
              "example": "exampleUser@mycompany.com"
            },
            "actorId": {
              "type": "string",
              "description": "The authority user id who triggered the alert, if it is available.",
              "example": "authorityUserId"
            },
            "target": {
              "type": "string"
            },
            "severity": {
              "description": "Indicates severity of the alert.",
              "$ref": "#/definitions/SeverityRating-alerts"
            },
            "notificationInfo": {
              "type": "array",
              "description": "Notification information of the alert.  Not queried/returned.",
              "example": [],
              "items": {
                "$ref": "#/definitions/NotificationInfo-alerts"
              }
            },
            "ruleId": {
              "type": "string",
              "description": "The unique id corresponding to the rule which triggered the alert.",
              "example": "uniqueRuleId"
            },
            "ruleSource": {
              "type": "string",
              "description": "Indicates source of rule creation.  Either alerting or lens application name.",
              "example": "Departing Employee"
            }
          }
        }
      ]
    },
    "RuleType-alerts": {
      "type": "integer",
      "description": "Rule type that generates alerts.",
      "example": "FED_ENDPOINT_EXFILTRATION",
      "x-enumNames": [
        "FedEndpointExfiltration",
        "FedCloudSharePermissions",
        "FedFileTypeMismatch",
        "FedFileNameMatch"
      ],
      "enum": [
        "FED_ENDPOINT_EXFILTRATION",
        "FED_CLOUD_SHARE_PERMISSIONS",
        "FED_FILE_TYPE_MISMATCH",
        "FED_FILE_NAME_MATCH"
      ]
    },
    "SeverityRating-alerts": {
      "type": "integer",
      "description": "Possible severity values for an alert.",
      "example": "LOW",
      "x-enumNames": [
        "Low",
        "Medium",
        "High"
      ],
      "enum": [
        "HIGH",
        "MEDIUM",
        "LOW"
      ]
    },
    "NotificationInfo-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "required": [
            "notificationType"
          ],
          "properties": {
            "notificationType": {
              "description": "Type of notification.",
              "$ref": "#/definitions/NotificationType-alerts"
            },
            "notificationAddress": {
              "type": "string",
              "description": "Address notification was sent to.",
              "example": "myUsername@company.com"
            }
          }
        }
      ]
    },
    "NotificationType-alerts": {
      "type": "integer",
      "description": "Type of notification.",
      "example": "EMAIL",
      "x-enumNames": [
        "Email"
      ],
      "enum": [
        "EMAIL"
      ]
    },
    "QueryProblem-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "badFilter": {
              "type": "string",
              "description": "The filter that caused the issue."
            },
            "type": {
              "description": "The type of query problem.",
              "$ref": "#/definitions/ProblemType-alerts"
            }
          }
        }
      ]
    },
    "ProblemType-alerts": {
      "type": "integer",
      "description": "Potential issues when running a query on alerts.",
      "example": "SearchFailed",
      "x-enumNames": [
        "IllegalValue",
        "IllegalOperator",
        "MustBeEmailAddress",
        "MaxLengthExceeded",
        "InvalidPageSize",
        "InvalidPageNumber",
        "MissingValue",
        "MissingGroups",
        "MissingFilters",
        "MaxFiltersExceeded",
        "SearchFailed"
      ],
      "enum": [
        "IllegalValue",
        "IllegalOperator",
        "MustBeEmailAddress",
        "MaxLengthExceeded",
        "InvalidPageSize",
        "InvalidPageNumber",
        "MissingValue",
        "MissingGroups",
        "MissingFilters",
        "MaxFiltersExceeded",
        "SearchFailed"
      ]
    },
    "SearchQuery-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "required": [
            "pgSize",
            "pgNum",
            "tenantId",
            "groupClause",
            "srtKey"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 40,
              "example": "MyExampleTenant"
            },
            "groups": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FilterGroup-alerts"
              }
            },
            "groupClause": {
              "type": "string",
              "description": "The clause to use when combining group filters.  Must be AND/OR.",
              "example": "OR"
            },
            "pgSize": {
              "type": "integer",
              "description": "The number of items to return in one request.  Value must be between 0 and 100.",
              "format": "int32",
              "maximum": 500,
              "example": "20"
            },
            "pgNum": {
              "type": "integer",
              "description": "The page number to return. Page 0 is the first page of results.",
              "format": "int32",
              "example": "0"
            },
            "srtKey": {
              "type": "string",
              "description": "The alert attribute to sort by.  Value must be one of: AlertId, TenantId, Type, Name, Description, Actor, ActorId, Target, Severity, RuleSource, CreatedAt, Observations, Notes, State, StateLastModifiedAt, StateLastModifiedBy, LastModifiedTime, LastModifiedBy, RuleId",
              "example": "CreatedAt"
            },
            "srtDirection": {
              "$ref": "#/definitions/SortDirection-alerts"
            }
          }
        }
      ]
    },
    "FilterGroup-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "required": [
            "filterClause",
            "filters"
          ],
          "properties": {
            "filters": {
              "type": "array",
              "description": "The list of search filters to query on.",
              "items": {
                "$ref": "#/definitions/SearchFilter-alerts"
              }
            },
            "filterClause": {
              "$ref": "#/definitions/SearchClause-alerts"
            }
          }
        }
      ]
    },
    "SearchFilter-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "required": [
            "operator",
            "term",
            "value"
          ],
          "properties": {
            "term": {
              "type": "string",
              "description": "The alert or rule metadata attribute to search on.\n\nFor alert queries, value must be one of: AlertId, TenantId, Type, Name, Description, Actor, ActorId, Target, Severity, RuleSource, CreatedAt, Observations, Notes, State, StateLastModifiedAt, StateLastModifiedBy, LastModifiedTime, LastModifiedBy, RuleId.\n\nFor rule queries, value must be one of RuleMetadataId, TenantId, ObserverRuleId, Type, Name, Description, Severity, IsSystem, IsEnabled, RuleSource, ModifiedAt, ModifiedBy, CreatedAt, CreatedBy, LogString. ",
              "example": "Name"
            },
            "operator": {
              "example": "IS",
              "$ref": "#/definitions/FilterOperator-alerts"
            },
            "value": {
              "type": "string",
              "description": "The value you want to use in the filter.",
              "example": "This is a name."
            }
          }
        }
      ]
    },
    "FilterOperator-alerts": {
      "type": "integer",
      "description": "The filter operator to use.",
      "example": "IS",
      "x-enumNames": [
        "Is",
        "IsNot",
        "OnOrBefore",
        "OnOrAfter",
        "On",
        "LessThan",
        "GreaterThan",
        "Contains",
        "DoesNotContain"
      ],
      "enum": [
        "IS",
        "IS_NOT",
        "ON_OR_BEFORE",
        "ON_OR_AFTER",
        "ON",
        "LESS_THAN",
        "GREATER_THAN",
        "CONTAINS",
        "DOES_NOT_CONTAIN"
      ]
    },
    "SearchClause-alerts": {
      "type": "integer",
      "description": "The filter clause to use when combining the search filters.  Must be AND/OR.s",
      "example": "AND",
      "x-enumNames": [
        "And",
        "Or"
      ],
      "enum": [
        "AND",
        "OR"
      ]
    },
    "SortDirection-alerts": {
      "type": "integer",
      "description": "The sort direction applied to the returned page of alerts.",
      "default": "ASC",
      "example": "DESC",
      "x-enumNames": [
        "Asc",
        "Desc"
      ],
      "enum": [
        "ASC",
        "DESC"
      ]
    },
    "AlertDetailsResponse-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "properties": {
            "alerts": {
              "type": "array",
              "description": "The alerts returned by the details query.",
              "items": {
                "$ref": "#/definitions/AlertDetails-alerts"
              }
            }
          }
        }
      ]
    },
    "AlertDetails-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/AlertSummary-alerts"
        },
        {
          "type": "object",
          "properties": {
            "observations": {
              "type": "array",
              "description": "Observation list included on the alert.",
              "items": {
                "$ref": "#/definitions/Observation-alerts"
              }
            },
            "note": {
              "description": "Most recent note added to the alert.",
              "$ref": "#/definitions/Note-alerts"
            }
          }
        }
      ]
    },
    "Observation-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "required": [
            "observedAt"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "Id of given observation.",
              "example": "uniqueObservationId"
            },
            "observedAt": {
              "type": "string",
              "description": "Timestamp of when the observation was observed.",
              "format": "date-time",
              "example": "2020-02-19T01:57:45.006683Z"
            },
            "type": {
              "type": "string",
              "description": "The type of observation data recorded.",
              "example": "FedCloudSharePermissions"
            },
            "data": {
              "type": "string",
              "description": "The JSON formatted observation data rolled into one aggregation.",
              "example": "{\"type$\":\"OBSERVED_CLOUD_SHARE_ACTIVITY\",\"id\":\"exampleId\",\"sources\":[\"OneDrive\"],\"exposureTypes\":[\"PublicLinkShare\"],\"firstActivityAt\":\"2020-02-19T01:50:00.0000000Z\",\"lastActivityAt\":\"2020-02-19T01:55:00.0000000Z\",\"fileCount\":2,\"totalFileSize\":200,\"fileCategories\":[{\"type$\":\"OBSERVED_FILE_CATEGORY\",\"category\":\"Document\",\"fileCount\":2,\"totalFileSize\":53,\"isSignificant\":false}],\"outsideTrustedDomainsEmailsCount\":0,\"outsideTrustedDomainsTotalDomainCount\":0,\"outsideTrustedDomainsTotalDomainCountTruncated\":false}"
            }
          }
        }
      ]
    },
    "Note-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "required": [
            "lastModifiedAt"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique id of the note.",
              "example": "noteId"
            },
            "lastModifiedAt": {
              "type": "string",
              "description": "Timestamp of when the note was last modified.",
              "format": "date-time",
              "example": "2020-02-19T01:57:45.006683Z"
            },
            "lastModifiedBy": {
              "type": "string",
              "description": "User who last modified the note.",
              "example": "exampleUsername"
            },
            "message": {
              "type": "string",
              "description": "The note itself.",
              "example": "This is a note."
            }
          }
        }
      ]
    },
    "DetailsQuery-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "required": [
            "alertIds"
          ],
          "properties": {
            "alertIds": {
              "type": "array",
              "description": "The unique identifiers representing the alerts you want to act upon.",
              "maxLength": 100,
              "example": [
                "ExampleAlertId1",
                "ExampleAlertId2"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "AlertDetailsInAggregateResponse-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "properties": {
            "alert": {
              "description": "The alerts returned by the details query.",
              "$ref": "#/definitions/AlertDetailsAggregate-alerts"
            }
          }
        }
      ]
    },
    "AlertDetailsAggregate-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/AlertSummary-alerts"
        },
        {
          "type": "object",
          "properties": {
            "observation": {
              "description": "Observation aggregate of the alert.",
              "$ref": "#/definitions/ObservationAggregate-alerts"
            },
            "note": {
              "description": "Most recent note added to the alert.",
              "$ref": "#/definitions/Note-alerts"
            }
          }
        }
      ]
    },
    "ObservationAggregate-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "required": [
            "observedAt"
          ],
          "properties": {
            "observedAt": {
              "type": "string",
              "description": "Timestamp of when the observation was observed.",
              "format": "date-time",
              "example": "2020-02-19T01:57:45.006683Z"
            },
            "type": {
              "type": "string",
              "description": "The type of observation data recorded.",
              "example": "FedCloudSharePermissions"
            },
            "data": {
              "type": "string",
              "description": "The JSON formatted observation data rolled into one aggregation.",
              "example": "{\"type$\":\"OBSERVED_CLOUD_SHARE_ACTIVITY\",\"id\":\"exampleId\",\"sources\":[\"OneDrive\"],\"exposureTypes\":[\"PublicLinkShare\"],\"firstActivityAt\":\"2020-02-19T01:50:00.0000000Z\",\"lastActivityAt\":\"2020-02-19T01:55:00.0000000Z\",\"fileCount\":2,\"totalFileSize\":200,\"fileCategories\":[{\"type$\":\"OBSERVED_FILE_CATEGORY\",\"category\":\"Document\",\"fileCount\":2,\"totalFileSize\":53,\"isSignificant\":false}],\"outsideTrustedDomainsEmailsCount\":0,\"outsideTrustedDomainsTotalDomainCount\":0,\"outsideTrustedDomainsTotalDomainCountTruncated\":false}"
            }
          }
        }
      ]
    },
    "DetailsInAggregateQuery-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "required": [
            "alertId"
          ],
          "properties": {
            "alertId": {
              "type": "string",
              "description": "The unique identifier representing the alert you want to act upon.",
              "maxLength": 40,
              "example": "ExampleAlertId"
            }
          }
        }
      ]
    },
    "RuleMetadataSearchResponse-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "required": [
            "totalCount"
          ],
          "properties": {
            "ruleMetadata": {
              "type": "array",
              "description": "List of rules that are returned.",
              "items": {
                "$ref": "#/definitions/RuleMetadata-alerts"
              }
            },
            "totalCount": {
              "type": "integer",
              "description": "The number of rules that match the given query.",
              "format": "int64",
              "example": "3"
            },
            "problems": {
              "type": "array",
              "description": "Potential issues that were hit while trying to run the query.",
              "example": [],
              "items": {
                "$ref": "#/definitions/QueryProblem-alerts"
              }
            }
          }
        }
      ]
    },
    "RuleMetadata-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/ObserverRuleMetadataEssentials-alerts"
        },
        {
          "type": "object",
          "required": [
            "createdAt"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "Id of the rule.",
              "example": "UniqueRuleId"
            },
            "createdBy": {
              "type": "string",
              "description": "Username of the individual who created the rule.",
              "example": "UserWhoCreatedTheRule"
            },
            "createdAt": {
              "type": "string",
              "description": "Timestamp of when the rule was created.",
              "format": "date-time",
              "example": "2020-02-19T01:57:45.006683Z"
            }
          }
        }
      ]
    },
    "ObserverRuleMetadataEssentials-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/ObserverRuleMetadata-alerts"
        },
        {
          "type": "object",
          "required": [
            "type",
            "tenantId"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 40,
              "example": "MyExampleTenant"
            },
            "observerRuleId": {
              "type": "string",
              "description": "Id of the rule in the observer.",
              "example": "UniqueRuleId"
            },
            "type": {
              "description": "Rule type of the rule.",
              "$ref": "#/definitions/RuleType-alerts"
            }
          }
        }
      ]
    },
    "ObserverRuleMetadata-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/AuditInfo-alerts"
        },
        {
          "type": "object",
          "required": [
            "severity",
            "isSystem",
            "isEnabled"
          ],
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the rule.",
              "example": "My Removable Media Exfiltration Rule"
            },
            "description": {
              "type": "string",
              "description": "The description of the rule.",
              "example": "Will generate alerts when files moved to USB."
            },
            "severity": {
              "description": "The severity of the rule.",
              "$ref": "#/definitions/SeverityRating-alerts"
            },
            "isSystem": {
              "type": "boolean",
              "description": "Boolean indicating if the rule was created from another Code42 Application.",
              "example": "FALSE"
            },
            "isEnabled": {
              "type": "boolean",
              "description": "Boolean indicating if the rule is enabled to trigger alerts.",
              "example": "TRUE"
            },
            "ruleSource": {
              "type": "string",
              "description": "The source of the rule.  Will be one of [DepartingEmployee, Alerting, HighRiskEmployee]",
              "example": "Alerting"
            }
          }
        }
      ]
    },
    "AuditInfo-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "required": [
            "modifiedAt"
          ],
          "properties": {
            "modifiedBy": {
              "type": "string",
              "description": "Username of the individual who last modified the rule.",
              "example": "UserWhoMostRecentlyModifiedTheRule"
            },
            "modifiedAt": {
              "type": "string",
              "description": "Timestamp of when the rule was last modified.",
              "format": "date-time",
              "example": "2020-02-19T01:57:45.006683Z"
            }
          }
        }
      ]
    },
    "RuleMetadataSearchQuery-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "required": [
            "pgSize",
            "pgNum",
            "tenantId",
            "groupClause",
            "srtKey"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 40,
              "example": "MyExampleTenant"
            },
            "groups": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FilterGroup-alerts"
              }
            },
            "groupClause": {
              "type": "string",
              "description": "The clause to use when combining group filters.  Must be AND/OR.",
              "example": "OR"
            },
            "pgSize": {
              "type": "integer",
              "description": "The number of items to return in one request.  Value must be between 0 and 100.",
              "format": "int32",
              "maximum": 500,
              "example": "20"
            },
            "pgNum": {
              "type": "integer",
              "description": "The page number to return. Page 0 is the first page of results.",
              "format": "int32",
              "example": "0"
            },
            "srtKey": {
              "type": "string",
              "description": "The rule metadata attribute to sort by.  Value must be one of: RuleMetadataId, TenantId, ObserverRuleId, Type, Name, Description, Severity, IsSystem, IsEnabled, RuleSource, ModifiedAt, ModifiedBy, CreatedAt, CreatedBy, LogString",
              "example": "CreatedAt"
            },
            "srtDirection": {
              "$ref": "#/definitions/SortDirection-alerts"
            }
          }
        }
      ]
    },
    "CaseProblemResponse-cases": {
      "type": "object",
      "required": [
        "problem"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "problem": {
          "type": "string",
          "enum": [
            "NAME_EMPTY",
            "NAME_EXISTS",
            "NAME_TOO_LONG",
            "NO_EDITS_ONCE_CLOSED",
            "DESCRIPTION_TOO_LONG",
            "FINDINGS_TOO_LONG",
            "INVALID_PAGE_NUMBER",
            "INVALID_PAGE_SIZE",
            "INVALID_TIME_INTERVAL",
            "INVALID_USER",
            "USER_VALIDATION_UNAVAILABLE",
            "USER_VALIDATION_FORBIDDEN"
          ]
        }
      },
      "title": "CaseProblemResponse"
    },
    "CreateCaseRequest-cases": {
      "type": "object",
      "properties": {
        "assignee": {
          "type": "string",
          "description": "The user UID of the administrator assigned to investigate the case."
        },
        "description": {
          "type": "string",
          "description": "Brief description providing context for a case."
        },
        "findings": {
          "type": "string",
          "description": "Markdown formatted text summarizing the findings for a case."
        },
        "name": {
          "type": "string",
          "description": "The unique name given to the case."
        },
        "subject": {
          "type": "string",
          "description": "The user UID of the subject being investigated in this case."
        }
      },
      "title": "CreateCaseRequest"
    },
    "EventProblemResponse-cases": {
      "type": "object",
      "required": [
        "problem"
      ],
      "properties": {
        "problem": {
          "type": "string"
        }
      },
      "title": "EventProblemResponse"
    },
    "EventResponse-cases": {
      "type": "object",
      "properties": {
        "eventId": {
          "type": "string",
          "description": "The unique identifier for the event"
        },
        "eventTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time that the Code42 service on the device detected an event; based on the device’s system clock and reported in Coordinated Universal Time (UTC)"
        },
        "exposure": {
          "type": "array",
          "description": "Lists indicators that the data may be exposed",
          "items": {
            "type": "string"
          }
        },
        "fileName": {
          "type": "string",
          "description": "The name of the file, including the file extension"
        },
        "filePath": {
          "type": "string",
          "description": "The file location on the user's device; a path forward or backslash should be included at the end of the filepath. Possibly null if the file event occurred on a cloud provider."
        }
      },
      "title": "EventResponse"
    },
    "MultiCaseResponse-cases": {
      "type": "object",
      "required": [
        "cases",
        "totalCount"
      ],
      "properties": {
        "cases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SingleSlimCaseResponse-cases"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "MultiCaseResponse"
    },
    "MultipleEventsResponse-cases": {
      "type": "object",
      "required": [
        "events"
      ],
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventResponse-cases"
          }
        }
      },
      "title": "MultipleEventsResponse"
    },
    "SingleCaseResponse-cases": {
      "type": "object",
      "properties": {
        "assignee": {
          "type": "string",
          "description": "The user UID of the administrator assigned to investigate the case."
        },
        "assigneeUsername": {
          "type": "string",
          "description": "The username of the administrator assigned to investigate the case."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time at which the case was created."
        },
        "createdByUserUid": {
          "type": "string",
          "description": "User UID of the user who created the case."
        },
        "createdByUsername": {
          "type": "string",
          "description": "Username of the user who created the case."
        },
        "description": {
          "type": "string",
          "description": "Brief description providing context for a case."
        },
        "findings": {
          "type": "string",
          "description": "Markdown formatted text summarizing the findings for a case."
        },
        "lastModifiedByUserUid": {
          "type": "string",
          "description": "User UID of the user who last modified the case."
        },
        "lastModifiedByUsername": {
          "type": "string",
          "description": "Username of the user who last modified the case."
        },
        "name": {
          "type": "string",
          "description": "The unique name given to the case."
        },
        "number": {
          "type": "integer",
          "format": "int64",
          "description": "Unique numeric identifier for the case."
        },
        "status": {
          "type": "string",
          "description": "Indicates the status of the case.\nOPEN: The case is active and all aspects of the case are editable.\nCLOSED: The case is resolved. Closed cases cannot be re-opened or modified. Case data for closed cases is retained indefinitely.",
          "enum": [
            "OPEN",
            "CLOSED"
          ]
        },
        "subject": {
          "type": "string",
          "description": "The user UID of the subject being investigated in this case."
        },
        "subjectUsername": {
          "type": "string",
          "description": "The username of the subject being investigated in this case."
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time at which the case was last updated."
        }
      },
      "title": "SingleCaseResponse"
    },
    "SingleSlimCaseResponse-cases": {
      "type": "object",
      "properties": {
        "assignee": {
          "type": "string",
          "description": "The user UID of the administrator assigned to investigate the case."
        },
        "assigneeUsername": {
          "type": "string",
          "description": "The username of the administrator assigned to investigate the case."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time at which the case was created."
        },
        "createdByUserUid": {
          "type": "string",
          "description": "User UID of the user who created the case."
        },
        "createdByUsername": {
          "type": "string",
          "description": "Username of the user who created the case."
        },
        "lastModifiedByUserUid": {
          "type": "string",
          "description": "User UID of the user who last modified the case."
        },
        "lastModifiedByUsername": {
          "type": "string",
          "description": "Username of the user who last modified the case."
        },
        "name": {
          "type": "string",
          "description": "The unique name given to the case."
        },
        "number": {
          "type": "integer",
          "format": "int64",
          "description": "Unique numeric identifier for the case."
        },
        "status": {
          "type": "string",
          "description": "Indicates the status of the case.\nOPEN: The case is active and all aspects of the case are editable.\nCLOSED: The case is resolved. Closed cases cannot be re-opened or modified. Case data for closed cases is retained indefinitely.",
          "enum": [
            "OPEN",
            "CLOSED"
          ]
        },
        "subject": {
          "type": "string",
          "description": "The user UID of the subject being investigated in this case."
        },
        "subjectUsername": {
          "type": "string",
          "description": "The username of the subject being investigated in this case."
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time at which the case was last updated."
        }
      },
      "title": "SingleSlimCaseResponse"
    },
    "StreamingResponseBody-cases": {
      "type": "object",
      "title": "StreamingResponseBody"
    },
    "UpdateCaseRequest-cases": {
      "type": "object",
      "properties": {
        "assignee": {
          "type": "string",
          "description": "The user UID of the administrator assigned to investigate the case."
        },
        "description": {
          "type": "string",
          "description": "Brief description providing context for a case."
        },
        "findings": {
          "type": "string",
          "description": "Markdown formatted text summarizing the findings for a case."
        },
        "name": {
          "type": "string",
          "description": "The unique name given to the case."
        },
        "status": {
          "type": "string",
          "description": "Indicates the status of the case.\nOPEN: The case is active and all aspects of the case are editable.\nCLOSED: The case is resolved. Closed cases cannot be re-opened or modified. Case data for closed cases is retained indefinitely.",
          "enum": [
            "OPEN",
            "CLOSED"
          ]
        },
        "subject": {
          "type": "string",
          "description": "The user UID of the subject being investigated in this case."
        }
      },
      "title": "UpdateCaseRequest"
    },
    "JwtResponse-core": {
      "type": "object",
      "properties": {
        "bearerToken": {
          "description": "A token representing a Code42 user's identity and permission set.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "CustomerResponse-core": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The customer's name.",
          "type": "string"
        },
        "registrationKey": {
          "description": "The customer's Code42 registration key.",
          "type": "string"
        },
        "tenantId": {
          "description": "The customer's unique ID identifying it within Code42.",
          "type": "string"
        }
      }
    },
    "UserPreserveResponse-core": {
      "type": "object",
      "properties": {
        "legacyUserId": {
          "description": "The user ID to use for older console-based APIs that require a user Id.\r\nIf your endpoint domain starts with \"console\" instead of \"api\", use this Id for endpoints that require a userId.",
          "type": "string",
          "readOnly": true
        },
        "userId": {
          "description": "A globally unique ID for this user.",
          "type": "string"
        },
        "username": {
          "description": "The name the user uses to log in to Code42.",
          "type": "string"
        },
        "firstName": {
          "description": "The first (given) name of the user.",
          "type": "string"
        },
        "lastName": {
          "description": "The last (family) name of the user.",
          "type": "string"
        },
        "legacyOrgId": {
          "description": "The org ID to use for older console-based APIs that require an org Id.\r\nIf your endpoint domain starts with \"console\" instead of \"api\", use this Id for endpoints that require an orgId.",
          "type": "string",
          "readOnly": true
        },
        "orgId": {
          "description": "The globally unique ID of the Code42 organization this user belongs to.",
          "type": "string"
        },
        "orgName": {
          "description": "The name of the Code42 organization this user belongs to.",
          "type": "string"
        },
        "notes": {
          "description": "Descriptive information about the user.",
          "type": "string"
        },
        "active": {
          "description": "Whether or not the user is enabled.",
          "type": "boolean"
        },
        "blocked": {
          "description": "Whether or not logins and restores are disabled for the user.",
          "type": "boolean"
        },
        "creationDate": {
          "description": "The date and time the user was created.",
          "type": "string"
        },
        "modificationDate": {
          "description": "The date and time the user was last modified.",
          "type": "string"
        }
      }
    },
    "UserListResponse-core": {
      "type": "object",
      "properties": {
        "totalCount": {
          "format": "int64",
          "type": "integer"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserPreserveResponse-core"
          }
        }
      }
    },
    "UserResponse-core": {
      "type": "object",
      "properties": {
        "legacyUserId": {
          "description": "The user ID to use for older console-based APIs that require a user Id.\r\nIf your endpoint domain starts with \"console\" instead of \"api\", use this Id for endpoints that require a userId.",
          "type": "string",
          "readOnly": true
        },
        "userId": {
          "description": "A globally unique ID for this user.",
          "type": "string"
        },
        "username": {
          "description": "The name the user uses to log in to Code42.",
          "type": "string"
        },
        "firstName": {
          "description": "The first (given) name of the user.",
          "type": "string"
        },
        "lastName": {
          "description": "The last (family) name of the user.",
          "type": "string"
        },
        "legacyOrgId": {
          "description": "The org ID to use for older console-based APIs that require an org Id.\r\nIf your endpoint domain starts with \"console\" instead of \"api\", use this Id for endpoints that require an orgId.",
          "type": "string",
          "readOnly": true
        },
        "orgId": {
          "description": "The globally unique ID of the Code42 organization this user belongs to.",
          "type": "string"
        },
        "orgName": {
          "description": "The name of the Code42 organization this user belongs to.",
          "type": "string"
        },
        "notes": {
          "description": "Descriptive information about the user.",
          "type": "string"
        },
        "active": {
          "description": "Whether or not the user is enabled.",
          "type": "boolean"
        },
        "blocked": {
          "description": "Whether or not logins and restores are disabled for the user.",
          "type": "boolean"
        },
        "creationDate": {
          "description": "The date and time the user was created.",
          "type": "string"
        },
        "modificationDate": {
          "description": "The date and time the user was last modified.",
          "type": "string"
        }
      }
    },
    "DepartingEmployeeV2-detection-lists": {
      "allOf": [
        {
          "$ref": "#/definitions/DetectionListItem-detection-lists"
        },
        {
          "type": "object",
          "properties": {
            "departureDate": {
              "$ref": "#/definitions/DepartureDate-detection-lists"
            }
          }
        }
      ]
    },
    "DetectionListItem-detection-lists": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-detection-lists"
        },
        {
          "type": "object",
          "required": [
            "createdAt",
            "status"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The tenant for the user.",
              "example": "SampleTenant1"
            },
            "userId": {
              "type": "string",
              "description": "The user's Code42 user id.",
              "example": "12345"
            },
            "userName": {
              "type": "string",
              "description": "The user's Code42 username.",
              "example": "Sample.User1@samplecase.com"
            },
            "displayName": {
              "type": "string",
              "description": "Display friendly name of the user, if available.",
              "example": "Sample User1"
            },
            "notes": {
              "type": "string",
              "description": "Optional notes about the user.",
              "example": "This is an example of notes about Sample User1."
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "status": {
              "$ref": "#/definitions/ItemStatus-detection-lists"
            },
            "cloudUsernames": {
              "type": "array",
              "example": [
                "Sample.User1@samplecase.com",
                "Sample.User1@gmail.com"
              ],
              "items": {
                "type": "string",
                "description": "Optional list of cloud usernames (aliases) for the user."
              }
            },
            "managerUid": {
              "type": "string",
              "description": "The user's manager's Code42 user id.",
              "example": "12345"
            },
            "managerUsername": {
              "type": "string",
              "description": "The user's manager's Code42 username.",
              "example": "manager.user1@samplecase.com"
            },
            "managerDisplayName": {
              "type": "string",
              "description": "Display friendly name of the user's manager, if available.",
              "example": "Manager Name"
            },
            "title": {
              "type": "string",
              "description": "The user's job title, if any.",
              "example": "Software Engineer"
            },
            "division": {
              "type": "string",
              "description": "The user's division, if any.",
              "example": "Engineering"
            },
            "department": {
              "type": "string",
              "description": "The user's department, if any.",
              "example": "Research and Development"
            },
            "employmentType": {
              "type": "string",
              "description": "The user's employment type, if any.",
              "example": "Full-time"
            },
            "city": {
              "type": "string",
              "description": "The user's city, if any.",
              "example": "Anytown"
            },
            "state": {
              "type": "string",
              "description": "The user's state, if any.",
              "example": "MN"
            },
            "country": {
              "type": "string",
              "description": "The user's country, if any.",
              "example": "US"
            },
            "totalBytes": {
              "type": "integer",
              "description": "Total number of bytes.  Note: this field is only returned in the search action.",
              "format": "int64",
              "example": "4192"
            },
            "numEvents": {
              "type": "integer",
              "description": "Total number of events.  Note: this field is only returned in the search action.",
              "format": "int64",
              "example": "7"
            }
          }
        }
      ]
    },
    "ItemStatus-detection-lists": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Open",
        "Resolved"
      ],
      "enum": [
        "OPEN",
        "RESOLVED"
      ]
    },
    "DomainValue-detection-lists": {
      "type": "object",
      "x-abstract": true
    },
    "GetDepartingEmployeeV2Query-detection-lists": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-detection-lists"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "userId"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The tenant identifier.",
              "example": "SampleTenant1"
            },
            "userId": {
              "type": "string",
              "description": "The user's Code42 user id.  This id must be known to detection list management.",
              "example": "12345"
            }
          }
        }
      ]
    },
    "DepartingEmployeeSearchResponseV2-detection-lists": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-detection-lists"
        },
        {
          "type": "object",
          "required": [
            "totalCount",
            "filterType",
            "pgSize",
            "pgNum",
            "srtKey",
            "srtDirection"
          ],
          "properties": {
            "items": {
              "type": "array",
              "description": "A paginated list of departing employees.",
              "items": {
                "$ref": "#/definitions/DepartingEmployeeV2-detection-lists"
              }
            },
            "totalCount": {
              "type": "integer",
              "description": "The total number of departing employees matching the search.",
              "format": "int64",
              "example": 25
            },
            "rollups": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DepartingEmployeeFilterRollupV2-detection-lists"
              }
            },
            "filterType": {
              "$ref": "#/definitions/DepartingEmployeeSearchFilterV2-detection-lists"
            },
            "pgSize": {
              "type": "integer",
              "format": "int32"
            },
            "pgNum": {
              "type": "integer",
              "format": "int32"
            },
            "srtKey": {
              "$ref": "#/definitions/DepartingEmployeeFilteredSortKeyV2-detection-lists"
            },
            "srtDirection": {
              "$ref": "#/definitions/SortDirectionV2-detection-lists"
            }
          }
        }
      ]
    },
    "DepartingEmployeeFilterRollupV2-detection-lists": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-detection-lists"
        },
        {
          "type": "object",
          "required": [
            "filterType",
            "totalCount"
          ],
          "properties": {
            "filterType": {
              "$ref": "#/definitions/DepartingEmployeeSearchFilterV2-detection-lists"
            },
            "totalCount": {
              "type": "integer",
              "description": "Total number of departing employees meeting the filter criteria.",
              "format": "int64",
              "example": 246
            }
          }
        }
      ]
    },
    "DepartingEmployeeSearchFilterV2-detection-lists": {
      "type": "string",
      "description": "Type of departing employee to filter on.",
      "x-enumNames": [
        "Open",
        "LeavingToday",
        "Exfiltration24Hours",
        "Exfiltration30Days"
      ],
      "enum": [
        "OPEN",
        "LEAVING_TODAY",
        "EXFILTRATION_24_HOURS",
        "EXFILTRATION_30_DAYS"
      ]
    },
    "DepartingEmployeeFilteredSortKeyV2-detection-lists": {
      "type": "string",
      "description": "Field used for sorting list.",
      "x-enumNames": [
        "DisplayName",
        "DepartureDate",
        "CreatedAt",
        "TotalBytes",
        "NumEvents"
      ],
      "enum": [
        "DISPLAY_NAME",
        "DEPARTURE_DATE",
        "CREATED_AT",
        "TOTAL_BYTES",
        "NUM_EVENTS"
      ]
    },
    "SortDirectionV2-detection-lists": {
      "type": "string",
      "description": "Sorting direction",
      "x-enumNames": [
        "Asc",
        "Desc"
      ],
      "enum": [
        "ASC",
        "DESC"
      ]
    },
    "DepartingEmployeeSearchV2Query-detection-lists": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-detection-lists"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "pgSize",
            "pgNum"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The tenant identifier.",
              "example": "SampleTenant1"
            },
            "filterType": {
              "description": "Criteria for filtering departing employees.",
              "default": "OPEN",
              "$ref": "#/definitions/DepartingEmployeeSearchFilterV2-detection-lists"
            },
            "pgSize": {
              "type": "integer",
              "description": "The number of items to return in one request.  Value must be between 0 and 100.",
              "format": "int32",
              "example": "20"
            },
            "pgNum": {
              "type": "integer",
              "description": "The page number to return.",
              "format": "int32",
              "example": "1"
            },
            "srtKey": {
              "$ref": "#/definitions/DepartingEmployeeFilteredSortKeyV2-detection-lists"
            },
            "srtDirection": {
              "$ref": "#/definitions/SortDirectionV2-detection-lists"
            }
          }
        }
      ]
    },
    "AddDepartingEmployeeV2Command-detection-lists": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-detection-lists"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "userId"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The tenant identifier.",
              "example": "SampleTenant1"
            },
            "userId": {
              "type": "string",
              "description": "The user's Code42 user id.  This id must be known to detection list management.",
              "example": "12345"
            },
            "departureDate": {
              "$ref": "#/definitions/DepartureDate-detection-lists"
            }
          }
        }
      ]
    },
    "UpdateDepartureDateV2Command-detection-lists": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-detection-lists"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "userId"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The tenant identifier.",
              "example": "SampleTenant1"
            },
            "userId": {
              "type": "string",
              "description": "The user's Code42 user id.  This id must be known to detection list management.",
              "example": "12345"
            },
            "departureDate": {
              "$ref": "#/definitions/DepartureDate-detection-lists"
            }
          }
        }
      ]
    },
    "DepartingEmployeeSetAlertStateV2Command-detection-lists": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-detection-lists"
        },
        {
          "type": "object",
          "required": [
            "alertsEnabled"
          ],
          "properties": {
            "tenantId": {
              "type": "string"
            },
            "alertsEnabled": {
              "type": "boolean",
              "description": "Flag determining whether or not alerts should be enabled.",
              "example": true
            }
          }
        }
      ]
    },
    "RemoveDepartingEmployeeV2Command-detection-lists": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-detection-lists"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "userId"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The tenant identifier.",
              "example": "SampleTenant1"
            },
            "userId": {
              "type": "string",
              "description": "The user's Code42 user id.  This id must be known to detection list management.",
              "example": "12345"
            }
          }
        }
      ]
    },
    "HighRiskEmployeeV2-detection-lists": {
      "allOf": [
        {
          "$ref": "#/definitions/DetectionListItem-detection-lists"
        },
        {
          "type": "object",
          "properties": {
            "riskFactors": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RiskFactorV2-detection-lists"
              }
            }
          }
        }
      ]
    },
    "RiskFactorV2-detection-lists": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "FlightRisk",
        "PerformanceConcerns",
        "PoorSecurityPractices",
        "SuspiciousSystemActivity",
        "ElevatedAccessPrivileges",
        "HighImpactEmployee",
        "ContractEmployee"
      ],
      "enum": [
        "FLIGHT_RISK",
        "PERFORMANCE_CONCERNS",
        "POOR_SECURITY_PRACTICES",
        "SUSPICIOUS_SYSTEM_ACTIVITY",
        "ELEVATED_ACCESS_PRIVILEGES",
        "HIGH_IMPACT_EMPLOYEE",
        "CONTRACT_EMPLOYEE"
      ]
    },
    "AddHighRiskEmployeeV2Command-detection-lists": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-detection-lists"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "userId"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The tenant identifier.",
              "example": "SampleTenant1"
            },
            "userId": {
              "type": "string",
              "description": "The user's Code42 user id.  This id must be known to detection list management.",
              "example": "12345"
            }
          }
        }
      ]
    },
    "GetHighRiskEmployeeV2Query-detection-lists": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-detection-lists"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "userId"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The tenant identifier.",
              "example": "SampleTenant1"
            },
            "userId": {
              "type": "string",
              "description": "The user's Code42 user id.  This id must be known to detection list management.",
              "example": "12345"
            }
          }
        }
      ]
    },
    "HighRiskSearchResponseV2-detection-lists": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-detection-lists"
        },
        {
          "type": "object",
          "required": [
            "totalCount",
            "filterType",
            "pgSize",
            "pgNum",
            "srtKey",
            "srtDirection"
          ],
          "properties": {
            "items": {
              "type": "array",
              "description": "A paginated list of high risk employees.",
              "items": {
                "$ref": "#/definitions/HighRiskEmployeeV2-detection-lists"
              }
            },
            "totalCount": {
              "type": "integer",
              "description": "The total number of high risk employees matching the search.",
              "format": "int64",
              "example": 25
            },
            "rollups": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HighRiskFilterRollupV2-detection-lists"
              }
            },
            "filterType": {
              "$ref": "#/definitions/HighRiskSearchFilterV2-detection-lists"
            },
            "riskFactors": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RiskFactorV2-detection-lists"
              }
            },
            "pgSize": {
              "type": "integer",
              "format": "int32"
            },
            "pgNum": {
              "type": "integer",
              "format": "int32"
            },
            "srtKey": {
              "$ref": "#/definitions/HighRiskSortKeyV2-detection-lists"
            },
            "srtDirection": {
              "$ref": "#/definitions/SortDirectionV2-detection-lists"
            }
          }
        }
      ]
    },
    "HighRiskFilterRollupV2-detection-lists": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-detection-lists"
        },
        {
          "type": "object",
          "required": [
            "filterType",
            "totalCount"
          ],
          "properties": {
            "filterType": {
              "$ref": "#/definitions/HighRiskSearchFilterV2-detection-lists"
            },
            "totalCount": {
              "type": "integer",
              "description": "Total number of high risk employees meeting the filter criteria.",
              "format": "int64",
              "example": 246
            }
          }
        }
      ]
    },
    "HighRiskSearchFilterV2-detection-lists": {
      "type": "string",
      "description": "Type of high risk employee to filter on.",
      "x-enumNames": [
        "Open",
        "Exfiltration24Hours",
        "Exfiltration30Days"
      ],
      "enum": [
        "OPEN",
        "EXFILTRATION_24_HOURS",
        "EXFILTRATION_30_DAYS"
      ]
    },
    "HighRiskSortKeyV2-detection-lists": {
      "type": "string",
      "description": "Field used for sorting list.",
      "x-enumNames": [
        "DisplayName",
        "CreatedAt",
        "TotalBytes",
        "NumEvents"
      ],
      "enum": [
        "DISPLAY_NAME",
        "CREATED_AT",
        "TOTAL_BYTES",
        "NUM_EVENTS"
      ]
    },
    "HighRiskEmployeeSearchV2Query-detection-lists": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-detection-lists"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "pgSize",
            "pgNum"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The tenant identifier.",
              "example": "SampleTenant1"
            },
            "filterType": {
              "description": "Criteria for filtering high risk employees.",
              "default": "OPEN",
              "$ref": "#/definitions/HighRiskSearchFilterV2-detection-lists"
            },
            "riskFactors": {
              "type": "array",
              "description": "Optional list of risk factors for filtering users.  If provided, users having any of the risk factors listed will be include.  If not provided all high risk users will be included.",
              "items": {
                "$ref": "#/definitions/RiskFactorV2-detection-lists"
              }
            },
            "pgSize": {
              "type": "integer",
              "description": "The number of items to return in one request.  Value must be between 0 and 100.",
              "format": "int32",
              "example": "20"
            },
            "pgNum": {
              "type": "integer",
              "description": "The page number to return.",
              "format": "int32",
              "example": "1"
            },
            "srtKey": {
              "$ref": "#/definitions/HighRiskSortKeyV2-detection-lists"
            },
            "srtDirection": {
              "$ref": "#/definitions/SortDirectionV2-detection-lists"
            }
          }
        }
      ]
    },
    "HighRiskSetAlertStateV2Command-detection-lists": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-detection-lists"
        },
        {
          "type": "object",
          "required": [
            "alertsEnabled"
          ],
          "properties": {
            "tenantId": {
              "type": "string"
            },
            "alertsEnabled": {
              "type": "boolean",
              "description": "Flag determining whether or not alerts should be enabled.",
              "example": true
            }
          }
        }
      ]
    },
    "RemoveHighRiskEmployeeV2Command-detection-lists": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-detection-lists"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "userId"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The tenant identifier.",
              "example": "SampleTenant1"
            },
            "userId": {
              "type": "string",
              "description": "The user's Code42 user id.  This id must be known to detection list management.",
              "example": "12345"
            }
          }
        }
      ]
    },
    "UserV2-detection-lists": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-detection-lists"
        },
        {
          "type": "object",
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The tenant for the user.",
              "example": "SampleTenant1"
            },
            "userId": {
              "type": "string",
              "description": "The user's Code42 user id.",
              "example": "12345"
            },
            "userName": {
              "type": "string",
              "description": "The user's Code42 username.",
              "example": "Sample.User1@samplecase.com"
            },
            "displayName": {
              "type": "string",
              "description": "Display friendly name of the user, if available.",
              "example": "Sample User1"
            },
            "notes": {
              "type": "string",
              "description": "Optional notes about the user.",
              "example": "This is an example of notes about Sample User1."
            },
            "cloudUsernames": {
              "type": "array",
              "example": [
                "Sample.User1@samplecase.com",
                "Sample.User1@gmail.com"
              ],
              "items": {
                "type": "string",
                "description": "Optional list of cloud usernames (aliases) for the user."
              }
            },
            "managerUid": {
              "type": "string",
              "description": "The user's manager's Code42 user id.",
              "example": "12345"
            },
            "managerUsername": {
              "type": "string",
              "description": "The user's manager's Code42 username.",
              "example": "manager.user1@samplecase.com"
            },
            "managerDisplayName": {
              "type": "string",
              "description": "Display friendly name of the user's manager, if available.",
              "example": "Manager Name"
            },
            "title": {
              "type": "string",
              "description": "The user's job title, if any.",
              "example": "Software Engineer"
            },
            "division": {
              "type": "string",
              "description": "The user's division, if any.",
              "example": "Engineering"
            },
            "department": {
              "type": "string",
              "description": "The user's department, if any.",
              "example": "Research and Development"
            },
            "employmentType": {
              "type": "string",
              "description": "The user's employment type, if any.",
              "example": "Full-time"
            },
            "city": {
              "type": "string",
              "description": "The user's city, if any.",
              "example": "Anytown"
            },
            "state": {
              "type": "string",
              "description": "The user's state, if any.",
              "example": "MN"
            },
            "country": {
              "type": "string",
              "description": "The user's country, if any.",
              "example": "US"
            },
            "riskFactors": {
              "type": "array",
              "description": "Optional list of risk factors for the user.",
              "example": [
                "FLIGHT_RISK",
                "HIGH_IMPACT_EMPLOYEE"
              ],
              "items": {
                "$ref": "#/definitions/RiskFactorV2-detection-lists"
              }
            }
          }
        }
      ]
    },
    "CreateUserV2Command-detection-lists": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-detection-lists"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "userName"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The tenant identifier.",
              "example": "SampleTenant1"
            },
            "userName": {
              "type": "string",
              "description": "The user's Code42 username.",
              "maxLength": 512,
              "example": "Sample.User1@samplecase.com"
            },
            "notes": {
              "type": "string",
              "description": "Optional notes about the user.",
              "maxLength": 250,
              "example": "This is an example of notes about Sample User1'."
            },
            "riskFactors": {
              "type": "array",
              "description": "Optional list of risk factors for the user.",
              "example": [
                "FLIGHT_RISK",
                "HIGH_IMPACT_EMPLOYEE"
              ],
              "items": {
                "$ref": "#/definitions/RiskFactorV2-detection-lists"
              }
            },
            "cloudUsernames": {
              "type": "array",
              "description": "Optional List of Cloud username (aliases) for the user. An additional cloudUsername will be created with the value of the userName parameter for users created if not provided.",
              "maxLength": 2,
              "example": [
                "Sample.User1@gmail.com"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "GetUserByUsernameV2Query-detection-lists": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-detection-lists"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "username"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The tenant identifier.",
              "example": "SampleTenant1"
            },
            "username": {
              "type": "string",
              "description": "The user's Code42 username.",
              "maxLength": 512,
              "example": "Sample.User1@samplecase.com"
            }
          }
        }
      ]
    },
    "GetUserByIdV2Query-detection-lists": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-detection-lists"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "userId"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The tenant identifier.",
              "example": "SampleTenant1"
            },
            "userId": {
              "type": "string",
              "description": "The user's Code42 user id.  This id must be known to detection list management.",
              "example": "12345"
            }
          }
        }
      ]
    },
    "AddRiskFactorsV2Command-detection-lists": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-detection-lists"
        },
        {
          "type": "object",
          "required": [
            "riskFactors",
            "tenantId",
            "userId"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The tenant identifier.",
              "example": "SampleTenant1"
            },
            "userId": {
              "type": "string",
              "description": "The user's Code42 user id.  This id must be known to detection list management.",
              "example": "12345"
            },
            "riskFactors": {
              "type": "array",
              "description": "Risk factors to add to user.",
              "items": {
                "$ref": "#/definitions/RiskFactorV2-detection-lists"
              }
            }
          }
        }
      ]
    },
    "RemoveRiskFactorsV2Command-detection-lists": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-detection-lists"
        },
        {
          "type": "object",
          "required": [
            "riskFactors",
            "tenantId",
            "userId"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The tenant identifier.",
              "example": "SampleTenant1"
            },
            "userId": {
              "type": "string",
              "description": "The user's Code42 user id.  This id must be known to detection list management.",
              "example": "12345"
            },
            "riskFactors": {
              "type": "array",
              "description": "Risk factors to remove from user.",
              "items": {
                "$ref": "#/definitions/RiskFactorV2-detection-lists"
              }
            }
          }
        }
      ]
    },
    "AddCloudUsernamesV2Command-detection-lists": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-detection-lists"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "userId",
            "cloudUsernames"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The tenant identifier.",
              "example": "SampleTenant1"
            },
            "userId": {
              "type": "string",
              "description": "The user's Code42 user id.  This id must be known to detection list management.",
              "example": "12345"
            },
            "cloudUsernames": {
              "type": "array",
              "description": "List of Cloud usernames (aliases) to add to the user. The result of these additions cannot cause total count of aliases to exceed 2 for the user.",
              "example": [
                "Sample.User1@gmail.com"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "RemoveCloudUsernamesV2Command-detection-lists": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-detection-lists"
        },
        {
          "type": "object",
          "required": [
            "cloudUsernames",
            "tenantId",
            "userId"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The tenant identifier.",
              "example": "SampleTenant1"
            },
            "userId": {
              "type": "string",
              "description": "The user's Code42 user id.  This id must be known to detection list management.",
              "example": "12345"
            },
            "cloudUsernames": {
              "type": "array",
              "description": "List of Cloud usernames (aliases) to remove from the user.",
              "example": [
                "Sample.User1@gmail.com"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "UpdateNotesV2Command-detection-lists": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-detection-lists"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "userId"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The tenant identifier.",
              "example": "SampleTenant1"
            },
            "userId": {
              "type": "string",
              "description": "The user's Code42 user id.  This id must be known to detection list management.",
              "example": "12345"
            },
            "notes": {
              "type": "string",
              "description": "Optional notes about the user.",
              "maxLength": 250,
              "example": "This is an example of notes about Sample User1'."
            }
          }
        }
      ]
    },
    "RefreshUserAttributesV2Command-detection-lists": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-detection-lists"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "userId"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The tenant identifier.",
              "example": "SampleTenant1"
            },
            "userId": {
              "type": "string",
              "description": "The user's Code42 user id.  This id must be known to detection list management.",
              "example": "12345"
            }
          }
        }
      ]
    },
    "DepartureDate-detection-lists": {
      "title": "DepartureDate",
      "type": "string",
      "description": "The date the employee departs.",
      "format": "date",
      "example": "2019-11-27"
    },
    "ExportRequest-file-events": {
      "type": "object",
      "required": [
        "defaultSortKey",
        "groups"
      ],
      "properties": {
        "columns": {
          "type": "array",
          "description": "Which columns to include in the output. If none is provided, all available columnswill be output in an unspecified, not-guaranteed order.",
          "items": {
            "type": "string",
            "enum": [
              "eventId",
              "eventType",
              "eventTimestamp",
              "insertionTimestamp",
              "filePath",
              "fileName",
              "fileType",
              "fileCategory",
              "fileCategoryByBytes",
              "fileCategoryByExtension",
              "fileSize",
              "fileOwner",
              "md5Checksum",
              "sha256Checksum",
              "createTimestamp",
              "modifyTimestamp",
              "deviceUserName",
              "deviceUid",
              "userUid",
              "osHostName",
              "domainName",
              "publicIpAddress",
              "privateIpAddresses",
              "actor",
              "directoryId",
              "source",
              "url",
              "shared",
              "sharedWith",
              "sharingTypeAdded",
              "cloudDriveId",
              "detectionSourceAlias",
              "fileId",
              "exposure",
              "processOwner",
              "processName",
              "windowTitle",
              "tabUrl",
              "removableMediaVendor",
              "removableMediaName",
              "removableMediaSerialNumber",
              "removableMediaCapacity",
              "removableMediaBusType",
              "removableMediaMediaName",
              "removableMediaVolumeName",
              "removableMediaPartitionId",
              "syncDestination",
              "syncDestinationUsername",
              "emailDlpPolicyNames",
              "emailSubject",
              "emailSender",
              "emailFrom",
              "emailRecipients",
              "outsideActiveHours",
              "mimeTypeByBytes",
              "mimeTypeByExtension",
              "mimeTypeMismatch",
              "printJobName",
              "printerName",
              "printedFilesBackupPath",
              "remoteActivity",
              "trusted",
              "operatingSystemUser",
              "destinationCategory",
              "destinationName"
            ]
          }
        },
        "defaultSortKey": {
          "type": "string",
          "enum": [
            "eventId",
            "eventType",
            "eventTimestamp",
            "insertionTimestamp",
            "filePath",
            "fileName",
            "fileType",
            "fileCategory",
            "fileCategoryByBytes",
            "fileCategoryByExtension",
            "fileSize",
            "fileOwner",
            "md5Checksum",
            "sha256Checksum",
            "createTimestamp",
            "modifyTimestamp",
            "deviceUserName",
            "deviceUid",
            "userUid",
            "osHostName",
            "domainName",
            "publicIpAddress",
            "privateIpAddresses",
            "actor",
            "directoryId",
            "source",
            "url",
            "shared",
            "sharedWith",
            "sharingTypeAdded",
            "cloudDriveId",
            "detectionSourceAlias",
            "fileId",
            "exposure",
            "processOwner",
            "processName",
            "windowTitle",
            "tabUrl",
            "removableMediaVendor",
            "removableMediaName",
            "removableMediaSerialNumber",
            "removableMediaCapacity",
            "removableMediaBusType",
            "removableMediaMediaName",
            "removableMediaVolumeName",
            "removableMediaPartitionId",
            "syncDestination",
            "syncDestinationUsername",
            "emailDlpPolicyNames",
            "emailSubject",
            "emailSender",
            "emailFrom",
            "emailRecipients",
            "outsideActiveHours",
            "mimeTypeByBytes",
            "mimeTypeByExtension",
            "mimeTypeMismatch",
            "printJobName",
            "printerName",
            "printedFilesBackupPath",
            "remoteActivity",
            "trusted",
            "operatingSystemUser",
            "destinationCategory",
            "destinationName"
          ]
        },
        "groupClause": {
          "type": "string",
          "description": "Grouping clause for any specified groups.  Default is 'AND'",
          "enum": [
            "AND",
            "OR"
          ]
        },
        "groups": {
          "type": "array",
          "description": "One or more FilterGroups to be combined in a query",
          "items": {
            "$ref": "#/definitions/FilterGroup-file-events"
          }
        },
        "srtDir": {
          "type": "string",
          "description": "Sort direction.  Default is 'desc'",
          "enum": [
            "asc",
            "desc"
          ]
        },
        "srtKey": {
          "type": "string",
          "description": "Search term for sorting",
          "enum": [
            "eventId",
            "eventType",
            "eventTimestamp",
            "insertionTimestamp",
            "filePath",
            "fileName",
            "fileType",
            "fileCategory",
            "fileCategoryByBytes",
            "fileCategoryByExtension",
            "fileSize",
            "fileOwner",
            "md5Checksum",
            "sha256Checksum",
            "createTimestamp",
            "modifyTimestamp",
            "deviceUserName",
            "deviceUid",
            "userUid",
            "osHostName",
            "domainName",
            "publicIpAddress",
            "privateIpAddresses",
            "actor",
            "directoryId",
            "source",
            "url",
            "shared",
            "sharedWith",
            "sharingTypeAdded",
            "cloudDriveId",
            "detectionSourceAlias",
            "fileId",
            "exposure",
            "processOwner",
            "processName",
            "windowTitle",
            "tabUrl",
            "removableMediaVendor",
            "removableMediaName",
            "removableMediaSerialNumber",
            "removableMediaCapacity",
            "removableMediaBusType",
            "removableMediaMediaName",
            "removableMediaVolumeName",
            "removableMediaPartitionId",
            "syncDestination",
            "syncDestinationUsername",
            "emailDlpPolicyNames",
            "emailSubject",
            "emailSender",
            "emailFrom",
            "emailRecipients",
            "outsideActiveHours",
            "mimeTypeByBytes",
            "mimeTypeByExtension",
            "mimeTypeMismatch",
            "printJobName",
            "printerName",
            "printedFilesBackupPath",
            "remoteActivity",
            "trusted",
            "operatingSystemUser",
            "destinationCategory",
            "destinationName"
          ]
        }
      },
      "title": "ExportRequest"
    },
    "FieldError-file-events": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "description": "Error indicating why the field could not be determined"
        },
        "field": {
          "type": "string",
          "description": "FileEvent field that could not be determined"
        }
      },
      "title": "FieldError"
    },
    "FileEvent-file-events": {
      "type": "object",
      "required": [
        "eventId",
        "eventType",
        "exposure",
        "fileName",
        "fileType",
        "privateIpAddresses"
      ],
      "properties": {
        "actor": {
          "type": "string",
          "description": "Name of the user reported by the cloud provider for the user who performed this file activity"
        },
        "cloudDriveId": {
          "type": "string",
          "description": "Unique identifier reported by the cloud provider for the drive containing the file at the time the event occurred"
        },
        "createTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "File creation timestamp as reported by the device's operating system in Coordinated Universal Time (UTC); available for Mac and Windows NTFS devices only"
        },
        "destinationCategory": {
          "type": "string",
          "description": "General category of where data was sent for a file exposure event. For example: Cloud Storage, Email, Social Media."
        },
        "destinationName": {
          "type": "string",
          "description": "Specific target of where data was sent for a file exposure event. For example: Google Drive, Outlook, Slack."
        },
        "detectionSourceAlias": {
          "type": "string",
          "description": "Name provided by a Code42 Customer Cloud Administrator when a Cloud Connector is initially configured"
        },
        "deviceUid": {
          "type": "string",
          "description": "Unique identifier for the device. Null if the file event occurred on a cloud provider."
        },
        "deviceUserName": {
          "type": "string",
          "description": "The Code42 username used to sign in to the Code42 app on the device. Null if the file event occurred on a cloud provider."
        },
        "directoryId": {
          "type": "array",
          "description": "Unique identifiers of the parent drives that contain the file; searching on directoryId will return events for all of the files contained in the parent drive",
          "items": {
            "type": "string"
          }
        },
        "domainName": {
          "type": "string",
          "description": "Fully qualified domain name (FQDN) for the user's device at the time the event is recorded.  If the device is unable to resolve the domain name of the host, it reports the IP address of the host"
        },
        "emailDlpPolicyNames": {
          "type": "array",
          "description": "The name of the DLP policy that matched on the email's file attachment",
          "items": {
            "type": "string"
          }
        },
        "emailFrom": {
          "type": "string",
          "description": "The owner of the inbox for the email that matched on a DLP rule"
        },
        "emailRecipients": {
          "type": "array",
          "description": "The CC and BCC recipients included on the email that matched on a DLP rule",
          "items": {
            "type": "string"
          }
        },
        "emailSender": {
          "type": "string",
          "description": "The individual who sent the email. This is often, but not always, the owner of the inbox for the email that matched on a DLP rule."
        },
        "emailSubject": {
          "type": "string",
          "description": "The subject of the email that matched on a DLP rule"
        },
        "eventId": {
          "type": "string",
          "description": "The unique identifier for the event"
        },
        "eventTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time that the Code42 service on the device detected an event; based on the device’s system clock and reported in Coordinated Universal Time (UTC)"
        },
        "eventType": {
          "type": "string",
          "description": "Indicates the type of file event observed; only CREATED, MODIFIED, and DELETED are searchable",
          "enum": [
            "CREATED",
            "MODIFIED",
            "DELETED",
            "UNCHANGED",
            "READ_BY_APP",
            "UNSUPPORTED",
            "RULE_MATCH",
            "RESTORE",
            "OPEN",
            "DOWNLOADED",
            "PREVIEWED",
            "EMAILED",
            "PRINTED"
          ]
        },
        "exposure": {
          "type": "array",
          "description": "Lists indicators that the data may be exposed",
          "items": {
            "type": "string"
          }
        },
        "fieldErrors": {
          "type": "array",
          "description": "List fields with errors indicating why they could not be determined",
          "items": {
            "$ref": "#/definitions/FieldError-file-events"
          }
        },
        "fileCategory": {
          "type": "string",
          "description": "A categorization of the file that is inferred from MIME type",
          "enum": [
            "UNCATEGORIZED",
            "AUDIO",
            "IMAGE",
            "VIDEO",
            "ARCHIVE",
            "DOCUMENT",
            "PRESENTATION",
            "SPREADSHEET",
            "PDF",
            "EXECUTABLE",
            "SCRIPT",
            "SOURCE_CODE",
            "VIRTUAL_DISK_IMAGE"
          ]
        },
        "fileCategoryByBytes": {
          "type": "string",
          "description": "A categorization of the file based on its contents"
        },
        "fileCategoryByExtension": {
          "type": "string",
          "description": "A categorization of the file based on its extension"
        },
        "fileId": {
          "type": "string",
          "description": "Unique identifier reported by the cloud provider for the file associated with the event"
        },
        "fileName": {
          "type": "string",
          "description": "The name of the file, including the file extension"
        },
        "fileOwner": {
          "type": "string",
          "description": "The name of the user who owns the file as reported by the device's file system"
        },
        "filePath": {
          "type": "string",
          "description": "The file location on the user's device; a path forward or backslash should be included at the end of the filepath. Possibly null if the file event occurred on a cloud provider."
        },
        "fileSize": {
          "type": "integer",
          "format": "int64",
          "description": "Size of the file"
        },
        "fileType": {
          "type": "string",
          "description": "The type of file detected; only FILE types are searchable",
          "enum": [
            "UNKNOWN",
            "FILE",
            "DIR",
            "WIN_NDS",
            "MAC_RSRC",
            "SYMLINK",
            "FIFO",
            "BLOCK_DEVICE",
            "CHAR_DEVICE",
            "BUNDLE"
          ]
        },
        "insertionTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time that the event was received for indexing in Forensic Search; timestamp is based on the Code42 server system clock and reported in Coordinated Universal Time (UTC)"
        },
        "md5Checksum": {
          "type": "string",
          "description": "The MD5 hash of the file contents"
        },
        "mimeTypeByBytes": {
          "type": "string",
          "description": "The MIME type of the file based on its contents"
        },
        "mimeTypeByExtension": {
          "type": "string",
          "description": "The MIME type of the file based on its extension"
        },
        "mimeTypeMismatch": {
          "type": "boolean",
          "description": "Indicates whether or not the MIME type of the file based on its contents does not match the MIME type based on its extension and that this mismatch is unexpected"
        },
        "modifyTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "File modification timestamp as reported by the device's operating system.  This only indicates changes to file contents.  Changes to file permissions, file owner, or other metadata are not reflected in this timestamp.  Date is reported in Coordinated Universal Time (UTC)"
        },
        "operatingSystemUser": {
          "type": "string",
          "description": "The username logged in to the device when the file activity was observed, as reported by the device’s operating system."
        },
        "osHostName": {
          "type": "string",
          "description": "The name reported by the device's operating system.  This may be different than the device name in the Code42 administration console"
        },
        "outsideActiveHours": {
          "type": "boolean",
          "description": "Indicates whether or not this event occurred outside of the user's typical active hours using data modeling from the this user's prior activity"
        },
        "printJobName": {
          "type": "string",
          "description": "For print events, the name of the print job, as reported by the user's device"
        },
        "printedFilesBackupPath": {
          "type": "string"
        },
        "printerName": {
          "type": "string",
          "description": "For print events, the name of the printer the job was sent to"
        },
        "privateIpAddresses": {
          "type": "array",
          "description": "The IP address of the user's device on your internal network, including Network interfaces, Virtual Network Interface controllers (NICs), and Loopback/non-routable addresses",
          "items": {
            "type": "string"
          }
        },
        "processName": {
          "type": "string",
          "description": "For events generated when a file is read in a browser or other app, describes the specific operating system process"
        },
        "processOwner": {
          "type": "string",
          "description": "For events generated when a file is read in a browser or other app, describes the operating system owner for the process"
        },
        "publicIpAddress": {
          "type": "string",
          "description": "The external IP address of the user's device"
        },
        "remoteActivity": {
          "type": "string",
          "description": "For endpoint events, compares the IP address of the file event to your defined list of addresses in the Data Preferences section of the Code42 console. If the IP address from the file event does not match, \"remote\" is true. If the IP address does match, \"remote\" is false.",
          "enum": [
            "TRUE",
            "FALSE",
            "UNKNOWN"
          ]
        },
        "removableMediaBusType": {
          "type": "string",
          "description": "For events detected on removable media, describes communication system used to transfer data between the host and the removable device"
        },
        "removableMediaCapacity": {
          "type": "integer",
          "format": "int64",
          "description": "For events detected on removable media, describes the capacity of the removable device in bytes"
        },
        "removableMediaMediaName": {
          "type": "string",
          "description": "For events detected on removable media, the media name of the device, as reported by the vendor/device. This is usually very similar to the productName, but can vary based on the type of device. For example, if the device is a hard drive in a USB enclosure, this may be the combination of the drive model and the enclosure model.\nThis value is not provided by all devices, so it may be null in some cases."
        },
        "removableMediaName": {
          "type": "string",
          "description": "For events detected on removable media, describes the name of the removable device"
        },
        "removableMediaPartitionId": {
          "type": "array",
          "description": "For events detected on removable media, a unique identifier assigned to the volume/partition when it was formatted. Windows devices refer to this as the VolumeGuid. On Mac devices, this is the Disk / Partition UUID, which appears when running the Terminal command diskUtil info.",
          "items": {
            "type": "string"
          }
        },
        "removableMediaSerialNumber": {
          "type": "string",
          "description": "For events detected on removable media, describes the serial number of the removable device"
        },
        "removableMediaVendor": {
          "type": "string",
          "description": "For events detected on removable media, describes the vendor of the removable device"
        },
        "removableMediaVolumeName": {
          "type": "array",
          "description": "For events detected on removable media, the name assigned to the volume when it was formatted, as reported by the device's operating system. This is also frequently called the \"partition\" name.",
          "items": {
            "type": "string"
          }
        },
        "sha256Checksum": {
          "type": "string",
          "description": "The SHA256 hash of the file contents"
        },
        "shared": {
          "type": "string",
          "description": "Indicates the shared status as reported by the cloud provider at the time the event occurred. A shared file indicates that one or more users have been granted explicit access to the file. It does not capture whether or not a link to the file has been shared.",
          "enum": [
            "TRUE",
            "FALSE"
          ]
        },
        "sharedWith": {
          "type": "array",
          "description": "A list of users who have been granted explicit rights to the file at the time the event occurred",
          "items": {
            "$ref": "#/definitions/SharedWithUser-file-events"
          }
        },
        "sharingTypeAdded": {
          "type": "array",
          "description": "Public sharing types that were added by this event",
          "items": {
            "type": "string"
          }
        },
        "source": {
          "type": "string",
          "description": "Data source for a file event"
        },
        "syncDestination": {
          "type": "string",
          "description": "For events detected within a cloud storage sync destination on a device, describes the cloud storage vendor"
        },
        "syncDestinationUsername": {
          "type": "array",
          "description": "For events detected within a cloud storage sync destination on a device, lists the usernames logged into the cloud storage provider when the file activity was observed.",
          "items": {
            "type": "string"
          }
        },
        "tabUrl": {
          "type": "string",
          "description": "For events generated when a file is read in a browser or other app, the URL that had activity at the time of the event"
        },
        "trusted": {
          "type": "boolean",
          "description": "Indicates whether or not the file activity is trusted based on your Data Preferences settings"
        },
        "url": {
          "type": "string",
          "description": "URL reported by the cloud provider at the time the event occurred"
        },
        "userUid": {
          "type": "string",
          "description": "Unique identifier for the user of the Code42 app on the device. Null if the file event occurred on a cloud provider."
        },
        "windowTitle": {
          "type": "array",
          "description": "For events generated when a file is read in a browser or other app, the tab or window title(s) that had activity at the time of the event",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "FileEvent"
    },
    "FileEventResponse-file-events": {
      "type": "object",
      "properties": {
        "fileEvents": {
          "type": "array",
          "description": "List of file events in the response",
          "items": {
            "$ref": "#/definitions/FileEvent-file-events"
          }
        },
        "nextPgToken": {
          "type": "string",
          "description": "Use as the pgToken value in another request to indicate the starting point for additional page results. nextPgToken is null if there are no more results or if pgToken was not supplied."
        },
        "problems": {
          "type": "array",
          "description": "List of problems in the request.  A problem with a search request could be an invalid filter value, an operator that can't be used on a term, etc.",
          "items": {
            "$ref": "#/definitions/QueryProblem-file-events"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int64",
          "description": "Total number of file events in the response"
        }
      },
      "title": "FileEventResponse"
    },
    "FilterGroup-file-events": {
      "type": "object",
      "required": [
        "filters"
      ],
      "properties": {
        "display": {
          "type": "string",
          "description": "Display information that has no effect on search execution"
        },
        "filterClause": {
          "type": "string",
          "description": "Grouping clause for filters.  Default is 'AND'",
          "enum": [
            "AND",
            "OR"
          ]
        },
        "filters": {
          "type": "array",
          "description": "One or more SearchFilters to be combined in a query",
          "items": {
            "$ref": "#/definitions/SearchFilter-file-events"
          }
        }
      },
      "title": "FilterGroup"
    },
    "Group-file-events": {
      "type": "object",
      "properties": {
        "docCount": {
          "type": "integer",
          "format": "int64",
          "description": "The approximate count of hits matching this value for your query."
        },
        "value": {
          "type": "string",
          "description": "The value of the term for this group."
        }
      },
      "title": "Group"
    },
    "GroupingRequest-file-events": {
      "type": "object",
      "required": [
        "groups"
      ],
      "properties": {
        "groupClause": {
          "type": "string",
          "description": "Grouping clause for any specified groups.  Default is 'AND'",
          "enum": [
            "AND",
            "OR"
          ]
        },
        "groupingTerm": {
          "type": "string",
          "description": "The search term to use to form the groups.",
          "enum": [
            "eventId",
            "eventType",
            "eventTimestamp",
            "insertionTimestamp",
            "filePath",
            "fileName",
            "fileType",
            "fileCategory",
            "fileCategoryByBytes",
            "fileCategoryByExtension",
            "fileSize",
            "fileOwner",
            "md5Checksum",
            "sha256Checksum",
            "createTimestamp",
            "modifyTimestamp",
            "deviceUserName",
            "deviceUid",
            "userUid",
            "osHostName",
            "domainName",
            "publicIpAddress",
            "privateIpAddresses",
            "actor",
            "directoryId",
            "source",
            "url",
            "shared",
            "sharedWith",
            "sharingTypeAdded",
            "cloudDriveId",
            "detectionSourceAlias",
            "fileId",
            "exposure",
            "processOwner",
            "processName",
            "windowTitle",
            "tabUrl",
            "removableMediaVendor",
            "removableMediaName",
            "removableMediaSerialNumber",
            "removableMediaCapacity",
            "removableMediaBusType",
            "removableMediaMediaName",
            "removableMediaVolumeName",
            "removableMediaPartitionId",
            "syncDestination",
            "syncDestinationUsername",
            "emailDlpPolicyNames",
            "emailSubject",
            "emailSender",
            "emailFrom",
            "emailRecipients",
            "outsideActiveHours",
            "mimeTypeByBytes",
            "mimeTypeByExtension",
            "mimeTypeMismatch",
            "printJobName",
            "printerName",
            "printedFilesBackupPath",
            "remoteActivity",
            "trusted",
            "operatingSystemUser",
            "destinationCategory",
            "destinationName"
          ]
        },
        "groups": {
          "type": "array",
          "description": "One or more FilterGroups to be combined in a query",
          "items": {
            "$ref": "#/definitions/FilterGroup-file-events"
          }
        }
      },
      "title": "GroupingRequest"
    },
    "GroupingResponse-file-events": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "description": "The top groups based on the query and group by term.",
          "items": {
            "$ref": "#/definitions/Group-file-events"
          }
        },
        "problems": {
          "type": "array",
          "description": "List of problems in the request.  A problem with a search request could be an invalid filter value, an operator that can't be used on a term, etc.",
          "items": {
            "$ref": "#/definitions/QueryProblem-file-events"
          }
        }
      },
      "title": "GroupingResponse"
    },
    "QueryProblem-file-events": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "badFilter": {
          "description": "The search filter that caused this problem",
          "$ref": "#/definitions/SearchFilter-file-events"
        },
        "description": {
          "type": "string",
          "description": "Additional description of the problem"
        },
        "type": {
          "type": "string",
          "description": "The type of problem that occured",
          "enum": [
            "ILLEGAL_VALUE",
            "ILLEGAL_OPERATOR",
            "MUST_BE_EMAIL_ADDRESS",
            "MAX_LENGTH_EXCEEDED",
            "INVALID_PAGE_SIZE",
            "INVALID_PAGE_NUMBER",
            "INVALID_PAGE_TOKEN",
            "MISSING_VALUE",
            "UNEXPECTED_VALUE",
            "MISSING_GROUPS",
            "MISSING_FILTERS",
            "MAX_FILTERS_EXCEEDED",
            "SEARCH_FAILED",
            "QUERY_TIMEOUT",
            "ILLEGAL_SORT",
            "ILLEGAL_GROUP"
          ]
        }
      },
      "title": "QueryProblem"
    },
    "SearchFilter-file-events": {
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "display": {
          "type": "string",
          "description": "Display information that has no effect on search execution"
        },
        "operator": {
          "type": "string",
          "description": "The type of match to perform.  Default value is 'IS'",
          "enum": [
            "IS",
            "IS_NOT",
            "ON_OR_BEFORE",
            "ON_OR_AFTER",
            "ON",
            "WITHIN_THE_LAST",
            "LESS_THAN",
            "GREATER_THAN",
            "EXISTS",
            "DOES_NOT_EXIST"
          ]
        },
        "term": {
          "type": "string",
          "description": "The field to match.  Default value is 'deviceUserName'",
          "enum": [
            "eventId",
            "eventType",
            "eventTimestamp",
            "insertionTimestamp",
            "filePath",
            "fileName",
            "fileType",
            "fileCategory",
            "fileCategoryByBytes",
            "fileCategoryByExtension",
            "fileSize",
            "fileOwner",
            "md5Checksum",
            "sha256Checksum",
            "createTimestamp",
            "modifyTimestamp",
            "deviceUserName",
            "deviceUid",
            "userUid",
            "osHostName",
            "domainName",
            "publicIpAddress",
            "privateIpAddresses",
            "actor",
            "directoryId",
            "source",
            "url",
            "shared",
            "sharedWith",
            "sharingTypeAdded",
            "cloudDriveId",
            "detectionSourceAlias",
            "fileId",
            "exposure",
            "processOwner",
            "processName",
            "windowTitle",
            "tabUrl",
            "removableMediaVendor",
            "removableMediaName",
            "removableMediaSerialNumber",
            "removableMediaCapacity",
            "removableMediaBusType",
            "removableMediaMediaName",
            "removableMediaVolumeName",
            "removableMediaPartitionId",
            "syncDestination",
            "syncDestinationUsername",
            "emailDlpPolicyNames",
            "emailSubject",
            "emailSender",
            "emailFrom",
            "emailRecipients",
            "outsideActiveHours",
            "mimeTypeByBytes",
            "mimeTypeByExtension",
            "mimeTypeMismatch",
            "printJobName",
            "printerName",
            "printedFilesBackupPath",
            "remoteActivity",
            "trusted",
            "operatingSystemUser",
            "destinationCategory",
            "destinationName"
          ]
        },
        "value": {
          "type": "string",
          "description": "The input for the search"
        }
      },
      "title": "SearchFilter"
    },
    "SearchRequest-file-events": {
      "type": "object",
      "required": [
        "defaultSortKey",
        "groups"
      ],
      "properties": {
        "defaultSortKey": {
          "type": "string",
          "enum": [
            "eventId",
            "eventType",
            "eventTimestamp",
            "insertionTimestamp",
            "filePath",
            "fileName",
            "fileType",
            "fileCategory",
            "fileCategoryByBytes",
            "fileCategoryByExtension",
            "fileSize",
            "fileOwner",
            "md5Checksum",
            "sha256Checksum",
            "createTimestamp",
            "modifyTimestamp",
            "deviceUserName",
            "deviceUid",
            "userUid",
            "osHostName",
            "domainName",
            "publicIpAddress",
            "privateIpAddresses",
            "actor",
            "directoryId",
            "source",
            "url",
            "shared",
            "sharedWith",
            "sharingTypeAdded",
            "cloudDriveId",
            "detectionSourceAlias",
            "fileId",
            "exposure",
            "processOwner",
            "processName",
            "windowTitle",
            "tabUrl",
            "removableMediaVendor",
            "removableMediaName",
            "removableMediaSerialNumber",
            "removableMediaCapacity",
            "removableMediaBusType",
            "removableMediaMediaName",
            "removableMediaVolumeName",
            "removableMediaPartitionId",
            "syncDestination",
            "syncDestinationUsername",
            "emailDlpPolicyNames",
            "emailSubject",
            "emailSender",
            "emailFrom",
            "emailRecipients",
            "outsideActiveHours",
            "mimeTypeByBytes",
            "mimeTypeByExtension",
            "mimeTypeMismatch",
            "printJobName",
            "printerName",
            "printedFilesBackupPath",
            "remoteActivity",
            "trusted",
            "operatingSystemUser",
            "destinationCategory",
            "destinationName"
          ]
        },
        "groupClause": {
          "type": "string",
          "description": "Grouping clause for any specified groups.  Default is 'AND'",
          "enum": [
            "AND",
            "OR"
          ]
        },
        "groups": {
          "type": "array",
          "description": "One or more FilterGroups to be combined in a query",
          "items": {
            "$ref": "#/definitions/FilterGroup-file-events"
          }
        },
        "pgNum": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Page number for search; ignored if pgToken is included.  Default is 1."
        },
        "pgSize": {
          "type": "integer",
          "format": "int32",
          "example": 100,
          "description": "Max number of results to return for a page.  Default is 100"
        },
        "pgToken": {
          "type": "string",
          "description": "A token used to indicate the starting point for additional page results. Typically, you obtain the pgToken value from the nextPgToken provided in a previous request. A pgToken is the only way to page past 10,000 results. If pgToken is supplied, pgNum is ignored. Provide empty string to retrieve the 'first page of results and null to use the pgNum value.  Default is null."
        },
        "srtDir": {
          "type": "string",
          "description": "Sort direction.  Default is 'desc'",
          "enum": [
            "asc",
            "desc"
          ]
        },
        "srtKey": {
          "type": "string",
          "description": "Search term for sorting",
          "enum": [
            "eventId",
            "eventType",
            "eventTimestamp",
            "insertionTimestamp",
            "filePath",
            "fileName",
            "fileType",
            "fileCategory",
            "fileCategoryByBytes",
            "fileCategoryByExtension",
            "fileSize",
            "fileOwner",
            "md5Checksum",
            "sha256Checksum",
            "createTimestamp",
            "modifyTimestamp",
            "deviceUserName",
            "deviceUid",
            "userUid",
            "osHostName",
            "domainName",
            "publicIpAddress",
            "privateIpAddresses",
            "actor",
            "directoryId",
            "source",
            "url",
            "shared",
            "sharedWith",
            "sharingTypeAdded",
            "cloudDriveId",
            "detectionSourceAlias",
            "fileId",
            "exposure",
            "processOwner",
            "processName",
            "windowTitle",
            "tabUrl",
            "removableMediaVendor",
            "removableMediaName",
            "removableMediaSerialNumber",
            "removableMediaCapacity",
            "removableMediaBusType",
            "removableMediaMediaName",
            "removableMediaVolumeName",
            "removableMediaPartitionId",
            "syncDestination",
            "syncDestinationUsername",
            "emailDlpPolicyNames",
            "emailSubject",
            "emailSender",
            "emailFrom",
            "emailRecipients",
            "outsideActiveHours",
            "mimeTypeByBytes",
            "mimeTypeByExtension",
            "mimeTypeMismatch",
            "printJobName",
            "printerName",
            "printedFilesBackupPath",
            "remoteActivity",
            "trusted",
            "operatingSystemUser",
            "destinationCategory",
            "destinationName"
          ]
        }
      },
      "title": "SearchRequest"
    },
    "SharedWithUser-file-events": {
      "type": "object",
      "required": [
        "cloudUsername"
      ],
      "properties": {
        "cloudUsername": {
          "type": "string"
        }
      },
      "title": "SharedWithUser"
    },
    "StreamingResponseBody-file-events": {
      "type": "object",
      "title": "StreamingResponseBody"
    }
  }
}
