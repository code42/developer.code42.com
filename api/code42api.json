{
  "swagger": "2.0",
  "info": {
    "title": "Code42 API Documentation",
    "version": "v1",
    "description": {
      "$ref": "./user_guides.rmd"
    }
  },
  "tags": [
    {
      "name": "Actors",
      "description": {
        "$ref": "./api-descriptions/actors.rmd"
      }
    },
    {
      "name": "Agents",
      "description": {
        "$ref": "./api-descriptions/agents.rmd"
      }
    },
    {
      "name": "Alerts and Sessions",
      "description": {
        "$ref": "./api-descriptions/sessions.rmd"
      }
    },
    {
      "name": "Audit Log",
      "description": {
        "$ref": "./api-descriptions/audit_log.rmd"
      }
    },
    {
      "name": "Authentication",
      "description": {
        "$ref": "./api-descriptions/auth.rmd"
      }
    },
    {
      "name": "Cases",
      "description": {
        "$ref": "./api-descriptions/cases.rmd"
      }
    },
    {
      "name": "Customer",
      "description": {
        "$ref": "./api-descriptions/customer.rmd"
      }
    },
    {
      "name": "Departments",
      "description": {
        "$ref": "./api-descriptions/departments.rmd"
      }
    },
    {
      "name": "Devices",
      "description": {
        "$ref": "./api-descriptions/device.rmd"
      }
    },
    {
      "name": "Directory Groups",
      "description": {
        "$ref": "./api-descriptions/directory-groups.rmd"
      }
    },
    {
      "name": "File Events",
      "description": {
        "$ref": "./api-descriptions/file_events.rmd"
      }
    },
    {
      "name": "Legal Hold",
      "description": {
        "$ref": "./api-descriptions/legal_hold.rmd"
      }
    },
    {
      "name": "Organizations",
      "description": {
        "$ref": "./api-descriptions/orgs.rmd"
      }
    },
    {
      "name": "Rules",
      "description": {
        "$ref": "./api-descriptions/rules.rmd"
      }
    },
    {
      "name": "Trusted Activities",
      "description": {
        "$ref": "./api-descriptions/trusted_activities.rmd"
      }
    },
    {
      "name": "Users",
      "description": {
        "$ref": "./api-descriptions/user.rmd"
      }
    },
    {
      "name": "Risk Profiles",
      "description": {
        "$ref": "./api-descriptions/user_risk_profiles.rmd"
      }
    },
    {
      "name": "Watchlists",
      "description": {
        "$ref": "./api-descriptions/watchlists.rmd"
      }
    }
  ],
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "paths": {
    "/v1/agents": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "Get a list of agents",
        "description": " Requires all of the following permissions: admin.crossorg_computer.read",
        "operationId": "getAgentList",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "When specified, retrieves user's agents associated with this id.",
            "schema": {
              "type": "string"
            },
            "example": "b6bb9fec767bded0"
          },
          {
            "name": "agentType",
            "in": "query",
            "description": "When specified, retrieves agents associated with this agent type.",
            "schema": {
              "type": "string",
              "description": "Type of agent",
              "enum": [
                "CODE42AAT",
                "COMBINED",
                "CODE42"
              ]
            },
            "example": "COMBINED"
          },
          {
            "name": "active",
            "in": "query",
            "description": "When specified, retrieves agents associated with this activity status.",
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "agentHealthy",
            "in": "query",
            "description": "Optionally retrieve agents with this health status. Agents that have no health issue types are considered healthy",
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "anyOfAgentHealthIssueTypes",
            "in": "query",
            "description": "Optionally retrieve agents that have (at least) any of the given issue type(s). Multiple types are separated by a comma. Example health issue types: NOT_CONNECTING, NOT_SENDING_SECURITY_EVENTS",
            "schema": {
              "type": "string"
            },
            "example": "NOT_CONNECTING,NOT_SENDING_SECURITY_EVENTS"
          },
          {
            "name": "srtKey",
            "in": "query",
            "description": "Sort the list of agents by this criteria.",
            "schema": {
              "type": "string",
              "default": "NAME",
              "enum": [
                "NAME",
                "USER_ID",
                "AGENT_TYPE",
                "OS_HOSTNAME",
                "LAST_CONNECTED",
                "OS_NAME"
              ]
            }
          },
          {
            "name": "srtDir",
            "in": "query",
            "description": "Sort the list of agents in this direction.",
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page of values to return.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of values per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 500
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The agent list was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "415": {
            "description": "Response format not supported."
          }
        },
        "security": [
          {
            "RequirePermission": [
              "admin.crossorg_computer.read"
            ]
          }
        ],
        "x-code42-visibility": "published"
      }
    },
    "/v1/agents/activate": {
      "post": {
        "tags": [
          "Agents"
        ],
        "summary": "Activate a set of deactivated agents.",
        "description": " Requires all of the following permissions: admin.crossorg_computer.update",
        "operationId": "activateAgent",
        "requestBody": {
          "description": "List of agentIds to activate.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentActivateRequestBody"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "All activations succeeded."
          },
          "401": {
            "description": "Insufficient permissions to perform the operation."
          },
          "404": {
            "description": "One or more agents not found."
          }
        },
        "security": [
          {
            "RequirePermission": [
              "admin.crossorg_computer.update"
            ]
          }
        ],
        "x-code42-visibility": "published"
      }
    },
    "/v1/agents/deactivate": {
      "post": {
        "tags": [
          "Agents"
        ],
        "summary": "Deactivates a set of activated agents.",
        "description": " Requires all of the following permissions: admin.crossorg_computer.update",
        "operationId": "deactivateAgent",
        "requestBody": {
          "description": "List of agentIds to deactivate.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentDeactivateRequestBody"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "All deactivations succeeded."
          },
          "401": {
            "description": "Insufficient permissions to perform the operation."
          },
          "404": {
            "description": "One or more agents not found."
          }
        },
        "security": [
          {
            "RequirePermission": [
              "admin.crossorg_computer.update"
            ]
          }
        ],
        "x-code42-visibility": "published"
      }
    },
    "/v1/agents/{agentId}": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "Get single agent by its identifier.",
        "description": " Requires all of the following permissions: admin.crossorg_computer.read",
        "operationId": "getSingleAgent",
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "description": "The unique identifier of the agent to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The single agent was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentResponse"
                }
              }
            }
          },
          "404": {
            "description": "Agent was not found."
          }
        },
        "security": [
          {
            "RequirePermission": [
              "admin.crossorg_computer.read"
            ]
          }
        ],
        "x-code42-visibility": "published"
      },
      "put": {
        "tags": [
          "Agents"
        ],
        "summary": "Updates name/externalReference of agent.",
        "description": " Requires all of the following permissions: admin.crossorg_computer.update",
        "operationId": "updateAgent",
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "description": "The unique identifier of the agent to update.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ComputerGuid"
            }
          }
        ],
        "requestBody": {
          "description": "Updated information for the agent.",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/AgentUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Provided fields were updated successfully."
          },
          "400": {
            "description": "One or more of the fields has an invalid value."
          },
          "401": {
            "description": "Insufficient permissions to perform the operation."
          },
          "404": {
            "description": "Agent was not found."
          }
        },
        "security": [
          {
            "RequirePermission": [
              "admin.crossorg_computer.update"
            ]
          }
        ],
        "x-code42-visibility": "published"
      }
    },
    "/v1/auth": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get a User authentication token",
        "description": "Most APIs require a Bearer token to be submitted in order to determine the calling user's identity and permissions. Call this endpoint with your user's basic authentication credentials to retrieve its Bearer token. If your organization uses two-factor authentication for local users, you must also include a totp-auth header value containing the Time-based One-Time Password (TOTP).",
        "operationId": "generateOauthToken2",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "totp-auth",
            "in": "header",
            "description": "Used for passing in the Time based One Time Password (TOTP), for use with Code42's TOTP authentication functionality. This is required for all users with TOTP two factor authentication enabled.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful and the bearer token is included in the response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthTokenResponse"
                }
              }
            }
          },
          "401": {
            "description": "The supplied credentials in authHeader are invalid"
          }
        },
        "x-code42-visibility": "published"
      }
    },
    "/v1/customer": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get customer account information.",
        "description": "Some APIs require a tenant ID to be submitted to retrieve or edit Code42 data. Call this endpoint to retrieve the tenant ID to use for those APIs.",
        "operationId": "getMyCustomer2",
        "responses": {
          "200": {
            "description": "Request was successful. Returns customer account information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccountInformation"
                }
              }
            }
          },
          "401": {
            "description": "Invalid/missing credentials."
          },
          "403": {
            "description": "Authenticated principal is not authorized for this action."
          },
          "404": {
            "description": "A customer was not found"
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "x-code42-visibility": "published"
      }
    },
    "/v1/devices": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Get a list of devices",
        "description": "This API is deprecated, please use /v1/agents instead. Requires all of the following permissions: admin.crossorg_computer.read",
        "operationId": "getDeviceList",
        "parameters": [
          {
            "name": "active",
            "in": "query",
            "description": "When true, return only active devices. When false, return only inactive devices. Defaults to returning both.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "blocked",
            "in": "query",
            "description": "When true, return only blocked devices. When false, return only unblocked devices. Defaults to returning both.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sortKey",
            "in": "query",
            "description": "Key to sort on. Values: name, osHostname, os, lastConnected",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "osHostname",
                "os",
                "lastConnected"
              ]
            }
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "Direction of sort. ASC or DESC (case is irrelevant).",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc",
                "ASC",
                "DESC"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number of the result set to return.",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum number of devices to return in the response.",
            "schema": {
              "maximum": 2000,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of devices was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          }
        },
        "deprecated": true,
        "security": [
          {
            "RequirePermission": [
              "admin.crossorg_computer.read"
            ]
          }
        ],
        "x-code42-visibility": "published"
      }
    },
    "/v1/devices/{deviceId}": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Get a device",
        "description": "This API is deprecated, please use /v1/agents instead. Requires all of the following permissions: admin.crossorg_computer.read",
        "operationId": "getDevice",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The device was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceResponse"
                }
              }
            }
          },
          "404": {
            "description": "deviceId not found"
          }
        },
        "deprecated": true,
        "security": [
          {
            "RequirePermission": [
              "admin.crossorg_computer.read"
            ]
          }
        ],
        "x-code42-visibility": "published"
      }
    },
    "/v1/legal-hold/custodians/{userId}": {
      "get": {
        "tags": [
          "Legal Hold"
        ],
        "summary": "Get a list of matters for a user",
        "description": " Requires all of the following permissions: admin.legalhold.read",
        "operationId": "getCustodians",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user to list matters for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number of the result set to return.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum number of legal hold matters to return in the response.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 500
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of legal hold matters was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCustodianMattersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "415": {
            "description": "Response format not supported."
          }
        },
        "security": [
          {
            "RequirePermission": [
              "admin.legalhold.read"
            ]
          }
        ],
        "x-code42-visibility": "published"
      }
    },
    "/v1/legal-hold/matters": {
      "get": {
        "tags": [
          "Legal Hold"
        ],
        "summary": "Get a list of matters",
        "description": " Requires all of the following permissions: admin.legalhold.read",
        "operationId": "getMatters",
        "parameters": [
          {
            "name": "creatorUserId",
            "in": "query",
            "description": "Find legal hold matters that were created by the user with this unique identifier.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "When true, return only active matters. When false, return inactive legal hold matters. Defaults to returning all matters.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Find legal hold matters whose 'name' either equals or partially contains this value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number of the result set to return.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum number of legal hold matters to return in the response.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 500
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of legal hold matters was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMattersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "415": {
            "description": "Response format not supported."
          }
        },
        "security": [
          {
            "RequirePermission": [
              "admin.legalhold.read"
            ]
          }
        ],
        "x-code42-visibility": "published"
      },
      "post": {
        "tags": [
          "Legal Hold"
        ],
        "summary": "Create a matter",
        "description": " Requires all of the following permissions: admin.legalhold.create",
        "operationId": "createMatter",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/CreateMatterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The legal hold matter was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatterResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "415": {
            "description": "Response format not supported."
          }
        },
        "security": [
          {
            "RequirePermission": [
              "admin.legalhold.create"
            ]
          }
        ],
        "x-code42-visibility": "published"
      }
    },
    "/v1/legal-hold/matters/{matterId}": {
      "get": {
        "tags": [
          "Legal Hold"
        ],
        "summary": "Get a matter",
        "description": " Requires all of the following permissions: admin.legalhold.read",
        "operationId": "getMatter",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "description": "The unique identifier of the legal hold matter to return.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The legal hold matter was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatterResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "The calling user not authorized, or the legal hold matter was not found."
          },
          "415": {
            "description": "Response format not supported."
          }
        },
        "security": [
          {
            "RequirePermission": [
              "admin.legalhold.read"
            ]
          }
        ],
        "x-code42-visibility": "published"
      }
    },
    "/v1/legal-hold/matters/{matterId}/custodians": {
      "get": {
        "tags": [
          "Legal Hold"
        ],
        "summary": "Get a list of matter custodians",
        "description": " Requires all of the following permissions: admin.legalhold.read",
        "operationId": "getCustodians_1",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "description": "The unique identifier of the legal hold matter to list custodians from.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number of the result set to return.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum number of custodians to return in the response.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 500
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of custodians was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCustodiansResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "415": {
            "description": "Response format not supported."
          }
        },
        "security": [
          {
            "RequirePermission": [
              "admin.legalhold.read"
            ]
          }
        ],
        "x-code42-visibility": "published"
      },
      "post": {
        "tags": [
          "Legal Hold"
        ],
        "summary": "Add a user to a matter",
        "description": " Requires all of the following permissions: admin.legalhold.modify_membership",
        "operationId": "addUserToMatter",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "description": "The unique identifier of the legal hold matter to add the user to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/AddUserToMatterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user was successfully added to the legal hold matter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddUserToMatterResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, or the user is already a member of the legal hold matter, or the legal hold matter is inactive, or the user is inactive."
          },
          "415": {
            "description": "Response format not supported."
          }
        },
        "security": [
          {
            "RequirePermission": [
              "admin.legalhold.modify_membership"
            ]
          }
        ],
        "x-code42-visibility": "published"
      }
    },
    "/v1/legal-hold/matters/{matterId}/custodians/remove": {
      "post": {
        "tags": [
          "Legal Hold"
        ],
        "summary": "Remove a user from a matter",
        "description": " Requires all of the following permissions: admin.legalhold.modify_membership",
        "operationId": "deactivateUserMembershipInMatter",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "description": "The unique identifier of the legal hold matter to remove the user from.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/RemoveUserFromMatterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user was successfully removed from the legal hold matter."
          },
          "400": {
            "description": "Bad request, or the legal hold matter is inactive."
          },
          "401": {
            "description": "The calling user not authorized, or the legal hold membership was not found."
          },
          "415": {
            "description": "Response format not supported."
          }
        },
        "security": [
          {
            "RequirePermission": [
              "admin.legalhold.modify_membership"
            ]
          }
        ],
        "x-code42-visibility": "published"
      }
    },
    "/v1/legal-hold/matters/{matterId}/deactivate": {
      "post": {
        "tags": [
          "Legal Hold"
        ],
        "summary": "Deactivate a matter",
        "description": " Requires all of the following permissions: admin.legalhold.update",
        "operationId": "deactivateMatter",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "description": "The unique identifier of the legal hold matter to deactivate.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The legal hold matter was deactivated successfully."
          },
          "400": {
            "description": "Bad request, or the legal hold matter was already inactive."
          },
          "415": {
            "description": "Response format not supported."
          }
        },
        "security": [
          {
            "RequirePermission": [
              "admin.legalhold.update"
            ]
          }
        ],
        "x-code42-visibility": "published"
      }
    },
    "/v1/legal-hold/matters/{matterId}/reactivate": {
      "post": {
        "tags": [
          "Legal Hold"
        ],
        "summary": "Reactivate a matter",
        "description": " Requires all of the following permissions: admin.legalhold.update",
        "operationId": "reactivateMatter",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "description": "The unique identifier of the legal hold matter to reactivate.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The legal hold matter was reactivated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReactivateMembershipResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, or the legal hold matter was already active."
          },
          "415": {
            "description": "Response format not supported."
          }
        },
        "security": [
          {
            "RequirePermission": [
              "admin.legalhold.update"
            ]
          }
        ],
        "x-code42-visibility": "published"
      }
    },
    "/v1/legal-hold/policies": {
      "get": {
        "tags": [
          "Legal Hold"
        ],
        "summary": "Get a list of policies",
        "description": " Requires all of the following permissions: admin.legalhold.read",
        "operationId": "getPolicies",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page number of the result set to return.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum number of legal hold policies to return in the response.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of legal hold policies was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPoliciesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "415": {
            "description": "Response format not supported."
          }
        },
        "security": [
          {
            "RequirePermission": [
              "admin.legalhold.read"
            ]
          }
        ],
        "x-code42-visibility": "published"
      },
      "post": {
        "tags": [
          "Legal Hold"
        ],
        "summary": "Create a policy",
        "description": " Requires all of the following permissions: admin.legalhold.create",
        "operationId": "createPolicy",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/CreatePolicyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The legal hold policy was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "415": {
            "description": "Response format not supported."
          }
        },
        "security": [
          {
            "RequirePermission": [
              "admin.legalhold.create"
            ]
          }
        ],
        "x-code42-visibility": "published"
      }
    },
    "/v1/legal-hold/policies/{policyId}": {
      "get": {
        "tags": [
          "Legal Hold"
        ],
        "summary": "Get a policy",
        "description": " Requires all of the following permissions: admin.legalhold.read",
        "operationId": "getPolicy",
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "description": "The unique identifier of the legal hold policy to return.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The legal hold policy was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "415": {
            "description": "Response format not supported."
          }
        },
        "security": [
          {
            "RequirePermission": [
              "admin.legalhold.read"
            ]
          }
        ],
        "x-code42-visibility": "published"
      }
    },
    "/v1/oauth": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get an API Client authentication token",
        "description": "Most APIs require a Bearer token to be submitted in order to determine the calling user's identity and permissions. Call this endpoint with your API Client ID and Secret to retrieve a Bearer token. This API supports the OAuth client credentials grant type as described in RFC 6749.",
        "operationId": "getAccessToken2",
        "parameters": [
          {
            "name": "grant_type",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "client_credentials"
              ]
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string",
              "example": "Basic a2V5LTExTExaMmpleEFoRDdocS11eExaMmpleEFORDd0cS11eEx4MmpLeEFORDd0cTpFeGFtcGxlRm9yRG9jcyRFeGFtcGxlRm9yRG9jc0BFeGFtcGxlRm9yRG9jcwo="
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ClientCredentialsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Request was successful and the AccessTokenResponse is included in the response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request wasn't in the right format, or an invalid grant type was supplied"
          },
          "401": {
            "description": "The supplied credentials are invalid"
          }
        },
        "x-code42-visibility": "published"
      }
    },
    "/v1/orgs": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Get a list of organizations",
        "description": " Requires any of the following permissions: admin.crossorg_org.read, admin.org.read",
        "operationId": "listOrgs",
        "parameters": [
          {
            "name": "active",
            "in": "query",
            "description": "When true, return only active orgs. When false, return only inactive orgs. Defaults to returning both.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgListContainer"
                }
              }
            }
          }
        },
        "security": [
          {
            "RequireAnyPermission": [
              "admin.crossorg_org.read",
              "admin.org.read"
            ]
          }
        ],
        "x-code42-visibility": "published"
      },
      "post": {
        "tags": [
          "Organizations"
        ],
        "summary": "Create an organization",
        "description": " Requires all of the following permissions: admin.org.create",
        "operationId": "create2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrgRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "RequirePermission": [
              "admin.org.create"
            ]
          }
        ],
        "x-code42-visibility": "published"
      }
    },
    "/v1/orgs/{orgGuid}": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Get a specific organization",
        "description": " Requires any of the following permissions: admin.crossorg_org.read, admin.org.read",
        "operationId": "getOrg",
        "parameters": [
          {
            "name": "orgGuid",
            "in": "path",
            "description": "The unique ID of the org to return.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "RequireAnyPermission": [
              "admin.crossorg_org.read",
              "admin.org.read"
            ]
          }
        ],
        "x-code42-visibility": "published"
      },
      "put": {
        "tags": [
          "Organizations"
        ],
        "summary": "Update an organization.",
        "description": " Requires any of the following permissions: admin.crossorg_org.update_deactivate, admin.org.update_deactivate",
        "operationId": "update2",
        "parameters": [
          {
            "name": "orgGuid",
            "in": "path",
            "description": "orgGuid of the org",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrgRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "RequireAnyPermission": [
              "admin.crossorg_org.update_deactivate",
              "admin.org.update_deactivate"
            ]
          }
        ],
        "x-code42-visibility": "published"
      }
    },
    "/v1/orgs/{orgGuid}/activate": {
      "post": {
        "tags": [
          "Organizations"
        ],
        "summary": "Activate a specific organization",
        "description": " Requires all of the following permissions: admin.org.update_deactivate",
        "operationId": "activate2",
        "parameters": [
          {
            "name": "orgGuid",
            "in": "path",
            "description": "The unique ID of the org to activate.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "RequirePermission": [
              "admin.org.update_deactivate"
            ]
          }
        ],
        "x-code42-visibility": "published"
      }
    },
    "/v1/orgs/{orgGuid}/deactivate": {
      "post": {
        "tags": [
          "Organizations"
        ],
        "summary": "Deactivate a specific organization",
        "description": " Requires all of the following permissions: admin.org.update_deactivate",
        "operationId": "deactivate2",
        "parameters": [
          {
            "name": "orgGuid",
            "in": "path",
            "description": "The unique ID of the org to deactivate.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "RequirePermission": [
              "admin.org.update_deactivate"
            ]
          }
        ],
        "x-code42-visibility": "published"
      }
    },
    "/v1/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a list of users",
        "description": " Requires all of the following permissions: admin.user.read",
        "operationId": "getUsers",
        "parameters": [
          {
            "name": "active",
            "in": "query",
            "description": "When true, return only active users. When false, return only inactive users. Defaults to returning both.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "blocked",
            "in": "query",
            "description": "When true, return only blocked users. When false, return only unblocked users. Defaults to returning both.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "The username of a user to search for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number of the result set to return.",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum number of users to return in the response.",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 500
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The users were retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "415": {
            "description": "Response format not supported."
          }
        },
        "security": [
          {
            "RequirePermission": [
              "admin.user.read"
            ]
          }
        ],
        "x-code42-visibility": "published"
      }
    },
    "/v1/users/roles": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a list of available roles",
        "operationId": "getRolesForSession",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page number of the result set to return.",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum number of roles to return in the response.",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of roles was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "415": {
            "description": "Response format not supported."
          }
        },
        "x-code42-visibility": "published"
      }
    },
    "/v1/users/roles/{roleId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get details for a single role",
        "operationId": "getRole",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "The unique identifier of the role to return.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The role was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Role not found."
          },
          "415": {
            "description": "Response format not supported."
          }
        },
        "x-code42-visibility": "published"
      }
    },
    "/v1/users/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a user",
        "description": " Requires all of the following permissions: admin.user.read",
        "operationId": "getUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user to return.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "The user was not found."
          },
          "415": {
            "description": "Response format not supported."
          }
        },
        "security": [
          {
            "RequirePermission": [
              "admin.user.read"
            ]
          }
        ],
        "x-code42-visibility": "published"
      }
    },
    "/v1/users/{userId}/activate": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Activate a user",
        "description": "Activates and unblocks the user. Requires all of the following permissions: admin.user.update",
        "operationId": "activateUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user to activate.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user was activated successfully."
          },
          "400": {
            "description": "Bad request."
          },
          "415": {
            "description": "Response format not supported."
          }
        },
        "security": [
          {
            "RequirePermission": [
              "admin.user.update"
            ]
          }
        ],
        "x-code42-visibility": "published"
      }
    },
    "/v1/users/{userId}/deactivate": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Deactivate a user",
        "description": "Deactivates and blocks the user. Requires all of the following permissions: admin.user.update",
        "operationId": "deactivateUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user to deactivate.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user was deactivated successfully."
          },
          "400": {
            "description": "Bad request, the user is on legal hold, or are trying to self-deactivate."
          },
          "415": {
            "description": "Response format not supported."
          },
          "500": {
            "description": "Unspecified problem processing the request, or duplicate users were detected."
          }
        },
        "security": [
          {
            "RequirePermission": [
              "admin.user.update"
            ]
          }
        ],
        "x-code42-visibility": "published"
      }
    },
    "/v1/users/{userId}/devices": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a list of devices for a particular user",
        "description": "This API is deprecated, please use /v1/agents instead. Requires all of the following permissions: admin.computer.read",
        "operationId": "getDevicesForUser",
        "parameters": [
          {
            "name": "active",
            "in": "query",
            "description": "When true, return only active devices. When false, return only inactive devices. Defaults to returning both.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "blocked",
            "in": "query",
            "description": "When true, return only blocked devices. When false, return only unblocked devices. Defaults to returning both.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sortKey",
            "in": "query",
            "description": "Key to sort on. Values: name, osHostname, os, lastConnected",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "Direction of sort. ASC or DESC (case is irrelevant).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number of the result set to return.",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum number of devices to return in the response.",
            "schema": {
              "maximum": 2000,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 500
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user to return devices for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The devices were retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "415": {
            "description": "Response format not supported."
          }
        },
        "deprecated": true,
        "security": [
          {
            "RequirePermission": [
              "admin.computer.read"
            ]
          }
        ],
        "x-code42-visibility": "published"
      }
    },
    "/v1/users/{userId}/move": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Move a user to a specified organization.",
        "description": " Requires all of the following permissions: admin.user.read, admin.user.update",
        "operationId": "moveUser2",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user to move.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/UserMoveOrgRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user was moved successfully."
          },
          "400": {
            "description": "Bad request, or the org does not exist."
          },
          "415": {
            "description": "Response format not supported."
          },
          "500": {
            "description": "Unspecified problem processing the request, or the user has data keys in secret store."
          }
        },
        "security": [
          {
            "RequirePermission": [
              "admin.user.read",
              "admin.user.update"
            ]
          }
        ],
        "x-code42-visibility": "published"
      }
    },
    "/v1/users/{userId}/roles": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get the roles associated with a user",
        "description": " Requires all of the following permissions: admin.user.read",
        "operationId": "getRolesForUser",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page number of the result set to return.",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum number of roles to return in the response.",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user to return roles for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The roles were retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRoleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "415": {
            "description": "Response format not supported."
          }
        },
        "security": [
          {
            "RequirePermission": [
              "admin.user.read"
            ]
          }
        ],
        "x-code42-visibility": "published"
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update the roles associated with a user",
        "description": " Requires all of the following permissions: admin.user.update",
        "operationId": "updateUserRoles",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user to update roles for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/UserRoleUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The roles were updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRoleUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "415": {
            "description": "Response format not supported."
          }
        },
        "security": [
          {
            "RequirePermission": [
              "admin.user.update"
            ]
          }
        ],
        "x-code42-visibility": "published"
      }
    },
    "/v1/watchlists": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The desired page of watchlist results to retrieve.",
            "format": "int64",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "The desired number of results per page.",
            "format": "int64",
            "in": "query",
            "name": "page_size",
            "type": "integer"
          },
          {
            "description": "The desired userId filter for membership",
            "in": "query",
            "name": "user_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WatchlistDeprecatedSdk.Model.ListWatchlistsResponse"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "deprecated": true,
        "summary": "V1 - Get a list of watchlists"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "",
            "in": "body",
            "name": "body",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/WatchlistDeprecatedSdk.Model.CreateWatchlistRequest"
                }
              ],
              "description": "CreateWatchlistRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WatchlistSdk.Model.Watchlist"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "deprecated": true,
        "summary": "V1 - Create a new watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}": {
      "delete": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "tags": [
          "Watchlists"
        ],
        "deprecated": true,
        "summary": "V1 - Delete a watchlist"
      },
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WatchlistSdk.Model.Watchlist"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "deprecated": true,
        "summary": "V1 - Get a watchlist"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The ID of the watchlist to update.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "The mask of the fields to update.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "paths",
            "type": "array"
          },
          {
            "description": "",
            "in": "body",
            "name": "body",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/WatchlistDeprecatedSdk.Model.UpdatedWatchlist"
                }
              ],
              "description": "UpdatedWatchlist"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WatchlistSdk.Model.Watchlist"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "deprecated": true,
        "summary": "V1 - Update a watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}/excluded-users": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The desired page of excluded users to retrieve.",
            "format": "int64",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "The desired number of results per page.",
            "format": "int64",
            "in": "query",
            "name": "page_size",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WatchlistDeprecatedSdk.Model.ListExcludedUsersResponse"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "deprecated": true,
        "summary": "V1 - Get the list of users explicitly excluded on a watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}/excluded-users/add": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "body",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/WatchlistDeprecatedSdk.Model.AddExcludedUsersRequest"
                }
              ],
              "description": "AddExcludedUsersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "tags": [
          "Watchlists"
        ],
        "deprecated": true,
        "summary": "V1 - Explicitly exclude users from a watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}/excluded-users/delete": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "body",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/WatchlistDeprecatedSdk.Model.DeleteExcludedUsersRequest"
                }
              ],
              "description": "DeleteExcludedUsersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "tags": [
          "Watchlists"
        ],
        "deprecated": true,
        "summary": "V1 - Remove users that are explicitly excluded from a watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}/excluded-users/{user_id}": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "A user identifier.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WatchlistDeprecatedSdk.Model.ExcludedUser"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "deprecated": true,
        "summary": "V1 - Get an excluded user of a watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}/included-departments": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The desired page of included departments to retrieve.",
            "format": "int64",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "The desired number of results per page.",
            "format": "int64",
            "in": "query",
            "name": "page_size",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WatchlistDeprecatedSdk.Model.ListIncludedDepartmentsResponse"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "deprecated": true,
        "summary": "V1 - Get the list of departments included on a watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}/included-departments/add": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The request",
            "in": "body",
            "name": "body",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/WatchlistDeprecatedSdk.Model.AddIncludedDepartmentsRequest"
                }
              ],
              "description": "AddIncludedDepartmentsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "tags": [
          "Watchlists"
        ],
        "deprecated": true,
        "summary": "V1 - Add departments to a watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}/included-departments/delete": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The request",
            "in": "body",
            "name": "body",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/WatchlistDeprecatedSdk.Model.DeleteIncludedDepartmentsRequest"
                }
              ],
              "description": "DeleteIncludedDepartmentsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "tags": [
          "Watchlists"
        ],
        "deprecated": true,
        "summary": "V1 - Remove departments included on a watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}/included-departments/{department}": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "A department.",
            "in": "path",
            "name": "department",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WatchlistDeprecatedSdk.Model.IncludedDepartment"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "deprecated": true,
        "summary": "V1 - Get an included department of a watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}/included-directory-groups": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The desired page of included directory groups to retrieve.",
            "format": "int64",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "The desired number of results per page.",
            "format": "int64",
            "in": "query",
            "name": "page_size",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WatchlistDeprecatedSdk.Model.ListIncludedDirectoryGroupsResponse"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "deprecated": true,
        "summary": "V1 - Get the list of directory groups included on a watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}/included-directory-groups/add": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The request",
            "in": "body",
            "name": "body",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/WatchlistDeprecatedSdk.Model.AddIncludedDirectoryGroupsRequest"
                }
              ],
              "description": "AddIncludedDirectoryGroupsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "tags": [
          "Watchlists"
        ],
        "deprecated": true,
        "summary": "V1 - Add directory groups to a watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}/included-directory-groups/delete": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The request",
            "in": "body",
            "name": "body",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/WatchlistDeprecatedSdk.Model.DeleteIncludedDirectoryGroupsRequest"
                }
              ],
              "description": "DeleteIncludedDirectoryGroupsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "tags": [
          "Watchlists"
        ],
        "deprecated": true,
        "summary": "V1 - Remove directory groups included on a watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}/included-directory-groups/{group_id}": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "A directory group id.",
            "in": "path",
            "name": "group_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WatchlistDeprecatedSdk.Model.IncludedDepartment"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "deprecated": true,
        "summary": "V1 - Get an included directory group of a watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}/included-users": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The desired page of included users to retrieve.",
            "format": "int64",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "The desired number of results per page.",
            "format": "int64",
            "in": "query",
            "name": "page_size",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WatchlistDeprecatedSdk.Model.ListIncludedUsersResponse"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "deprecated": true,
        "summary": "V1 - Get the list of users explicitly included on a watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}/included-users/add": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "body",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/WatchlistDeprecatedSdk.Model.AddIncludedUsersRequest"
                }
              ],
              "description": "AddIncludedUsersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "tags": [
          "Watchlists"
        ],
        "deprecated": true,
        "summary": "V1 - Explicitly include users on a watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}/included-users/delete": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "body",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/WatchlistDeprecatedSdk.Model.DeleteIncludedUsersRequest"
                }
              ],
              "description": "DeleteIncludedUsersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "tags": [
          "Watchlists"
        ],
        "deprecated": true,
        "summary": "V1 - Remove users that are explicitly included on a watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}/included-users/{user_id}": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "A user identifier.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WatchlistDeprecatedSdk.Model.IncludedUser"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "deprecated": true,
        "summary": "V1 - Get an included user of a watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}/members": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The desired page of members to retrieve.",
            "format": "int64",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "The desired number of results per page.",
            "format": "int64",
            "in": "query",
            "name": "page_size",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WatchlistDeprecatedSdk.Model.ListWatchlistMembersResponse"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "deprecated": true,
        "summary": "V1 - Get a list of all members of a watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}/members/{user_id}": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "A unique user ID.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WatchlistDeprecatedSdk.Model.WatchlistMember"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "deprecated": true,
        "summary": "V1 - Get a member of a watchlist"
      }
    },
    "/v2/watchlists": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The desired page of watchlist results to retrieve.",
            "format": "int64",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "The desired number of results per page.",
            "format": "int64",
            "in": "query",
            "name": "page_size",
            "type": "integer"
          },
          {
            "description": "The desired actorId filter for membership",
            "in": "query",
            "name": "actor_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WatchlistSdk.Model.ListWatchlistsResponse"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "summary": "V2 - Get a list of watchlists"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "",
            "in": "body",
            "name": "body",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/WatchlistSdk.Model.CreateWatchlistRequest"
                }
              ],
              "description": "CreateWatchlistRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WatchlistSdk.Model.Watchlist"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "summary": "V2 - Create a new watchlist"
      }
    },
    "/v2/watchlists/{watchlist_id}": {
      "delete": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "tags": [
          "Watchlists"
        ],
        "summary": "V2 - Delete a watchlist"
      },
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WatchlistSdk.Model.Watchlist"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "summary": "V2 - Get a watchlist"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The ID of the watchlist to update.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "The mask of the fields to update.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "paths",
            "type": "array"
          },
          {
            "description": "",
            "in": "body",
            "name": "body",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/WatchlistSdk.Model.UpdatedWatchlist"
                }
              ],
              "description": "UpdatedWatchlist"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WatchlistSdk.Model.Watchlist"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "summary": "V2 - Update a watchlist"
      }
    },
    "/v2/watchlists/{watchlist_id}/excluded-actors": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The desired page of excluded actors to retrieve.",
            "format": "int64",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "The desired number of results per page.",
            "format": "int64",
            "in": "query",
            "name": "page_size",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WatchlistSdk.Model.ListExcludedActorsResponse"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "summary": "V2 - Get the list of actors explicitly excluded on a watchlist"
      }
    },
    "/v2/watchlists/{watchlist_id}/excluded-actors/add": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "body",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/WatchlistSdk.Model.AddExcludedActorsRequest"
                }
              ],
              "description": "AddExcludedActorsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "tags": [
          "Watchlists"
        ],
        "summary": "V2 - Explicitly exclude actors from a watchlist"
      }
    },
    "/v2/watchlists/{watchlist_id}/excluded-actors/delete": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "body",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/WatchlistSdk.Model.DeleteExcludedActorsRequest"
                }
              ],
              "description": "DeleteExcludedActorsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "tags": [
          "Watchlists"
        ],
        "summary": "V2 - Remove actors that are explicitly excluded from a watchlist"
      }
    },
    "/v2/watchlists/{watchlist_id}/excluded-actors/{actor_id}": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "An actor identifier.",
            "in": "path",
            "name": "actor_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WatchlistSdk.Model.ExcludedActor"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "summary": "V2 - Get an excluded actor of a watchlist"
      }
    },
    "/v2/watchlists/{watchlist_id}/included-actors": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The desired page of included actors to retrieve.",
            "format": "int64",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "The desired number of results per page.",
            "format": "int64",
            "in": "query",
            "name": "page_size",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WatchlistSdk.Model.ListIncludedActorsResponse"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "summary": "V2 - Get the list of actors explicitly included on a watchlist"
      }
    },
    "/v2/watchlists/{watchlist_id}/included-actors/add": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "body",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/WatchlistSdk.Model.AddIncludedActorsRequest"
                }
              ],
              "description": "AddIncludedActorsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "tags": [
          "Watchlists"
        ],
        "summary": "V2 - Explicitly include actors on a watchlist"
      }
    },
    "/v2/watchlists/{watchlist_id}/included-actors/delete": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "body",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/WatchlistSdk.Model.DeleteIncludedActorsRequest"
                }
              ],
              "description": "DeleteIncludedActorsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "tags": [
          "Watchlists"
        ],
        "summary": "V2 - Remove actors that are explicitly included on a watchlist"
      }
    },
    "/v2/watchlists/{watchlist_id}/included-actors/{actor_id}": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "An actor identifier.",
            "in": "path",
            "name": "actor_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WatchlistSdk.Model.IncludedActor"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "summary": "V2 - Get an included actor of a watchlist"
      }
    },
    "/v2/watchlists/{watchlist_id}/included-departments": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The desired page of included departments to retrieve.",
            "format": "int64",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "The desired number of results per page.",
            "format": "int64",
            "in": "query",
            "name": "page_size",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WatchlistSdk.Model.ListIncludedDepartmentsResponse"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "summary": "V2 - Get the list of departments included on a watchlist"
      }
    },
    "/v2/watchlists/{watchlist_id}/included-departments/add": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The request",
            "in": "body",
            "name": "body",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/WatchlistSdk.Model.AddIncludedDepartmentsRequest"
                }
              ],
              "description": "AddIncludedDepartmentsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "tags": [
          "Watchlists"
        ],
        "summary": "V2 - Add departments to a watchlist"
      }
    },
    "/v2/watchlists/{watchlist_id}/included-departments/delete": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The request",
            "in": "body",
            "name": "body",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/WatchlistSdk.Model.DeleteIncludedDepartmentsRequest"
                }
              ],
              "description": "DeleteIncludedDepartmentsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "tags": [
          "Watchlists"
        ],
        "summary": "V2 - Remove departments included on a watchlist"
      }
    },
    "/v2/watchlists/{watchlist_id}/included-departments/{department}": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "A department.",
            "in": "path",
            "name": "department",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WatchlistSdk.Model.IncludedDepartment"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "summary": "V2 - Get an included department of a watchlist"
      }
    },
    "/v2/watchlists/{watchlist_id}/included-directory-groups": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The desired page of included directory groups to retrieve.",
            "format": "int64",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "The desired number of results per page.",
            "format": "int64",
            "in": "query",
            "name": "page_size",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WatchlistSdk.Model.ListIncludedDirectoryGroupsResponse"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "summary": "V2 - Get the list of directory groups included on a watchlist"
      }
    },
    "/v2/watchlists/{watchlist_id}/included-directory-groups/add": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The request",
            "in": "body",
            "name": "body",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/WatchlistSdk.Model.AddIncludedDirectoryGroupsRequest"
                }
              ],
              "description": "AddIncludedDirectoryGroupsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "tags": [
          "Watchlists"
        ],
        "summary": "V2 - Add directory groups to a watchlist"
      }
    },
    "/v2/watchlists/{watchlist_id}/included-directory-groups/delete": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The request",
            "in": "body",
            "name": "body",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/WatchlistSdk.Model.DeleteIncludedDirectoryGroupsRequest"
                }
              ],
              "description": "DeleteIncludedDirectoryGroupsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "tags": [
          "Watchlists"
        ],
        "summary": "V2 - Remove directory groups included on a watchlist"
      }
    },
    "/v2/watchlists/{watchlist_id}/included-directory-groups/{group_id}": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "A directory group id.",
            "in": "path",
            "name": "group_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WatchlistSdk.Model.IncludedDepartment"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "summary": "V2 - Get an included directory group of a watchlist"
      }
    },
    "/v2/watchlists/{watchlist_id}/members": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The desired page of members to retrieve.",
            "format": "int64",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "The desired number of results per page.",
            "format": "int64",
            "in": "query",
            "name": "page_size",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WatchlistSdk.Model.ListWatchlistMembersResponse"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "summary": "V2 - Get a list of all members of a watchlist"
      }
    },
    "/v2/watchlists/{watchlist_id}/members/{actor_id}": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "A unique actor ID.",
            "in": "path",
            "name": "actor_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WatchlistSdk.Model.WatchlistMember"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "summary": "V2 - Get a member of a watchlist"
      }
    },
    "/v2/file-events": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchRequestSearchTermV2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success: List of file events matching the query.",
            "schema": {
              "$ref": "#/definitions/FileEventResponseV2"
            }
          },
          "400": {
            "description": "Bad Request: An invalid query was provided.",
            "schema": {
              "$ref": "#/definitions/FileEventResponseV2"
            }
          },
          "500": {
            "description": "Server Error: Search execution failed.",
            "schema": {
              "$ref": "#/definitions/FileEventResponseV2"
            }
          }
        },
        "tags": [
          "File Events"
        ],
        "operationId": "searchEvents",
        "summary": "v2 - Search for file events"
      }
    },
    "/v2/file-events/export": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExportRequestSearchTermV2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success: CSV of file events matching the query."
          },
          "400": {
            "description": "Bad Request: An invalid query was provided.",
            "schema": {
              "$ref": "#/definitions/StreamingResponseBody"
            }
          }
        },
        "tags": [
          "File Events"
        ],
        "operationId": "export",
        "summary": "v2 - Export search results as a CSV file"
      }
    },
    "/v2/file-events/grouping": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupingRequestSearchTermV2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success: List of groups matching the query.",
            "schema": {
              "$ref": "#/definitions/GroupingResponseSearchTermV2"
            }
          },
          "400": {
            "description": "Bad Request: An invalid query was provided.",
            "schema": {
              "$ref": "#/definitions/GroupingResponseSearchTermV2"
            }
          },
          "500": {
            "description": "Server Error: Search execution failed.",
            "schema": {
              "$ref": "#/definitions/GroupingResponseSearchTermV2"
            }
          }
        },
        "tags": [
          "File Events"
        ],
        "description": "Search file events, providing a group parameter to bucket results into unique values and approximate counts for each value.",
        "operationId": "grouping",
        "summary": "v2 - Group results by search term"
      }
    },
    "/v2/file-events/saved-searches": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success: List of all saved searches for the tenant.",
            "schema": {
              "$ref": "#/definitions/SavedSearchResponseSearchTermV2"
            }
          }
        },
        "tags": [
          "File Events"
        ],
        "operationId": "getSavedSearches",
        "summary": "v2 - Get all saved searches"
      }
    },
    "/v2/file-events/saved-searches/{id}": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Unique identifier for a saved search.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Details of the specified saved search.",
            "schema": {
              "$ref": "#/definitions/SavedSearchResponseSearchTermV2"
            }
          },
          "404": {
            "description": "Not found: Saved search does not exist.",
            "schema": {
              "$ref": "#/definitions/SavedSearchResponseSearchTermV2"
            }
          }
        },
        "tags": [
          "File Events"
        ],
        "operationId": "getSavedSearchById",
        "summary": "v2 - Get a single saved search"
      }
    },
    "/v1/file-events": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchRequestSearchTermV1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success: List of file events matching the query.",
            "schema": {
              "$ref": "#/definitions/FileEventResponseV1"
            }
          },
          "400": {
            "description": "Bad Request: An invalid query was provided.",
            "schema": {
              "$ref": "#/definitions/FileEventResponseV1"
            }
          },
          "500": {
            "description": "Server Error: Search execution failed.",
            "schema": {
              "$ref": "#/definitions/FileEventResponseV1"
            }
          }
        },
        "tags": [
          "File Events"
        ],
        "operationId": "searchEvents_1",
        "summary": "v1 - Search for file events",
        "deprecated": true
      }
    },
    "/v1/file-events/export": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExportRequestSearchTermV1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success: CSV of file events matching the query."
          },
          "400": {
            "description": "Bad Request: An invalid query was provided.",
            "schema": {
              "$ref": "#/definitions/StreamingResponseBody"
            }
          }
        },
        "tags": [
          "File Events"
        ],
        "operationId": "export_1",
        "summary": "v1 - Export search results as a CSV file",
        "deprecated": true
      }
    },
    "/v1/file-events/grouping": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupingRequestSearchTermV1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success: List of groups matching the query.",
            "schema": {
              "$ref": "#/definitions/GroupingResponseSearchTermV1"
            }
          },
          "400": {
            "description": "Bad Request: An invalid query was provided.",
            "schema": {
              "$ref": "#/definitions/GroupingResponseSearchTermV1"
            }
          },
          "500": {
            "description": "Server Error: Search execution failed.",
            "schema": {
              "$ref": "#/definitions/GroupingResponseSearchTermV1"
            }
          }
        },
        "tags": [
          "File Events"
        ],
        "description": "Search file events, providing a group parameter to bucket results into unique values and approximate counts for each value.",
        "operationId": "grouping_1",
        "summary": "v1 - Group results by search term",
        "deprecated": true
      }
    },
    "/v1/file-events/saved-searches": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success: List of all saved searches for the tenant.",
            "schema": {
              "$ref": "#/definitions/SavedSearchResponseSearchTermV1"
            }
          }
        },
        "tags": [
          "File Events"
        ],
        "operationId": "getSavedSearches_1",
        "summary": "v1 - Get all saved searches",
        "deprecated": true
      }
    },
    "/v1/file-events/saved-searches/{id}": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Unique identifier for a saved search.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Details of the specified saved search.",
            "schema": {
              "$ref": "#/definitions/SavedSearchResponseSearchTermV1"
            }
          },
          "404": {
            "description": "Not found: Saved search does not exist.",
            "schema": {
              "$ref": "#/definitions/SavedSearchResponseSearchTermV1"
            }
          }
        },
        "tags": [
          "File Events"
        ],
        "operationId": "getSavedSearchById_1",
        "summary": "v1 - Get a single saved search",
        "deprecated": true
      }
    },
    "/v2/trusted-activities": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The type of trusted activity to retrieve. More than one type can be supplied as part of the request parameters. If no types are provided, resources for ALL types are returned.",
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "default": "1",
            "description": "The page of results that should be returned.",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "string"
          },
          {
            "default": "100",
            "description": "Max number of results to return on each page.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "type": "string"
          },
          {
            "description": "The value on which the returned resources will be sorted. Secondary sorting occurs via the sortKey `UPDATE_TIME` for like values.",
            "enum": [
              "ACTIVITY_ID",
              "DESCRIPTION",
              "TYPE",
              "UPDATED_BY_PRINCIPAL_NAME",
              "UPDATE_TIME",
              "VALUE"
            ],
            "in": "query",
            "name": "sort_key",
            "required": false,
            "type": "string"
          },
          {
            "description": "The direction on which to sort the response.",
            "enum": [
              "ASC",
              "DESC"
            ],
            "in": "query",
            "name": "sort_direction",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TrustedActivitiesListResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unknown Error Occured",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "Trusted Activities"
        ],
        "operationId": "listTrustedActivities",
        "summary": "v2 - Get a list of trusted activities"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TrustedActivityRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TrustedActivityResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unknown Error Occured",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "Trusted Activities"
        ],
        "operationId": "createTrustResource",
        "summary": "v2 - Create a new trusted activity"
      }
    },
    "/v2/trusted-activities/{activity_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The id of the trusted activity.",
            "format": "int32",
            "in": "path",
            "name": "activity_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TrustedActivityResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unknown Error Occured",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "Trusted Activities"
        ],
        "operationId": "deleteTrustResource",
        "summary": "v2 - Delete a trusted activity"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The id of the trusted activity.",
            "format": "int32",
            "in": "path",
            "name": "activity_id",
            "required": true,
            "type": "integer",
            "x-example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TrustedActivityResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unknown Error Occured",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "Trusted Activities"
        ],
        "operationId": "getTrustedActivity",
        "summary": "v2 - Get a single trusted activity"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The id of the trusted activity.",
            "format": "int32",
            "in": "path",
            "name": "activity_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TrustedActivityRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TrustedActivityResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Unknown Error Occured",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "Trusted Activities"
        ],
        "operationId": "updateTrustResource",
        "summary": "v2 - Update an existing trusted activity"
      }
    },
    "/v1/audit/export": {
      "post": {
        "tags": [
          "Audit Log"
        ],
        "summary": "Export search results to a file",
        "description": "Perform an export of the data, getting back a download token that can be redeemed to get the actual file.",
        "operationId": "export",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RpcExportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/audit/redeem-download-token": {
      "get": {
        "tags": [
          "Audit Log"
        ],
        "summary": "Download an exported search result",
        "description": "Executes a search based on a download token from the export api.",
        "operationId": "redeemDownloadToken",
        "parameters": [
          {
            "name": "downloadToken",
            "in": "query",
            "description": "Download token to execute an export, acquired from the export api.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/RpcSearchResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/audit/search-audit-log": {
      "post": {
        "tags": [
          "Audit Log"
        ],
        "summary": "Search for audit events",
        "description": "General purpose audit-log search. All parameters are optional. A search with no arguments returns all events to which the searching user has access.\n\nA search with multiple values for a single parameter applies \"or\" logic for that parameter. e.g. Searching for \"actor_name=[alice@example.com, bob@example.com]\" finds events for which either alice or bob was the actor.\n\nA search with multiple parameters applies \"and\" logic between parameters. e.g. Searching for \"event_type=user_registered,actor_name=alice@example.com\" finds user_registered events for which alice@example.com was the actor.",
        "operationId": "searchAuditLog",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchAuditLogBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RpcSearchResponse"
                }
              },
              "text/csv": {}
            }
          }
        }
      }
    },
    "/v1/audit/search-results-count": {
      "post": {
        "tags": [
          "Audit Log"
        ],
        "summary": "Get the number of events matching a search",
        "description": "Returns the count of events found in a search with identical parameters and at the same time. Parameters follow an identical behavior for this results count query, as they would the audit-log search query.",
        "operationId": "searchResultsCount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchAuditLogBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RpcSearchResultsCountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/audit/search-results-export": {
      "post": {
        "tags": [
          "Audit Log"
        ],
        "summary": "Search for audit events, specifically for large result sets",
        "description": "Audit-log search, parameters follow an identical behavior for this results count query, as they would the general purpose audit-log search query.",
        "operationId": "exportStreaming",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RpcSearchResponse"
                }
              },
              "text/csv": {}
            }
          }
        }
      }
    },
    "/v1/actors/actor/id/{actorId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "actorId of the actor to be retrieved",
            "in": "path",
            "name": "actorId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Actor found and retrieved",
            "schema": {
              "$ref": "#/definitions/ActorResponse"
            }
          },
          "404": {
            "description": "Actor not found"
          }
        },
        "tags": [
          "Actors"
        ],
        "operationId": "getByActorId",
        "summary": "Get actor by actorId"
      }
    },
    "/v1/actors/actor/id/{actorId}/family": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "ActorId of any actor in the family to be retrieved",
            "in": "path",
            "name": "actorId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Actor family found and retrieved",
            "schema": {
              "$ref": "#/definitions/ActorFamilyResponse"
            }
          },
          "404": {
            "description": "Actor or family not found"
          },
          "500": {
            "description": "There was a problem locating the actor family"
          }
        },
        "tags": [
          "Actors"
        ],
        "description": "Obtain the entire family of actors that has at least one member with the provided actorId.",
        "operationId": "getFamilyByActorIdOfMember",
        "summary": "Get family from any member's actorId"
      }
    },
    "/v1/actors/actor/id/{actorId}/parent": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "actorId of the actor to begin with",
            "in": "path",
            "name": "actorId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Actor (or parent) found and retrieved",
            "schema": {
              "$ref": "#/definitions/ActorResponse"
            }
          },
          "404": {
            "description": "Actor not found"
          }
        },
        "tags": [
          "Actors"
        ],
        "description": "Retrieve information about an actor's parent (or the actor themselves if they have no parent) by their actorId.",
        "operationId": "getParentByActorId",
        "summary": "Get actor by actorId, preferring their parent"
      }
    },
    "/v1/actors/actor/name/{name}/family": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Name (e.g. full username/email) of any actor in the family to be retrieved",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Actor family found and retrieved",
            "schema": {
              "$ref": "#/definitions/ActorFamilyResponse"
            }
          },
          "404": {
            "description": "Actor or family not found"
          },
          "409": {
            "description": "Multiple actors found lacking adoption, but adjustments were made and calling this API again may produce different results"
          },
          "500": {
            "description": "There was a problem locating the actor family"
          }
        },
        "tags": [
          "Actors"
        ],
        "description": "Obtain the entire family of actors that has at least one member with the provided name.",
        "operationId": "getFamilyByNameOfMember",
        "summary": "Get family from any member's name"
      }
    },
    "/v1/actors/actor/name/{name}/parent": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Name (e.g. full username/email) of the actor to search for.",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Actor (or parent) found and retrieved",
            "schema": {
              "$ref": "#/definitions/ActorResponse"
            }
          },
          "404": {
            "description": "Actor not found"
          },
          "409": {
            "description": "Multiple actors found lacking adoption, but adjustments were made and calling this API again may produce different results"
          },
          "500": {
            "description": "There was a problem locating the actor"
          }
        },
        "tags": [
          "Actors"
        ],
        "description": "Retrieve information about an actor's parent (or the actor themselves if they have no parent) by their name.",
        "operationId": "getActorOrParentByName",
        "summary": "Get actor by name, preferring their parent"
      }
    },
    "/v1/actors/actor/search": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Find actors whose name (e.g. username/email) starts with this text, ignoring case.",
            "in": "query",
            "name": "nameStartsWith",
            "required": false,
            "type": "string"
          },
          {
            "description": "Find actors whose name (e.g. username/email) ends with this text, ignoring case.",
            "in": "query",
            "name": "nameEndsWith",
            "required": false,
            "type": "string"
          },
          {
            "description": "Find actors with the given active state.",
            "in": "query",
            "name": "active",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 100,
            "description": "The maximum number of results to return. Must be between 1 and 500.",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1,
            "description": "The page number of the result set to return. Page numbers start at 1.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the matching actors",
            "schema": {
              "$ref": "#/definitions/ActorsSearchResponse"
            }
          },
          "400": {
            "description": "A bad request error stating the failure reason",
            "schema": {
              "$ref": "#/definitions/ActorSearchProblemResponse"
            }
          }
        },
        "tags": [
          "Actors"
        ],
        "operationId": "actorSearch",
        "summary": "Get actors by criteria"
      }
    },
    "/v1/actors/actor/search/parent": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Find actors whose name (e.g. username/email) starts with this text, ignoring case.",
            "in": "query",
            "name": "nameStartsWith",
            "required": false,
            "type": "string"
          },
          {
            "description": "Find actors whose name (e.g. username/email) ends with this text, ignoring case.",
            "in": "query",
            "name": "nameEndsWith",
            "required": false,
            "type": "string"
          },
          {
            "description": "Find actors with the given active state.",
            "in": "query",
            "name": "active",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 100,
            "description": "The maximum number of results to return. Must be between 1 and 500.",
            "format": "int32",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1,
            "description": "The page number of the result set to return. Page numbers start at 1.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the matching actors",
            "schema": {
              "$ref": "#/definitions/ActorsSearchResponse"
            }
          },
          "400": {
            "description": "A bad request error stating the failure reason",
            "schema": {
              "$ref": "#/definitions/ActorSearchProblemResponse"
            }
          }
        },
        "tags": [
          "Actors"
        ],
        "description": "Find parent actors (or the actor themselves if they have no parent) by the provided criteria.",
        "operationId": "actorSearchFollowingAdoption",
        "summary": "Get actors by criteria, preferring their parent"
      }
    },
    "/v1/actors/adoption": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "User-Agent",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdoptionCreationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Actor adoption created",
            "schema": {
              "$ref": "#/definitions/AdoptionResponse"
            }
          },
          "400": {
            "description": "A bad request error stating the failure reason",
            "schema": {
              "$ref": "#/definitions/AdoptionError"
            }
          },
          "403": {
            "description": "Actor adoption not authorized"
          },
          "404": {
            "description": "Actor not found",
            "schema": {
              "$ref": "#/definitions/ActorNotFoundError"
            }
          }
        },
        "tags": [
          "Actors"
        ],
        "description": "Creates adoption between an actor and a requested parent by the actor's actorId and the parent's actorId. Activity originating from actors who have a parent will have said activity attributed to their parent.",
        "operationId": "addParent",
        "summary": "Make one actor adopt another"
      }
    },
    "/v1/departments": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The desired page of department results to retrieve.",
            "format": "int64",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "The desired number of results per page.",
            "format": "int64",
            "in": "query",
            "name": "page_size",
            "type": "integer"
          },
          {
            "description": "Matches departments whose name is like the given value.",
            "in": "query",
            "name": "name",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WatchlistSdk.Model.ListDepartmentsResponse"
            }
          }
        },
        "tags": [
          "Departments"
        ],
        "summary": "Get a list of departments"
      }
    },
    "/v1/alert-rules/update-is-enabled": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "v1 - Enable or disable a list of rules.",
        "operationId": "Rules_UpdateIsEnabled",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "The update is enabled command.",
            "schema": {
              "$ref": "#/definitions/UpdateIsEnabledCommand"
            },
            "x-nullable": false
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Header used to authenticate the user",
            "schema": {
              "type": "string"
            },
            "default": "Bearer <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Given rules are set to the indicated enabled state."
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        },
        "deprecated": true
      }
    },
    "/v1/alert-rules/add-users": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "v1 - Add users to a rule's watch list.",
        "description": "Note that the added users could become either included included or excluded from the rule, depending on the rule's configuration.\nThis command requires a userIdFromAuthority to be associated with the user aliases for successful removal. Some users, such as ones added from the Code42 console or CLI do not have this id associated and cannot be removed with this API command.",
        "operationId": "Rules_AddUsersToRule",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "The command to add users to the rule watch list.",
            "schema": {
              "$ref": "#/definitions/AddUsersToRuleCommand"
            },
            "x-nullable": false
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Header used to authenticate the user",
            "schema": {
              "type": "string"
            },
            "default": "Bearer <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Given users are added to the rule."
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        },
        "deprecated": true
      }
    },
    "/v1/alert-rules/remove-users": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "v1 - Remove users from a rule's watch list.",
        "description": "Note that the removed users could become either included or excluded from the rule, depending on the rule's configuration.\nThis command requires a userIdFromAuthority to be associated with the user aliases for successful removal. Some users, such as ones added from the Code42 console or CLI do not have this id associated and cannot be removed with this API command.",
        "operationId": "Rules_RemoveUsersFromRule",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "The command to remove users from the rule watch list.",
            "schema": {
              "$ref": "#/definitions/RemoveUsersFromRuleCommand"
            },
            "x-nullable": false
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Header used to authenticate the user",
            "schema": {
              "type": "string"
            },
            "default": "Bearer <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Given users are removed from the rule."
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        },
        "deprecated": true
      }
    },
    "/v1/alert-rules/remove-user-aliases": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "v1 - Remove user aliases from a rule's watch list.",
        "description": "Note that the removed user aliases could become either included or excluded from the rule, depending on the rule's configuration.\nThis command requires a userIdFromAuthority to be associated with the user aliases for successful removal. Some users, such as ones added from the Code42 console or CLI do not have this id associated and cannot be removed with this API command.",
        "operationId": "Rules_RemoveUserAliasesFromRule",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "The command to remove users from the rule watch list.",
            "schema": {
              "$ref": "#/definitions/RemoveUserAliasesFromRuleCommand"
            },
            "x-nullable": false
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Header used to authenticate the user",
            "schema": {
              "type": "string"
            },
            "default": "Bearer <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Given user aliases are removed from the rule."
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        },
        "deprecated": true
      }
    },
    "/v1/alert-rules/remove-all-users": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "v1 - Remove all users from a rule's watch list.",
        "description": "Note that the removed users could become either included or excluded from the rule, depending on the rule's configuration.\nThis command requires a userIdFromAuthority to be associated with the user aliases for successful removal. Some users, such as ones added from the Code42 console or CLI do not have this id associated and cannot be removed with this API command.",
        "operationId": "Rules_RemoveAllUsersFromRule",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "The command to remove all users from the rule watch list.",
            "schema": {
              "$ref": "#/definitions/RemoveAllUsersFromRuleCommand"
            },
            "x-nullable": false
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Header used to authenticate the user",
            "schema": {
              "type": "string"
            },
            "default": "Bearer <token>"
          }
        ],
        "responses": {
          "200": {
            "description": "Success: All users are removed from the rule."
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        },
        "deprecated": true
      }
    },
    "/v1/alert-rules/query-users": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "v1 - Get users assigned to a given rule.",
        "operationId": "Rules_QueryUsersOnRule",
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "required": true,
            "description": "The query to run.",
            "schema": {
              "$ref": "#/definitions/GetUsersInRuleQuery"
            },
            "x-nullable": false
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Header used to authenticate the user",
            "schema": {
              "type": "string"
            },
            "default": "Bearer <token>"
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success: Response containing a list of users included in the rule.",
            "schema": {
              "$ref": "#/definitions/UsersInRuleResponse"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        },
        "deprecated": true
      }
    },
    "/v1/alert-rules/query-cloud-share-permissions-rule": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "v1 - Get details about a set of Cloud Share Permissions rules.",
        "operationId": "Rules_QueryCloudSharePermissionsRule",
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "required": true,
            "description": "The query to run.",
            "schema": {
              "$ref": "#/definitions/GetCloudSharePermissionsRuleDetailsQuery"
            },
            "x-nullable": false
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Header used to authenticate the user",
            "schema": {
              "type": "string"
            },
            "default": "Bearer <token>"
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success: Response containing rule details for given rule id.",
            "schema": {
              "$ref": "#/definitions/CloudSharePermissionsRuleDetailsResponse"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        },
        "deprecated": true
      }
    },
    "/v1/alert-rules/query-endpoint-exfiltration-rule": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "v1 - Get details about a set of Endpoint Exfiltration rules.",
        "operationId": "Rules_QueryEndpointExfiltrationRule",
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "required": true,
            "description": "The query to run.",
            "schema": {
              "$ref": "#/definitions/GetEndpointExfiltrationRuleDetailsQuery"
            },
            "x-nullable": false
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Header used to authenticate the user",
            "schema": {
              "type": "string"
            },
            "default": "Bearer <token>"
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success: Response containing rule details for given rule id.",
            "schema": {
              "$ref": "#/definitions/EndpointExfiltrationRuleDetailsResponse"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        },
        "deprecated": true
      }
    },
    "/v1/alert-rules/query-file-type-mismatch-rule": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "v1 - Get details about a set of File Type Mismatch rules.",
        "operationId": "Rules_QueryFileTypeMismatchRule",
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "required": true,
            "description": "The query to run.",
            "schema": {
              "$ref": "#/definitions/GetFileTypeMismatchRuleDetailsQuery"
            },
            "x-nullable": false
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Header used to authenticate the user",
            "schema": {
              "type": "string"
            },
            "default": "Bearer <token>"
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success: Response containing rule details for given rule id.",
            "schema": {
              "$ref": "#/definitions/FileTypeMismatchRuleDetailsResponse"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        },
        "deprecated": true
      }
    },
    "/v1/alert-rules/query-file-name-rule": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "v1 - Get details about a set of File Name rules.",
        "operationId": "Rules_QueryFileNameRule",
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "required": true,
            "description": "The query to run.",
            "schema": {
              "$ref": "#/definitions/GetFileNameRuleDetailsQuery"
            },
            "x-nullable": false
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Header used to authenticate the user",
            "schema": {
              "type": "string"
            },
            "default": "Bearer <token>"
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success: Response containing rule details for given rule id.",
            "schema": {
              "$ref": "#/definitions/FileNameRuleDetailsResponse"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        },
        "deprecated": true
      }
    },
    "/v1/cases": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "collectionFormat": "multi",
            "default": "",
            "description": "One or more case statuses on which to filter.",
            "in": "query",
            "items": {
              "enum": [
                "OPEN",
                "CLOSED",
                "ARCHIVED"
              ],
              "type": "string"
            },
            "name": "status",
            "required": false,
            "type": "array"
          },
          {
            "description": "User UID of an assignee of a case on which to filter.",
            "in": "query",
            "name": "assignee",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter cases with an assignee (true) or without (false)",
            "in": "query",
            "name": "isAssigned",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Name of a case on which to filter; will include partial matches",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "User UID of a subject of a case on which to filter.",
            "in": "query",
            "name": "subject",
            "required": false,
            "type": "string"
          },
          {
            "description": "User UID of the user who most recently modified the case.",
            "in": "query",
            "name": "lastModifiedBy",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter cases created between the supplied start and end times. Must use ISO time interval, for example: 2020-08-31T11:00:00Z/2020-09-01T15:30:00Z",
            "in": "query",
            "name": "createdAt",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter cases last updated between the supplied start and end times. Must use ISO time interval, for example: 2020-08-31T11:00:00Z/2020-09-01T15:30:00Z",
            "in": "query",
            "name": "updatedAt",
            "required": false,
            "type": "string"
          },
          {
            "default": 2147483647,
            "description": "Max number of results to return for a page.",
            "format": "int32",
            "in": "query",
            "name": "pgSize",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number for results, starting at 1.",
            "format": "int32",
            "in": "query",
            "name": "pgNum",
            "required": false,
            "type": "integer"
          },
          {
            "collectionFormat": "multi",
            "default": "number",
            "description": "One or more values on which the response will be sorted.",
            "in": "query",
            "items": {
              "enum": [
                "name",
                "number",
                "createdAt",
                "updatedAt",
                "status",
                "assigneeUsername",
                "subjectUsername",
                "archivalTime"
              ],
              "type": "string"
            },
            "name": "srtKey",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "default": "asc",
            "description": "The direction on which to sort the response, based on the corresponding key.",
            "in": "query",
            "items": {
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            },
            "name": "srtDir",
            "required": false,
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Response containing cases matching provided filters.",
            "schema": {
              "$ref": "#/definitions/MultiCaseResponse"
            }
          },
          "400": {
            "description": "Bad Request: An invalid value was provided for a filter.",
            "schema": {
              "$ref": "#/definitions/CaseProblemResponse"
            }
          }
        },
        "tags": [
          "Cases"
        ],
        "operationId": "getCases",
        "summary": "Get all cases for a tenant"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCaseRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Response containing created case.",
            "schema": {
              "$ref": "#/definitions/SingleCaseResponse"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided.",
            "schema": {
              "$ref": "#/definitions/CaseProblemResponse"
            }
          },
          "403": {
            "description": "Forbidden: Forbidden by user validation.",
            "schema": {
              "$ref": "#/definitions/CaseProblemResponse"
            }
          }
        },
        "tags": [
          "Cases"
        ],
        "operationId": "createCase",
        "summary": "Create a case"
      }
    },
    "/v1/cases/{caseNumber}": {
      "delete": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Unique numeric identifier for the case.",
            "format": "int64",
            "in": "path",
            "name": "caseNumber",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Success: Case deleted.",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "Not Found: Case does not exist.",
            "schema": {
              "type": "object"
            }
          }
        },
        "tags": [
          "Cases"
        ],
        "operationId": "deleteCase",
        "summary": "Delete a case"
      },
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Unique numeric identifier for the case.",
            "format": "int64",
            "in": "path",
            "name": "caseNumber",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Response containing the matching case.",
            "schema": {
              "$ref": "#/definitions/SingleCaseResponse"
            }
          },
          "404": {
            "description": "Not Found: Case does not exist.",
            "schema": {
              "type": "object"
            }
          }
        },
        "tags": [
          "Cases"
        ],
        "operationId": "getCase",
        "summary": "Get a single case for a tenant"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Unique numeric identifier for the case.",
            "format": "int64",
            "in": "path",
            "name": "caseNumber",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCaseRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Response containing updated case.",
            "schema": {
              "$ref": "#/definitions/SingleCaseResponse"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided.",
            "schema": {
              "$ref": "#/definitions/CaseProblemResponse"
            }
          },
          "403": {
            "description": "Forbidden: Forbidden by user validation.",
            "schema": {
              "$ref": "#/definitions/CaseProblemResponse"
            }
          },
          "404": {
            "description": "Not Found: Case does not exist.",
            "schema": {
              "type": "object"
            }
          }
        },
        "tags": [
          "Cases"
        ],
        "operationId": "updateCase",
        "summary": "Update a case"
      }
    },
    "/v1/cases/{caseNumber}/export": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Unique numeric identifier for the case.",
            "format": "int64",
            "in": "path",
            "name": "caseNumber",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Specifies the locale for the PDF export. Defaults to English if no value is supplied.",
            "in": "query",
            "name": "language",
            "required": false,
            "type": "string",
            "x-example": "de"
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Streaming response containing PDF file.",
            "schema": {
              "$ref": "#/definitions/StreamingResponseBody"
            }
          },
          "404": {
            "description": "Not Found: Case does not exist.",
            "schema": {
              "$ref": "#/definitions/StreamingResponseBody"
            }
          }
        },
        "tags": [
          "Cases"
        ],
        "operationId": "pdfExport",
        "summary": "Download case summary as a PDF file"
      }
    },
    "/v1/cases/{caseNumber}/export/full": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Unique numeric identifier for the case.",
            "format": "int64",
            "in": "path",
            "name": "caseNumber",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Specifies the locale for the summary PDF export. Defaults to English if no value is supplied.",
            "in": "query",
            "name": "language",
            "required": false,
            "type": "string",
            "x-example": "de"
          },
          {
            "default": true,
            "description": "Specifies inclusion of the summary PDF in the zip. Defaults to true if no value is supplied.",
            "in": "query",
            "name": "summary",
            "required": false,
            "type": "boolean",
            "x-example": true
          },
          {
            "default": true,
            "description": "Specifies inclusion of the file events CSV in the zip. Defaults to true if no value is supplied.",
            "in": "query",
            "name": "fileEvents",
            "required": false,
            "type": "boolean",
            "x-example": true
          },
          {
            "default": true,
            "description": "Specifies inclusion of the files in the zip. Defaults to true if no value is supplied.",
            "in": "query",
            "name": "files",
            "required": false,
            "type": "boolean",
            "x-example": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Streaming response.",
            "schema": {
              "$ref": "#/definitions/StreamingResponseBody"
            }
          },
          "400": {
            "description": "Bad Request: Must include at least one export type.",
            "schema": {
              "$ref": "#/definitions/StreamingResponseBody"
            }
          },
          "404": {
            "description": "Not Found: Case does not exist.",
            "schema": {
              "$ref": "#/definitions/StreamingResponseBody"
            }
          }
        },
        "tags": [
          "Cases"
        ],
        "operationId": "caseExport",
        "summary": "Export some or all components of a case"
      }
    },
    "/v1/cases/{caseNumber}/fileevent": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Unique numeric identifier for the case.",
            "format": "int64",
            "in": "path",
            "name": "caseNumber",
            "required": true,
            "type": "integer"
          },
          {
            "default": 10000,
            "description": "Max number of results to return for a page.",
            "format": "int32",
            "in": "query",
            "name": "pgSize",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1,
            "description": "Page number for results, starting at 1.",
            "format": "int32",
            "in": "query",
            "name": "pgNum",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Archive ID on which to filter",
            "in": "query",
            "name": "archiveId",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Response containing abbreviated view of events associated with the case.",
            "schema": {
              "$ref": "#/definitions/MultipleEventsResponse"
            }
          },
          "404": {
            "description": "Not Found: Case does not exist.",
            "schema": {
              "type": "object"
            }
          }
        },
        "tags": [
          "Cases"
        ],
        "operationId": "getEventsByCase",
        "summary": "Get all events associated with a case (abbreviated view)"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Unique numeric identifier for the case.",
            "format": "int64",
            "in": "path",
            "name": "caseNumber",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MultiEventRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success: Events added to the case.",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request: Too many events in request, case or events do not exist, case is closed, or the maximum events per case has been reached.",
            "schema": {
              "$ref": "#/definitions/EventProblemResponse"
            }
          },
          "403": {
            "description": "Forbidden: Forbidden by events.",
            "schema": {
              "$ref": "#/definitions/EventProblemResponse"
            }
          }
        },
        "tags": [
          "Cases"
        ],
        "operationId": "addEventsToCase",
        "summary": "Add multiple events to a case"
      }
    },
    "/v1/cases/{caseNumber}/fileevent/export": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Unique numeric identifier for the case.",
            "format": "int64",
            "in": "path",
            "name": "caseNumber",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Streaming response containing CSV file.",
            "schema": {
              "$ref": "#/definitions/StreamingResponseBody"
            }
          },
          "404": {
            "description": "Not Found: Case does not exist.",
            "schema": {
              "$ref": "#/definitions/StreamingResponseBody"
            }
          }
        },
        "tags": [
          "Cases"
        ],
        "operationId": "csvExport",
        "summary": "Export file events for a case as a CSV file"
      }
    },
    "/v1/cases/{caseNumber}/fileevent/{eventId}": {
      "delete": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Unique numeric identifier for the case.",
            "format": "int64",
            "in": "path",
            "name": "caseNumber",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The unique identifier for the event.",
            "in": "path",
            "name": "eventId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success: Event deleted from the case.",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request: Case has been closed.",
            "schema": {
              "$ref": "#/definitions/EventProblemResponse"
            }
          },
          "404": {
            "description": "Not Found: Case or event do not exist.",
            "schema": {
              "type": "object"
            }
          }
        },
        "tags": [
          "Cases"
        ],
        "operationId": "deleteEvent",
        "summary": "Delete an event from a case"
      },
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Unique numeric identifier for the case.",
            "format": "int64",
            "in": "path",
            "name": "caseNumber",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The unique identifier for the event.",
            "in": "path",
            "name": "eventId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Response containing the full JSON for the event.",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "Not Found: Case or event do not exist.",
            "schema": {
              "type": "object"
            }
          }
        },
        "tags": [
          "Cases"
        ],
        "operationId": "getEvent",
        "summary": "Get the full JSON for a single event"
      },
      "post": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Unique numeric identifier for the case.",
            "format": "int64",
            "in": "path",
            "name": "caseNumber",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The unique identifier for the event.",
            "in": "path",
            "name": "eventId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success: Event added to the case.",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request: Case or event do not exist, the case already has the event, case is closed, or the maximum events per case has been reached.",
            "schema": {
              "$ref": "#/definitions/EventProblemResponse"
            }
          },
          "403": {
            "description": "Forbidden: Forbidden by events.",
            "schema": {
              "$ref": "#/definitions/EventProblemResponse"
            }
          }
        },
        "tags": [
          "Cases"
        ],
        "operationId": "addEventToCase",
        "summary": "Add an event to a case"
      }
    },
    "/v1/cases/{caseNumber}/fileevent/{eventId}/file": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Unique numeric identifier for the case.",
            "format": "int64",
            "in": "path",
            "name": "caseNumber",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "eventId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Streaming response containing file data.",
            "schema": {
              "$ref": "#/definitions/StreamingResponseBody"
            }
          },
          "404": {
            "description": "Not Found: Event not on case, or has no file.",
            "schema": {
              "$ref": "#/definitions/StreamingResponseBody"
            }
          }
        },
        "tags": [
          "Cases"
        ],
        "operationId": "download",
        "summary": "Download the file associated with an event, if present"
      }
    },
    "/v1/directory-groups": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The desired page of directory group results to retrieve.",
            "format": "int64",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "The desired number of results per page.",
            "format": "int64",
            "in": "query",
            "name": "page_size",
            "type": "integer"
          },
          {
            "description": "Matches directory groups whose name is like the given value.",
            "in": "query",
            "name": "name",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WatchlistSdk.Model.ListDirectoryGroupsResponse"
            }
          }
        },
        "tags": [
          "Directory Groups"
        ],
        "summary": "Get a list of directory groups"
      }
    },
    "/v1/user-risk-profiles": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The desired page of user risk profile results to retrieve.",
            "format": "int64",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "The desired number of results per page.",
            "format": "int64",
            "in": "query",
            "name": "page_size",
            "type": "integer"
          },
          {
            "description": "Matches users whose manager has the given Code42 user ID.",
            "in": "query",
            "name": "manager_id",
            "type": "string"
          },
          {
            "description": "Matches users with the given job title.",
            "in": "query",
            "name": "title",
            "type": "string"
          },
          {
            "description": "Matches users in the given division.",
            "in": "query",
            "name": "division",
            "type": "string"
          },
          {
            "description": "Matches users in the given department.",
            "in": "query",
            "name": "department",
            "type": "string"
          },
          {
            "description": "Matches users with the given employment type.",
            "in": "query",
            "name": "employment_type",
            "type": "string"
          },
          {
            "description": "Matches users in the given country.",
            "in": "query",
            "name": "country",
            "type": "string"
          },
          {
            "description": "Matches users the given region (state).",
            "in": "query",
            "name": "region",
            "type": "string"
          },
          {
            "description": "Matches users in the given locality (city).",
            "in": "query",
            "name": "locality",
            "type": "string"
          },
          {
            "description": "Matches users by whether the user is active.",
            "in": "query",
            "name": "active",
            "type": "string"
          },
          {
            "description": "Matches users by whether the user is deleted.",
            "in": "query",
            "name": "deleted",
            "type": "string"
          },
          {
            "description": "Matches users by whether the user is a support user.",
            "in": "query",
            "name": "support_user",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WatchlistDeprecatedSdk.Model.ListUserRiskProfilesResponse"
            }
          }
        },
        "tags": [
          "Risk Profiles"
        ],
        "deprecated": true,
        "summary": "V1 - Get a list of user risk profiles"
      }
    },
    "/v1/user-risk-profiles/{user_id}": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique user ID.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WatchlistDeprecatedSdk.Model.UserRiskProfile"
            }
          }
        },
        "tags": [
          "Risk Profiles"
        ],
        "deprecated": true,
        "summary": "V1 - Get a user risk profile"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The ID of the user to update.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "The mask of the fields to update.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "paths",
            "type": "array"
          },
          {
            "description": "",
            "in": "body",
            "name": "body",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/WatchlistDeprecatedSdk.Model.UpdatedUserRiskProfile"
                }
              ],
              "description": "UpdatedUserRiskProfile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WatchlistDeprecatedSdk.Model.UserRiskProfile"
            }
          }
        },
        "tags": [
          "Risk Profiles"
        ],
        "deprecated": true,
        "summary": "V1 - Update a user risk profile"
      }
    },
    "/v2/actor-risk-profiles": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The desired page of actor risk profile results to retrieve.",
            "format": "int64",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "The desired number of results per page.",
            "format": "int64",
            "in": "query",
            "name": "page_size",
            "type": "integer"
          },
          {
            "description": "Matches actors whose manager has the given Code42 actor ID.",
            "in": "query",
            "name": "manager_id",
            "type": "string"
          },
          {
            "description": "Matches actors with the given job title.",
            "in": "query",
            "name": "title",
            "type": "string"
          },
          {
            "description": "Matches actors in the given division.",
            "in": "query",
            "name": "division",
            "type": "string"
          },
          {
            "description": "Matches actors in the given department.",
            "in": "query",
            "name": "department",
            "type": "string"
          },
          {
            "description": "Matches actors with the given employment type.",
            "in": "query",
            "name": "employment_type",
            "type": "string"
          },
          {
            "description": "Matches actors in the given country.",
            "in": "query",
            "name": "country",
            "type": "string"
          },
          {
            "description": "Matches actors the given region (state).",
            "in": "query",
            "name": "region",
            "type": "string"
          },
          {
            "description": "Matches actors in the given locality (city).",
            "in": "query",
            "name": "locality",
            "type": "string"
          },
          {
            "description": "Matches actors by whether the actor is active.",
            "in": "query",
            "name": "active",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WatchlistSdk.Model.ListActorRiskProfilesResponse"
            }
          }
        },
        "tags": [
          "Risk Profiles"
        ],
        "summary": "V2 - Get a list of actor risk profiles"
      }
    },
    "/v2/actor-risk-profiles/{actor_id}": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "A unique actor ID.",
            "in": "path",
            "name": "actor_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WatchlistSdk.Model.ActorRiskProfile"
            }
          }
        },
        "tags": [
          "Risk Profiles"
        ],
        "summary": "V2 - Get an actor risk profile"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The ID of the actor to update.",
            "in": "path",
            "name": "actor_id",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "The mask of the fields to update.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "paths",
            "type": "array"
          },
          {
            "description": "",
            "in": "body",
            "name": "body",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/WatchlistSdk.Model.UpdatedActorRiskProfile"
                }
              ],
              "description": "UpdatedActorRiskProfile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WatchlistSdk.Model.ActorRiskProfile"
            }
          }
        },
        "tags": [
          "Risk Profiles"
        ],
        "summary": "V2 - Update an actor risk profile",
        "description": {
          "$ref": "./api-descriptions/user_risk_profile_patch.rmd"
        }
      }
    },
    "/v1/sessions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The id of the actor to limit the search to.",
            "in": "query",
            "name": "actor_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Only include sessions beginning on or after this instant.",
            "format": "int64",
            "in": "query",
            "name": "on_or_after",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Only include sessions beginning before this instant.",
            "format": "int64",
            "in": "query",
            "name": "before",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Only include sessions that have a matching alert status. Defaults to 'true'.",
            "in": "query",
            "name": "has_alerts",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Which way to order the results.  If not provided, results are ordered by end time.",
            "enum": [
              "end_time",
              "score"
            ],
            "in": "query",
            "name": "order_by",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "List of risk indicators that must be present on the sessions before they are returned.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "risk_indicators",
            "required": false,
            "type": "array"
          },
          {
            "description": "Which way to order the results.  Either 'ASC' or 'DESC'.  If not provided, results are sorted descending",
            "enum": [
              "ASC",
              "DESC"
            ],
            "in": "query",
            "name": "sort_direction",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Only include sessions that have a matching state.",
            "in": "query",
            "items": {
              "$ref": "#/definitions/SessionState"
            },
            "name": "state",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "description": "Only include sessions that have a matching severity value.  0 indicates no risk, 1 = low, 2 = moderate, 3 = high, 4 = critical",
            "in": "query",
            "items": {
              "format": "int32",
              "maximum": 4,
              "minimum": 0,
              "type": "integer"
            },
            "name": "severity",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "description": "Optional list of rule ids to filter upon.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "rule_id",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "description": "Optional list of watchlist ids to filter upon.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "watchlist_id",
            "required": false,
            "type": "array"
          },
          {
            "default": 0,
            "description": "The page number to return, starting with 0.  If not provided, 0 is assumed.",
            "format": "int32",
            "in": "query",
            "minimum": 0,
            "name": "page_number",
            "required": false,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "The number of results to return in a page. Max of '50'.",
            "format": "int32",
            "in": "query",
            "maximum": 1000,
            "minimum": 0,
            "name": "page_size",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The content inspection status to limit the search to.",
            "enum": [
              "PENDING",
              "PII_NOT_FOUND",
              "PII_FOUND",
              "UNPROCESSED"
            ],
            "in": "query",
            "name": "content_inspection_status",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Session detail",
            "schema": {
              "$ref": "#/definitions/SessionContainer"
            }
          },
          "400": {
            "description": "If any of the search parameters are malformed or otherwise invalid",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "Alerts and Sessions"
        ],
        "operationId": "SearchSessions",
        "summary": "Search for sessions (includes  alerts)."
      }
    },
    "/v1/sessions/change-state": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeStateByIdsRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The state was changed successfully."
          },
          "400": {
            "description": "The requested new state was malformed or was an otherwise invalid state transition.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The specified session could not be found."
          }
        },
        "tags": [
          "Alerts and Sessions"
        ],
        "operationId": "ChangeSessionStateByIds",
        "summary": "Change the state of multiple sessions by ID  (includes  alerts)."
      }
    },
    "/v1/sessions/change-states": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The id of the actor to limit the search to.",
            "in": "query",
            "name": "actor_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Only include sessions beginning on or after this instant.",
            "format": "int64",
            "in": "query",
            "name": "on_or_after",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Only include sessions beginning before this instant.",
            "format": "int64",
            "in": "query",
            "name": "before",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Only include sessions that have a matching alert status.",
            "in": "query",
            "name": "has_alerts",
            "required": false,
            "type": "boolean"
          },
          {
            "collectionFormat": "multi",
            "description": "List of risk indicators that must be present on the sessions before they are returned.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "risk_indicators",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "description": "Only include sessions that have a matching state.",
            "in": "query",
            "items": {
              "$ref": "#/definitions/SessionState"
            },
            "name": "state",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "description": "Only include sessions that have a matching severity value.  0 indicates no risk, 1 = low, 2 = moderate, 3 = high, 4 = critical",
            "in": "query",
            "items": {
              "format": "int32",
              "maximum": 4,
              "minimum": 0,
              "type": "integer"
            },
            "name": "severity",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "description": "Optional list of rule ids to filter upon.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "rule_id",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "description": "Optional list of watchlist ids to filter upon.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "watchlist_id",
            "required": false,
            "type": "array"
          },
          {
            "description": "The content inspection status to limit the search to.",
            "enum": [
              "PENDING",
              "PII_NOT_FOUND",
              "PII_FOUND",
              "UNPROCESSED"
            ],
            "in": "query",
            "name": "content_inspection_status",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeStatesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Session detail",
            "schema": {
              "properties": {
                "continuationToken": {
                  "description": "Null if all sessions matching the criteria have been updated, otherwise a token to use on subsequent calls.",
                  "nullable": true,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "If any of the search parameters are malformed or otherwise invalid",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "Alerts and Sessions"
        ],
        "operationId": "ChangeSessionStates",
        "summary": "Change the state of multiple sessions by  other search criteria (includes alerts)."
      }
    },
    "/v1/sessions/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The session id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Session detail",
            "schema": {
              "$ref": "#/definitions/SessionDetail"
            }
          },
          "404": {
            "description": "If the requested session could not be found."
          }
        },
        "tags": [
          "Alerts and Sessions"
        ],
        "operationId": "GetSessionDetail",
        "summary": "Get the details of a session (includes  alerts)."
      }
    },
    "/v1/sessions/{id}/add-note": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The id of the session to add a note to.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddNoteRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The note was added successfully."
          },
          "400": {
            "description": "The note was too long, or there were too many notes already added to this session.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The specified session could not be found."
          }
        },
        "tags": [
          "Alerts and Sessions"
        ],
        "operationId": "AddNote",
        "summary": "Add a note to the session (includes  alerts)."
      }
    },
    "/v1/sessions/{id}/change-state": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The session id to change state on.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeStateRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The state was changed successfully."
          },
          "400": {
            "description": "The requested new state was malformed or was an otherwise invalid state transition.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The specified session could not be found."
          }
        },
        "tags": [
          "Alerts and Sessions"
        ],
        "operationId": "ChangeSessionState",
        "summary": "Change the state of a single session by ID (includes alerts)."
      }
    },
    "/v1/sessions/{id}/events": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The session id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "File events that are part of the session.",
            "schema": {
              "properties": {
                "queryResult": {
                  "description": "Details on the events belonging to the session. Returns the same response object as the [file events API search](https://developer.code42.com/api/#tag/File-Events/operation/searchEvents).",
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "If the requested session could not be found or if there are no alerts associated with that session."
          }
        },
        "tags": [
          "Alerts and Sessions"
        ],
        "description": "Gets the file event metadata for all events that are associated with alerted upon activity as part of the session.",
        "operationId": "GetSessionEvents",
        "summary": "Get the events that were alerted on as part of the session."
      }
    },
    "/v2/alert-rules/{id}": {
      "get": {
        "tags": [
          "Rules"
        ],
        "summary": "v2 - Gets the details of a single rule.",
        "operationId": "Rules_GetRule",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Id of the rule.",
            "x-nullable": false,
            "example": "ad2fc12c-88cb-4688-832f-b87077c2bf1f"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Header used to authenticate the user",
            "schema": {
              "type": "string"
            },
            "default": "Bearer <token>"
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success: Response containing rule details for given rule id",
            "schema": {
              "$ref": "#/definitions/RuleDetails"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided"
          }
        }
      }
    },
    "/v2/alert-rules": {
      "get": {
        "tags": [
          "Rules"
        ],
        "summary": "v2 - Gets all rules in the service.",
        "operationId": "Rules_GetRules",
        "parameters": [
          {
            "type": "integer",
            "name": "PageNumber",
            "in": "query",
            "description": "Page number of results to return.",
            "format": "int32",
            "default": 0,
            "x-nullable": false,
            "example": 10
          },
          {
            "type": "integer",
            "name": "PageSize",
            "in": "query",
            "description": "Page size of results to return.",
            "format": "int32",
            "default": 10,
            "x-nullable": false,
            "example": 50
          },
          {
            "type": "string",
            "name": "WatchlistId",
            "in": "query",
            "x-nullable": true
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Header used to authenticate the user",
            "schema": {
              "type": "string"
            },
            "default": "Bearer <token>"
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success: Response containing rule details for given page of rules",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RuleDetails"
              }
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided"
          }
        }
      }
    },
    "/v2/alert-rules/{id}/enable": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "v2 - Enables an individual rule by id.",
        "operationId": "Rules_Enable",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the rule.",
            "x-nullable": false,
            "example": "4d2218dc-a927-4f19-80c0-294ab179afc4"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Header used to authenticate the user",
            "schema": {
              "type": "string"
            },
            "default": "Bearer <token>"
          }
        ],
        "responses": {
          "204": {
            "description": "Success: Rule was enabled"
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided"
          }
        }
      }
    },
    "/v2/alert-rules/enable": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "v2 - Enables a set of rules.",
        "operationId": "Rules_Enable2",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "body",
            "required": true,
            "description": "Array of rule ids.",
            "schema": {
              "type": "array",
              "example": [
                "5021efce-9992-49c7-8c9d-87232587a60f"
              ],
              "items": {
                "type": "string"
              }
            },
            "x-nullable": false
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Header used to authenticate the user",
            "schema": {
              "type": "string"
            },
            "default": "Bearer <token>"
          }
        ],
        "responses": {
          "204": {
            "description": "Success: Rules were enabled"
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided"
          }
        }
      }
    },
    "/v2/alert-rules/{id}/disable": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "v2 - Disables an individual rule by id.",
        "operationId": "Rules_Disable",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the rule.",
            "x-nullable": false,
            "example": "76cef2e7-1015-4189-82f1-01b74afc3909"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Header used to authenticate the user",
            "schema": {
              "type": "string"
            },
            "default": "Bearer <token>"
          }
        ],
        "responses": {
          "204": {
            "description": "Success: Rule was disabled"
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided"
          }
        }
      }
    },
    "/v2/alert-rules/disable": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "v2 - Disables a set of rules.",
        "operationId": "Rules_Disable2",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "body",
            "required": true,
            "description": "Array of rule ids.",
            "schema": {
              "type": "array",
              "example": [
                "cd0d4456-e138-486c-8cb8-c98d4554e269"
              ],
              "items": {
                "type": "string"
              }
            },
            "x-nullable": false
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Header used to authenticate the user",
            "schema": {
              "type": "string"
            },
            "default": "Bearer <token>"
          }
        ],
        "responses": {
          "204": {
            "description": "Success: Rules were disabled"
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided"
          }
        }
      }
    },
    "/v2/alert-rules/{id}/users": {
      "delete": {
        "tags": [
          "Rules"
        ],
        "summary": "v2 - Removes all users from a rule's username filter.",
        "description": "Note that the removed users could become either included or excluded from the rule, depending on the rule's configuration.",
        "operationId": "Rules_RemoveAllUsers",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the rule.",
            "x-nullable": false,
            "example": "b5edce90-631f-4c8f-b0f7-fc7b28967a51"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Header used to authenticate the user",
            "schema": {
              "type": "string"
            },
            "default": "Bearer <token>"
          }
        ],
        "responses": {
          "204": {
            "description": "Success: All users were removed from the rule"
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided"
          }
        }
      },
      "get": {
        "tags": [
          "Rules"
        ],
        "summary": "v2 - Gets the username filter of a rule.",
        "description": "Note that the retrieved users could become either included or excluded from the rule, depending on the rule's configuration.",
        "operationId": "Rules_GetUsers",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the rule.",
            "x-nullable": false,
            "example": "505a8417-cbd0-42fc-9a21-79b41f6783d7"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Header used to authenticate the user",
            "schema": {
              "type": "string"
            },
            "default": "Bearer <token>"
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success: List of users on the rule",
            "schema": {
              "$ref": "#/definitions/RuleUsersResponse"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided"
          }
        }
      }
    },
    "/v1/alerts/update-state": {
      "post": {
        "tags": [
          "Alerts and Sessions"
        ],
        "summary": "Change the state of a set of alerts.",
        "description": "This endpoint is deprecated. Please use '/sessions/change-state' to update the state of one or many sessions.",
        "operationId": "Alerts_UpdateAlertState",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "The command to change the state of the given alerts.",
            "schema": {
              "$ref": "#/definitions/UpdateStateCommand"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Given alerts are updated to the indicated status."
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        },
        "deprecated": true
      }
    },
    "/v1/alerts/update-all-state": {
      "post": {
        "tags": [
          "Alerts and Sessions"
        ],
        "summary": "Change the state of a batch alerts matching the given query filters.",
        "description": "This endpoint is deprecated. Please use '/sessions/change-state' to update the state of one or many sessions.\nUses the given filters and updates a batch of matching alerts to the given state.\nThis query uses batching, so the initial command can be sent with no continuation token but all subsequent commands\nshould supply the continuation token provided in the response of the previous request.",
        "operationId": "Alerts_UpdateAllAlertState",
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "The command to change the state of the given alerts.",
            "schema": {
              "$ref": "#/definitions/UpdateAllStateCommand"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success: Batch of alerts updated.  If continuation token is populated, send another request using that token to continue updating alert states.",
            "schema": {
              "$ref": "#/definitions/UpdateAllStateResponse"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        },
        "deprecated": true
      }
    },
    "/v1/alerts/add-note": {
      "post": {
        "tags": [
          "Alerts and Sessions"
        ],
        "summary": "Add a note to an alert.",
        "description": "This endpoint is deprecated. Please use '/sessions/add-note` to add a note to a session.",
        "operationId": "Alerts_AddNoteToAlert",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "Add note command for the alert.",
            "schema": {
              "$ref": "#/definitions/AddNoteCommand"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Note is added to the alert."
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        },
        "deprecated": true
      }
    },
    "/v1/alerts/query-alerts": {
      "post": {
        "tags": [
          "Alerts and Sessions"
        ],
        "summary": "Search for alerts.",
        "description": "This endpoint is deprecated. Please use '/sessions' to search search sessions that contain alerts.",
        "operationId": "Alerts_QueryAlert",
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "required": true,
            "description": "The search query to execute.",
            "schema": {
              "$ref": "#/definitions/SearchQuery"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success: Response containing alerts that match the provided query.",
            "schema": {
              "$ref": "#/definitions/AlertQueryResponse"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        },
        "deprecated": true
      }
    },
    "/v1/alerts/query-details": {
      "post": {
        "tags": [
          "Alerts and Sessions"
        ],
        "summary": "Get details about an alert.",
        "description": "This endpoint is deprecated. Please use the '/sessions/{id}' endpoint instead.",
        "operationId": "Alerts_QueryAlertDetails",
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "required": true,
            "description": "The alert id query to execute.",
            "schema": {
              "$ref": "#/definitions/DetailsQuery"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success: Response containing alerts that match the provided query.",
            "schema": {
              "$ref": "#/definitions/AlertDetailsResponse"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        },
        "deprecated": true
      }
    },
    "/api/v2/query-details-aggregate": {
      "post": {
        "tags": [
          "Alerts and Sessions"
        ],
        "summary": "Get aggregated data about a set of alerts containing two observation rollups. One for endpoint and one for cloud activity.",
        "description": "This endpoint is deprecated. Please use the '/sessions' search endpoint instead for fetching details on sessions matching specified criteria.",
        "operationId": "AlertsControllerV2_QueryAlertDetailsAggregateV2",
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "required": true,
            "description": "The alert id query to execute.",
            "schema": {
              "$ref": "#/definitions/DetailsInAggregateV2Query"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success: Response containing alerts that match the provided query.",
            "schema": {
              "$ref": "#/definitions/AlertDetailsInAggregateV2Response"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        },
        "deprecated": true
      }
    },
    "/api/v3/query-details-aggregate": {
      "post": {
        "tags": [
          "Alerts and Sessions"
        ],
        "summary": "Get aggregated data about a set of alerts containing one observation rollup. That rollup will contain data for each applicable activity vector.",
        "description": "This endpoint is deprecated. Please use the '/sessions' search endpoint instead for fetching details on sessions matching specified criteria.",
        "operationId": "AlertsControllerV3_QueryAlertDetailsAggregateV3",
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "required": true,
            "description": "The alert id query to execute.",
            "schema": {
              "$ref": "#/definitions/DetailsInAggregateV3Query"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success: Response containing alerts that match the provided query.",
            "schema": {
              "$ref": "#/definitions/AlertDetailsInAggregateV3Response"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        },
        "deprecated": true
      }
    },
    "/v1/alerts/rules/query-rule-metadata": {
      "post": {
        "tags": [
          "Alerts and Sessions"
        ],
        "summary": "Query list of all rules in the alerting application.",
        "operationId": "Rules_QueryRuleMetadata",
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "required": true,
            "description": "The RuleMetadataSearchQuery to execute.",
            "schema": {
              "$ref": "#/definitions/RuleMetadataSearchQuery"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success: Response containing rules that match the provided query.",
            "schema": {
              "$ref": "#/definitions/RuleMetadataSearchResponse"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        },
        "deprecated": true
      }
    }
  },
  "definitions": {
    "AccessTokenResponse": {
      "properties": {
        "access_token": {
          "type": "string"
        },
        "expires_in": {
          "format": "int32",
          "type": "integer"
        },
        "token_type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ActiveResponse": {
      "properties": {
        "membershipsChanged": {
          "description": "_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "membershipsChanged"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ActivityResponse": {
      "properties": {
        "active": {
          "description": "Whether or not the agent is active.\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "frequencyInHours": {
          "description": "Hours until next check in\n_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        }
      },
      "required": [
        "active",
        "frequencyInHours"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "AddArchiveSearchJobData": {
      "properties": {
        "guid": {
          "description": "GUID of the archive.\n_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "jobId": {
          "description": "The ID of the started job. Use this later to check progress.\n_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        }
      },
      "required": [
        "guid",
        "jobId"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "AddEnterpriseCustomerData": {
      "properties": {
        "masterLicenseKey": {
          "description": "Master license key that identifies a deployment as belonging to this customer.\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "orgId": {
          "description": "The ID of the PurchasingOrg for this customer. For Code42 internal use only. Deprecated as the customer identifier. Replaced by the registration key.\n_Format_: int32\n_Optional._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "registrationKey": {
          "description": "Registration key that uniquely identifies the customer.\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "tenantUid": {
          "description": "Tenant UID that uniquely identifies the customer in the cloud.\nis not blank\nhas length between 1 and 36, inclusive\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "AddOnLicense": {
      "description": "A addOn license is a license for a addOn product.",
      "properties": {
        "active": {
          "description": "Whether the license is in effect (by current date), and any other business criteria.",
          "type": "boolean"
        },
        "endDate": {
          "description": "The last date the license is in effect.",
          "format": "date",
          "type": "string"
        },
        "seatsPurchased": {
          "description": "The number of addOn seats licensed.",
          "format": "int32",
          "type": "integer"
        },
        "sku": {
          "description": "The sku of the add on product.",
          "type": "string"
        },
        "startDate": {
          "description": "The first date the license is in effect.",
          "format": "date",
          "type": "string"
        }
      },
      "type": "object"
    },
    "AddUserToMatterCustodianDetailsResponse": {
      "properties": {
        "email": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AddUserToMatterDetailsResponse": {
      "properties": {
        "matterId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AddUserToMatterRequest": {
      "description": "The request containing the userId of the user to add to a legal hold matter.",
      "properties": {
        "userId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AddUserToMatterResponse": {
      "properties": {
        "custodian": {
          "$ref": "#/definitions/AddUserToMatterCustodianDetailsResponse"
        },
        "matter": {
          "$ref": "#/definitions/AddUserToMatterDetailsResponse"
        },
        "membershipActive": {
          "type": "boolean"
        },
        "membershipCreationDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "AgentActivateRequestBody": {
      "properties": {
        "agentIds": {
          "items": {
            "$ref": "#/definitions/ComputerGuid"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "AgentActivityResponse": {
      "properties": {
        "agentConnected": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "AgentChannelUpgrade_ActivateChannel": {
      "description": "Activates an agent upgrade channel. A channel must be activated in order for any tenants and organizations using<br>    it to receive agent upgrades.<br>    Fails if the specified channel name is not found.",
      "properties": {
        "name": {
          "description": "The name of the channel.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "name"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "AgentChannelUpgrade_AddPrivateChannel": {
      "description": "Allow a tenant to have access to a private channel. The tenant of the logged in user is used.",
      "properties": {
        "channel": {
          "description": "Name of the private channel.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "channel"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "AgentChannelUpgrade_CreateChannel": {
      "description": "Creates an agent upgrade channel.<br>    A newly created channel is not activated and supports DCU delays by default.<br>    Fails if the supplied name is invalid or the name is already in use.",
      "properties": {
        "name": {
          "description": "The name of the channel to create.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "type": {
          "description": "The type of the channel.\n_Values_: [LIVE, DCU].\n_Required._",
          "enum": [
            "LIVE",
            "DCU"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        },
        "visibility": {
          "default": "PRIVATE",
          "description": "Specifies if the channel is publicly visible or private.\n_Values_: [PUBLIC, PRIVATE].\n_Default Value_: PRIVATE",
          "enum": [
            "PUBLIC",
            "PRIVATE"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "AgentChannelUpgrade_DeactivateChannel": {
      "description": "Deactivates an agent upgrade channel. Tenants and organizations using a deactivated channel will not receive<br>    agent upgrades until the channel is activated.<br>    Fails if the specified channel name is not found.",
      "properties": {
        "name": {
          "description": "The name of the channel.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "name"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "AgentChannelUpgrade_DeleteAvailability": {
      "description": "Deletes the availability date for the specified version in the specified channel. Note that successful execution<br>    of this method on a \"LIVE\" channel will leave the channel empty.<br>    Fails if the channel does not exist or the version does not have an availability date in the channel.",
      "properties": {
        "channelName": {
          "description": "The name of the channel.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "version": {
          "description": "The version for which to delete the availability date.\nis not blank\nhas length between 3 and 24, inclusive\nDevice version and build\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "channelName",
        "version"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "AgentChannelUpgrade_DeleteChannel": {
      "description": "Delete an agent upgrade channel.",
      "properties": {
        "name": {
          "description": "The name of the channel to delete.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "name"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "AgentChannelUpgrade_RemoveOrgChannel": {
      "description": "Removes the channel previously set for the organization. The organization will use the channel resolved<br>    through its settings hierarchy.<br>    Fails if the provided channel name does not match the name of the channel previously set for the organization.",
      "properties": {
        "channelName": {
          "description": "The name of the channel.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "orgId": {
          "description": "The organization's ID.\n_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        }
      },
      "required": [
        "channelName",
        "orgId"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "AgentChannelUpgrade_RemovePrivateChannel": {
      "description": "No longer allow a tenant to have access to a private channel. The tenant of the logged in user is used.",
      "properties": {
        "channel": {
          "description": "Name of the private channel.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "channel"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "AgentChannelUpgrade_RemoveTenantChannel": {
      "description": "Removes the channel previously set for the tenant. The tenant will use the system's channel.<br>    Fails if the provided channel name does not match the name of the channel previously set for the tenant.",
      "properties": {
        "channelName": {
          "description": "The name of the channel.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "channelName"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "AgentChannelUpgrade_SetAvailability": {
      "description": "Sets the availability date for the specified version in the specified channel. Overwrites any previously set date.<br>    The availabilityDate is ignored if attempting to set availability on a \"LIVE\" channel.<br>    Fails if the channel does not exist or if the date is outside of the acceptable range.",
      "properties": {
        "channelName": {
          "description": "The name of the channel.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "date": {
          "description": "The date when the version will be made available.\n_Format_: date\n_Required._",
          "format": "date",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "version": {
          "description": "The version for which to set the availability date.\nis not blank\nhas length between 3 and 24, inclusive\nDevice version and build\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "channelName",
        "date",
        "version"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "AgentChannelUpgrade_SetOrgChannel": {
      "description": "Sets the channel which the organization will use to determine its agent upgrades. This will override any channel<br>    found through the organization's settings hierarchy.<br>    Fails if the channel does not exist or if a channel is already set for the organization.",
      "properties": {
        "channelName": {
          "description": "The name of the channel.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "orgId": {
          "description": "The organization's ID.\n_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        }
      },
      "required": [
        "channelName",
        "orgId"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "AgentChannelUpgrade_SetTenantChannel": {
      "description": "Sets the channel which the tenant will use to determine its agent upgrades.<br>    Fails if the channel does not exist or if a channel is already set for the tenant.",
      "properties": {
        "channelName": {
          "description": "The name of the channel.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "channelName"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "AgentCliCommand": {
      "properties": {
        "parameters": {
          "description": "The parameters for the command.\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "command": {
          "description": "The name of the command to be executed by the agent.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "commandGuid": {
          "description": "The GUID of the command.\n_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "creationDate": {
          "description": "The date/time the command was created\n_Format_: date-time\n_Required._",
          "format": "date-time",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "modificationDate": {
          "description": "Indicates the date/time the result was set.\n_Format_: date-time\n_Required._",
          "format": "date-time",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "result": {
          "description": "The result returned from execution.\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "sentDate": {
          "description": "The date/time the command was last sent to the agent.\n_Format_: date-time\n_Optional._",
          "format": "date-time",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "success": {
          "description": "Specifies if the command was run successfully.\n_Optional._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "command",
        "commandGuid",
        "creationDate",
        "modificationDate"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "AgentCli_Create": {
      "description": "Create an agent CLI command for the agent to run.",
      "properties": {
        "parameters": {
          "description": "The parameters of the command.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "command": {
          "description": "The command name to be executed.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "deviceGuid": {
          "description": "The GUID of the agent.\nis not empty\ndigits\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "command",
        "deviceGuid",
        "parameters"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "AgentCli_UpdateCommandResult": {
      "properties": {
        "deviceGuid": {
          "description": "The GUID of the agent.\nis not empty\ndigits\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "results": {
          "description": "The results of executing commands.\n_List_ (Must have at least one entry.)\n_Required._",
          "items": {
            "$ref": "#/definitions/CommandResult"
          },
          "minItems": 1,
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        }
      },
      "required": [
        "deviceGuid",
        "results"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "AgentCountResponse": {
      "description": "Counts of agents, by agent type. Each agent type is provided; order is not guaranteed.",
      "properties": {
        "agentCounts": {
          "items": {
            "$ref": "#/definitions/AgentTypeCount"
          },
          "type": "array"
        },
        "totalAgentCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AgentData": {
      "properties": {
        "active": {
          "type": "boolean"
        },
        "agentGuid": {
          "type": "string"
        },
        "agentId": {
          "format": "int64",
          "type": "integer"
        },
        "agentType": {
          "description": "Type of agent",
          "enum": [
            "CODE42AAT",
            "COMBINED",
            "CODE42"
          ],
          "type": "string"
        },
        "appBuildVersion": {
          "format": "int64",
          "type": "integer"
        },
        "appProductVersion": {
          "type": "string"
        },
        "backupUsage": {
          "items": {
            "$ref": "#/definitions/BackupUsage"
          },
          "type": "array"
        },
        "blocked": {
          "type": "boolean"
        },
        "buildVersion": {
          "format": "int64",
          "type": "integer"
        },
        "displayedVersion": {
          "type": "string"
        },
        "healthIssues": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "lastConnected": {
          "format": "date-time",
          "type": "string"
        },
        "machineId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "orgGuid": {
          "type": "string"
        },
        "orgId": {
          "format": "int32",
          "type": "integer"
        },
        "osArch": {
          "type": "string"
        },
        "osHostname": {
          "type": "string"
        },
        "osName": {
          "type": "string"
        },
        "osVersion": {
          "type": "string"
        },
        "principalId": {
          "type": "string"
        },
        "productVersion": {
          "type": "string"
        },
        "serialNumber": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "version": {
          "format": "int64",
          "type": "integer"
        }
      },
      "title": "AgentData",
      "type": "object"
    },
    "AgentDeactivateRequestBody": {
      "properties": {
        "agentIds": {
          "items": {
            "$ref": "#/definitions/ComputerGuid"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "AgentDeployment_Register": {
      "properties": {
        "deviceInventory": {
          "$ref": "#/definitions/DeviceInventory"
        },
        "registrationId": {
          "description": "_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "registrationKey": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "secret": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "username": {
          "description": "_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "deviceInventory",
        "registrationKey",
        "secret"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "AgentDetails": {
      "properties": {
        "address": {
          "type": "string"
        },
        "appBuild": {
          "format": "int64",
          "type": "integer"
        },
        "appVersion": {
          "type": "string"
        },
        "featurePackBuild": {
          "format": "int64",
          "type": "integer"
        },
        "featurePackVersion": {
          "type": "string"
        },
        "installType": {
          "enum": [
            "SYSTEM",
            "USER"
          ],
          "type": "string"
        },
        "machineId": {
          "type": "string"
        },
        "osArch": {
          "type": "string"
        },
        "osDistributionName": {
          "type": "string"
        },
        "osDistributionVersion": {
          "type": "string"
        },
        "osHostname": {
          "type": "string"
        },
        "osName": {
          "type": "string"
        },
        "osVersion": {
          "type": "string"
        },
        "serialNumber": {
          "type": "string"
        },
        "timeZone": {
          "type": "string"
        },
        "version": {
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AgentDetailsResponse": {
      "properties": {
        "active": {
          "description": "Whether or not the agent is active.\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "username": {
          "description": "The username associated with the agent.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "active",
        "username"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "AgentDetails_IsActive": {
      "properties": {
        "deviceGuid": {
          "description": "The GUID of the agent.\nis not empty\ndigits\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "loginKey": {
          "description": "The login key of the agent.\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "deviceGuid"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "AgentEnvironmentInfo": {
      "properties": {
        "address": {
          "type": "string"
        },
        "appBuild": {
          "format": "int64",
          "type": "integer"
        },
        "appVersion": {
          "type": "string"
        },
        "compatOsArch": {
          "type": "string"
        },
        "compatOsName": {
          "type": "string"
        },
        "compatOsVersion": {
          "type": "string"
        },
        "featurePackBuild": {
          "format": "int64",
          "type": "integer"
        },
        "featurePackVersion": {
          "type": "string"
        },
        "machineId": {
          "type": "string"
        },
        "manifestCompatibleOsVersion": {
          "type": "string"
        },
        "osArch": {
          "type": "string"
        },
        "osHostname": {
          "type": "string"
        },
        "osName": {
          "type": "string"
        },
        "osVersion": {
          "type": "string"
        },
        "serialNumber": {
          "type": "string"
        },
        "timeZone": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AgentGuidResponse": {
      "description": "Guid of the Agent",
      "properties": {
        "agentGuid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AgentListResponse": {
      "properties": {
        "agents": {
          "items": {
            "$ref": "#/definitions/AgentData"
          },
          "type": "array"
        },
        "totalResultCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "title": "AgentListResponse",
      "type": "object"
    },
    "AgentLogsRequest": {
      "properties": {
        "agentLogsRequestUid": {
          "description": "is not empty\ndigits\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "deviceUid": {
          "description": "is not empty\ndigits\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "expirationTimestamp": {
          "description": "_Format_: date-time\n_Optional._",
          "format": "date-time",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "notificationEmailAddress": {
          "description": "_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "requestTimestamp": {
          "description": "_Format_: date-time\n_Required._",
          "format": "date-time",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "requestingUserUid": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "status": {
          "description": "_Values_: [REQUESTED, UPLOADED, FAILED].\n_Required._",
          "enum": [
            "REQUESTED",
            "UPLOADED",
            "FAILED"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        },
        "url": {
          "description": "_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "agentLogsRequestUid",
        "deviceUid",
        "requestTimestamp",
        "requestingUserUid",
        "status"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "AgentLogs_RequestAgentLogs": {
      "description": "Send a request to a device for its logs.",
      "properties": {
        "deviceUid": {
          "description": "The device whose logs are being requested\nis not empty\ndigits\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "notificationEmailAddress": {
          "description": "Email address to be notified with updates to the request\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "deviceUid"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "AgentPackage": {
      "properties": {
        "appBuildVersion": {
          "format": "int32",
          "type": "integer"
        },
        "appProductVersion": {
          "type": "string"
        },
        "buildNumber": {
          "format": "int32",
          "type": "integer"
        },
        "clientProductVersion": {
          "type": "string"
        },
        "clientVersion": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "installerDownloadUrl": {
          "type": "string"
        },
        "installerMd5": {
          "type": "string"
        },
        "installerSha1": {
          "type": "string"
        },
        "os": {
          "enum": [
            "win64",
            "winarm64",
            "mac",
            "mac_arm64",
            "mac_x86_64",
            "macos",
            "linux",
            "rhel8",
            "rhel9",
            "ubuntu20_04",
            "ubuntu22_04",
            "ubuntu24_04",
            "unsupported"
          ],
          "type": "string"
        },
        "productType": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AgentRegistrationIssueDto": {
      "properties": {
        "attemptDate": {
          "format": "date-time",
          "type": "string"
        },
        "deploymentPolicyUid": {
          "format": "int64",
          "type": "integer"
        },
        "deploymentSecret": {
          "type": "string"
        },
        "hostName": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "issueType": {
          "enum": [
            "NO_USERNAME",
            "REG_KEY_NOT_FOUND",
            "INACTIVE_ORG",
            "REGISTRATION_BLOCKED_ORG",
            "USERNAME_MUST_BE_EMAIL",
            "UNKNOWN_DEPLOYMENT_SECRET",
            "EXPIRED_DEPLOYMENT_SECRET",
            "DUPLICATE_USERNAME",
            "INACTIVE_USER",
            "USER_PROVISIONED",
            "OTHER"
          ],
          "type": "string"
        },
        "orgGuid": {
          "type": "string"
        },
        "orgName": {
          "type": "string"
        },
        "osArch": {
          "type": "string"
        },
        "osName": {
          "type": "string"
        },
        "osVersion": {
          "type": "string"
        },
        "registrationKey": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AgentRegistrationIssueListResponse": {
      "description": "One 'page' of agent registration issue data.",
      "properties": {
        "issues": {
          "items": {
            "$ref": "#/definitions/AgentRegistrationIssueDto"
          },
          "type": "array"
        },
        "totalSize": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AgentResponse": {
      "description": "An agent's details.",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "agentHealthIssueTypes": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "agentId": {
          "type": "string"
        },
        "agentType": {
          "description": "Type of agent",
          "enum": [
            "CODE42AAT",
            "COMBINED",
            "CODE42"
          ],
          "type": "string"
        },
        "appVersion": {
          "type": "string"
        },
        "creationDate": {
          "format": "date-time",
          "type": "string"
        },
        "externalReference": {
          "type": "string"
        },
        "lastConnected": {
          "format": "date-time",
          "type": "string"
        },
        "machineId": {
          "type": "string"
        },
        "modificationDate": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "osHostname": {
          "type": "string"
        },
        "osName": {
          "type": "string"
        },
        "productVersion": {
          "type": "string"
        },
        "serialNumber": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AgentSettingBulkUpdateResponse": {
      "properties": {
        "agentCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AgentStateProperty": {
      "properties": {
        "deviceGuid": {
          "description": "The GUID of the agent.\nis not empty\ndigits\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "name": {
          "description": "The name of the property stored in the agent's state.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "value": {
          "description": "The value of the property.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "deviceGuid",
        "name",
        "value"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "AgentState_SetAgentState": {
      "description": "Update an agent's state with a map of properties.",
      "properties": {
        "deviceGuid": {
          "description": "The GUID of the agent.\nis not empty\ndigits\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "properties": {
          "additionalProperties": {
            "description": "_Required._",
            "type": "string",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "description": "The properties (name-value pairs) to be added to or updated in the agent's state.\n_Map_\n_Required._",
          "type": "object",
          "x-type": "OpenApiSchemaMapDef"
        }
      },
      "required": [
        "deviceGuid",
        "properties"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "AgentTypeCount": {
      "description": "Counts of a specific agent type",
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "description": "Type of agent",
          "enum": [
            "CODE42AAT",
            "COMBINED",
            "CODE42"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "AgentTypeResponse": {
      "properties": {
        "agentType": {
          "description": "Type of agent",
          "enum": [
            "CODE42AAT",
            "COMBINED",
            "CODE42"
          ],
          "type": "string"
        }
      },
      "title": "AgentTypeResponse",
      "type": "object"
    },
    "AgentUpdateRequest": {
      "properties": {
        "externalReference": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AgentUpgrade_GetAvailableUpgrade": {
      "description": "Used by the Artemis agent to check for an available upgrade.",
      "properties": {
        "address": {
          "description": "is not blank\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "agentBuild": {
          "description": "_Format_: int64\n_Required._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "agentVersion": {
          "description": "is not blank\nhas length between 5 and 11, inclusive\nReadable product version\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "appBuild": {
          "description": "_Format_: int64\n_Optional._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "appVersion": {
          "description": "is not blank\nhas length between 5 and 11, inclusive\nReadable product version\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "deviceGuid": {
          "description": "is not empty\ndigits\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "featurePackBuild": {
          "description": "_Format_: int64\n_Optional._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "featurePackVersion": {
          "description": "is not blank\nhas length between 5 and 11, inclusive\nReadable product version\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "manifestCompatibleOsVersion": {
          "description": "Used to provide the closest LTS OS version that can be used to provide the most compatible manifest. Only necessary for Ubuntu currently.\nis not blank\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "osArch": {
          "description": "is not blank\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "osHostname": {
          "description": "is not blank\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "osName": {
          "description": "is not blank\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "osVersion": {
          "description": "is not blank\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "timeZone": {
          "description": "is not blank\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "agentBuild",
        "agentVersion",
        "deviceGuid",
        "osArch",
        "osName",
        "osVersion"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ApiClientWithoutProductRolesResponse": {
      "properties": {
        "clientId": {
          "type": "string"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "lastRedeemedDate": {
          "format": "date-time",
          "type": "string"
        },
        "modifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ApiStyleGuideRestErrorResponse": {
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ArchiveCommand_Add": {
      "description": "Run an archive command.",
      "properties": {
        "archiveGuid": {
          "description": "The GUID of a single specified archive.  Required for types MAINTAIN_ARCHIVE, MAINTAIN_ARCHIVE_SYSTEM, MAINTAIN_ARCHIVE_NO_INTERRUPT, RESET_ARCHIVE, and CANCEL_MAINTENANCE_JOB\n_Format_: guid\n_Optional._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "serverId": {
          "description": "The target server.  Required for types STOP_MAINTENANCE_JOBS, START_MAINTENANCE_JOBS, UPDATE_CPU_THROTTLE_USER, and UPDATE_CPU_THROTTLE_SYSTEM\n_Format_: int32\n_Optional._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "throttlePct": {
          "description": "The percentage to throttle.  Required for types UPDATE_CPU_THROTTLE_USER and UPDATE_CPU_THROTTLE_SYSTEM\n_Format_: int32\n_Optional._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "type": {
          "description": "The type of command to run.\n_Values_: [MAINTAIN_ARCHIVE_NO_INTERRUPT, RESET_ARCHIVE, CANCEL_MAINTENANCE_JOB, STOP_MAINTENANCE_JOBS, START_MAINTENANCE_JOBS, UPDATE_CPU_THROTTLE_USER, UPDATE_CPU_THROTTLE_SYSTEM, MAINTAIN_ARCHIVE, MAINTAIN_ARCHIVE_SYSTEM].\n_Required._",
          "enum": [
            "MAINTAIN_ARCHIVE_NO_INTERRUPT",
            "RESET_ARCHIVE",
            "CANCEL_MAINTENANCE_JOB",
            "STOP_MAINTENANCE_JOBS",
            "START_MAINTENANCE_JOBS",
            "UPDATE_CPU_THROTTLE_USER",
            "UPDATE_CPU_THROTTLE_SYSTEM",
            "MAINTAIN_ARCHIVE",
            "MAINTAIN_ARCHIVE_SYSTEM"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        }
      },
      "required": [
        "type"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ArchiveGuid": {
      "type": "object"
    },
    "ArchiveSearchJobData": {
      "properties": {
        "files": {
          "description": "The set of files that match the search.\n_List_\n_Required._",
          "items": {
            "$ref": "#/definitions/ArchiveSearchJobFileData"
          },
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "status": {
          "description": "The status of the search job.\n_Values_: [WORKING, DONE, ERROR, CANCELLED].\n_Required._",
          "enum": [
            "WORKING",
            "DONE",
            "ERROR",
            "CANCELLED"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        }
      },
      "required": [
        "files",
        "status"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ArchiveSearchJobFileData": {
      "properties": {
        "backupSetId": {
          "description": "GUID of the backup set to which the file belongs\n_Format_: guid\n_Optional._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "deleted": {
          "description": "This file is deleted.\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "filename": {
          "description": "A file name that matches the regular expression.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "hidden": {
          "description": "This file is hidden.\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "id": {
          "description": "ID of the matching file.\n_Format_: numeric string\n_Required._",
          "format": "numeric string",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "lastModified": {
          "description": "Timestamp of the matching file.\n_Format_: date-time\n_Required._",
          "format": "date-time",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "path": {
          "description": "Path of the matching file.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "type": {
          "description": "File type of the matching file.\n_Values_: [DIRECTORY, VERSION, FILE].\n_Required._",
          "enum": [
            "DIRECTORY",
            "VERSION",
            "FILE"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        }
      },
      "required": [
        "deleted",
        "filename",
        "hidden",
        "id",
        "lastModified",
        "path",
        "type"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ArchiveSearchJob_Add": {
      "description": "Create and manage jobs that search an archive with a given GUID for file names matching a regular expression.",
      "properties": {
        "backupSetId": {
          "description": "ID of the backup set to search.\n_Format_: guid\n_Optional._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "guid": {
          "description": "GUID of the archive.\n_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "maxResults": {
          "default": 10000,
          "description": "Maximum number of file names to return.\n_Format_: int32\n_Default Value_: 10000",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "regex": {
          "description": "Regular expression to match file names.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "showDeleted": {
          "default": false,
          "description": "Include deleted files in search.\n_Default Value_: false",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "timestamp": {
          "default": 0,
          "description": "Timestamp of the archive version to search. Zero (0) means the most recent version.\n_Format_: int64\n_Default Value_: 0",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "webRestoreSessionId": {
          "description": "ID of this web restore session.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "guid",
        "regex",
        "webRestoreSessionId"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ArchiveSearchJob_Remove": {
      "description": "Cancel a search job.",
      "properties": {
        "guid": {
          "description": "The GUID of the device that created the archive data.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "jobId": {
          "description": "The ID of the search job.\n_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        }
      },
      "required": [
        "guid",
        "jobId"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ArchiveSizeQueryData": {
      "properties": {
        "resultAsOfDate": {
          "description": "Time when this statistic was calculated.\n_Format_: date-time\n_Optional._",
          "format": "date-time",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "totalActiveBillableBytes": {
          "description": "Total active billable bytes in the selected archives.\n_Format_: int64\n_Required._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "totalStorageBytes": {
          "description": "Total bytes in the selected archives.\n_Format_: int64\n_Required._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "userCount": {
          "description": "The number of active users.\n_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        }
      },
      "required": [
        "totalActiveBillableBytes",
        "totalStorageBytes",
        "userCount"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "AuditEntry": {
      "properties": {
        "actionType": {
          "enum": [
            "MIGRATION",
            "CONFIGURATION"
          ],
          "type": "string"
        },
        "auditType": {
          "enum": [
            "KEYSTORE"
          ],
          "type": "string"
        },
        "creationDate": {
          "format": "date-time",
          "type": "string"
        },
        "details": {
          "type": "string"
        },
        "entryId": {
          "format": "int32",
          "type": "integer"
        },
        "modificationDate": {
          "format": "date-time",
          "type": "string"
        },
        "orgId": {
          "format": "int32",
          "type": "integer"
        },
        "responsibleParty": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AuthTokenResponse": {
      "properties": {
        "bearerToken": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AuthenticationProviderCreateResponse": {
      "description": "Response containing the Uid and type of the created authentication provider",
      "properties": {
        "type": {
          "description": "The type of authentication provider created, either 'idp' or 'federation'",
          "type": "string"
        },
        "uid": {
          "description": "The unique identifier of the created authentication provider",
          "type": "string"
        }
      },
      "title": "AuthenticationProviderCreateResponse",
      "type": "object"
    },
    "AuthenticationProviderInfoResponse": {
      "description": "Response containing provider information for the tenant.",
      "properties": {
        "entityId": {
          "description": "The service provider SAML EntityID for the tenant.",
          "type": "string"
        },
        "spMetadataUrl": {
          "description": "A canonical URL for an IDP to fetch our metadata for the tenant.",
          "type": "string"
        }
      },
      "title": "AuthenticationProviderInfoResponse",
      "type": "object"
    },
    "AvailableProductVersion": {
      "properties": {
        "appProductVersion": {
          "description": "_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "effectiveDate": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "productVersion": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "effectiveDate",
        "productVersion"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "AvailableUpgradeResponse": {
      "properties": {
        "authorityUrl": {
          "description": "is not blank\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "downloadBaseUrl": {
          "description": "is not blank\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "frequencyInMinutes": {
          "description": "_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "manifestCerts": {
          "description": "_List_ (Must have at least one entry.)\n_Optional._",
          "items": {
            "description": "is not blank\n_Required._",
            "type": "string",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "minItems": 1,
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "manifestUrl": {
          "description": "is not blank\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "proxy": {
          "$ref": "#/definitions/ProxyConfiguration"
        },
        "status": {
          "description": "_Values_: [AVAILABLE, LATEST, UNSUPPORTED_OS, UNLICENSED, DISABLED, DELAYED].\n_Required._",
          "enum": [
            "AVAILABLE",
            "LATEST",
            "UNSUPPORTED_OS",
            "UNLICENSED",
            "DISABLED",
            "DELAYED"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        }
      },
      "required": [
        "authorityUrl",
        "downloadBaseUrl",
        "frequencyInMinutes",
        "status"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "BackupPathsCreateOrUpdateRequest": {
      "properties": {
        "paths": {
          "description": "Paths to backup\n_List_\n_Optional._",
          "items": {
            "$ref": "#/definitions/PathData"
          },
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "excludePatterns": {
          "$ref": "#/definitions/ExcludePatternsRequest"
        }
      },
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "BackupPathsResponse": {
      "properties": {
        "paths": {
          "description": "Paths to backup\n_List_\n_Required._",
          "items": {
            "$ref": "#/definitions/PathData"
          },
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "excludePatterns": {
          "$ref": "#/definitions/ExcludePatternsResponse"
        }
      },
      "required": [
        "excludePatterns",
        "paths"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "BackupRunWindowCreateOrUpdateRequest": {
      "properties": {
        "alwaysRun": {
          "description": "_Optional._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "days": {
          "description": "_Set_\n_Optional._",
          "items": {
            "description": "_Values_: [SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY].\n_Required._",
            "enum": [
              "SUNDAY",
              "MONDAY",
              "TUESDAY",
              "WEDNESDAY",
              "THURSDAY",
              "FRIDAY",
              "SATURDAY"
            ],
            "type": "string",
            "x-type": "OpenApiSchemaEnumDef"
          },
          "type": "array",
          "uniqueItems": true,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "endTimeOfDay": {
          "description": "_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "startTimeOfDay": {
          "description": "_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "BackupRunWindowResponse": {
      "properties": {
        "alwaysRun": {
          "description": "_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "days": {
          "description": "_Set_\n_Required._",
          "items": {
            "description": "_Values_: [SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY].\n_Required._",
            "enum": [
              "SUNDAY",
              "MONDAY",
              "TUESDAY",
              "WEDNESDAY",
              "THURSDAY",
              "FRIDAY",
              "SATURDAY"
            ],
            "type": "string",
            "x-type": "OpenApiSchemaEnumDef"
          },
          "type": "array",
          "uniqueItems": true,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "endTimeOfDay": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "startTimeOfDay": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "alwaysRun",
        "days",
        "endTimeOfDay",
        "startTimeOfDay"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "BackupSet": {
      "description": "Backup set information",
      "properties": {
        "backupSetId": {
          "description": "Id of the backup set.",
          "type": "string"
        },
        "backupSetName": {
          "description": "Name of the backup set.",
          "type": "string"
        },
        "planUid": {
          "description": "PlanUid of the backup set.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "BackupSetsResponse": {
      "description": "List of backup sets",
      "properties": {
        "backupSets": {
          "description": "The list of backup sets.",
          "items": {
            "$ref": "#/definitions/BackupSet"
          },
          "type": "array"
        },
        "multiSetDestination": {
          "description": "Whether the destination differentiates among multiple backup sets when restoring.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "BackupTreeNodeQueryData": {
      "properties": {
        "checked": {
          "description": "Selection status; indicates whether a file is part of backup set.\n_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "children": {
          "description": "List of children.\n_List_\n_Required._",
          "items": {
            "$ref": "#/definitions/BackupTreeNodeQueryData"
          },
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "excluded": {
          "description": "File type excluded.\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "exists": {
          "description": "Path exists.\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "expanded": {
          "description": "Directory expanded, child loaded.\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "filename": {
          "description": "File name.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "hidden": {
          "description": "Hidden file.\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "isDirectory": {
          "description": "Node is a directory.\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "path": {
          "description": "Node path.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "type": {
          "description": "Node type.\n_Values_: [FILE, DIRECTORY].\n_Required._",
          "enum": [
            "FILE",
            "DIRECTORY"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        }
      },
      "required": [
        "checked",
        "children",
        "excluded",
        "exists",
        "expanded",
        "filename",
        "hidden",
        "isDirectory",
        "path",
        "type"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "BackupUsage": {
      "properties": {
        "alertStates": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "archiveBytes": {
          "format": "int64",
          "type": "integer"
        },
        "lastBackup": {
          "format": "date-time",
          "type": "string"
        },
        "targetComputerGuid": {
          "type": "string"
        },
        "targetComputerName": {
          "type": "string"
        }
      },
      "title": "BackupUsage",
      "type": "object"
    },
    "BlockTableResponse": {
      "properties": {
        "allowedVersions": {
          "description": "_List_\n_Required._",
          "items": {
            "description": "_Required._",
            "type": "string",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "blockedVersions": {
          "description": "_List_\n_Required._",
          "items": {
            "description": "_Required._",
            "type": "string",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        }
      },
      "required": [
        "allowedVersions",
        "blockedVersions"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "BodyPackets": {
      "properties": {
        "packets": {
          "items": {
            "$ref": "#/definitions/BodySettingPacket"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "BodyPart": {
      "properties": {
        "contentDisposition": {
          "$ref": "#/definitions/ContentDisposition"
        },
        "entity": {
          "type": "object"
        },
        "headers": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object"
        },
        "mediaType": {
          "properties": {
            "parameters": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "subtype": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "wildcardSubtype": {
              "type": "boolean"
            },
            "wildcardType": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "messageBodyWorkers": {
          "$ref": "#/definitions/MessageBodyWorkers"
        },
        "parameterizedHeaders": {
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/ParameterizedHeader"
            },
            "type": "array"
          },
          "type": "object"
        },
        "parent": {
          "$ref": "#/definitions/MultiPart"
        },
        "providers": {
          "type": "object"
        }
      },
      "type": "object"
    },
    "BodySettingPacket": {
      "properties": {
        "key": {
          "type": "string"
        },
        "locked": {
          "type": "boolean"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ByteArray": {
      "properties": {
        "array": {
          "items": {
            "format": "byte",
            "type": "string"
          },
          "type": "array"
        },
        "checksum": {
          "$ref": "#/definitions/MD5Value"
        }
      },
      "type": "object"
    },
    "Channel": {
      "properties": {
        "active": {
          "description": "Whether or not the channel is active.\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "name": {
          "description": "The name of the channel.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "type": {
          "description": "The type of the channel.\n_Values_: [LIVE, DCU].\n_Required._",
          "enum": [
            "LIVE",
            "DCU"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        },
        "visibility": {
          "description": "Is the channel visible to all (public) or select tenants (private).\n_Values_: [PUBLIC, PRIVATE].\n_Required._",
          "enum": [
            "PUBLIC",
            "PRIVATE"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        }
      },
      "required": [
        "active",
        "name",
        "type",
        "visibility"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ChannelUpgradeBlockTableEntry": {
      "properties": {
        "allowedVersions": {
          "description": "_List_\n_Required._",
          "items": {
            "description": "is not blank\nhas length between 5 and 11, inclusive\nReadable product version\n_Required._",
            "type": "string",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "blocked": {
          "description": "_List_\n_Required._",
          "items": {
            "description": "is not blank\nhas length between 5 and 11, inclusive\nReadable product version\n_Required._",
            "type": "string",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "channelName": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "allowedVersions",
        "blocked",
        "channelName"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ClientCredentialsRequest": {
      "properties": {
        "client_id": {
          "type": "string"
        },
        "client_secret": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ClientCustomizationDeleteResponse": {
      "properties": {
        "templateUids": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ClientCustomizationTemplateResponse": {
      "properties": {
        "base64AboutScreenImage": {
          "type": "string"
        },
        "base64HeaderImage": {
          "type": "string"
        },
        "creatingUsername": {
          "type": "string"
        },
        "creationTimestamp": {
          "format": "date-time",
          "type": "string"
        },
        "homeMessage": {
          "type": "string"
        },
        "isHomeMessageDismissible": {
          "type": "boolean"
        },
        "lastModifiedTimestamp": {
          "format": "date-time",
          "type": "string"
        },
        "modifierUsername": {
          "type": "string"
        },
        "orgActive": {
          "type": "boolean"
        },
        "orgId": {
          "format": "int32",
          "type": "integer"
        },
        "orgName": {
          "type": "string"
        },
        "passwordLabel": {
          "type": "string"
        },
        "templateName": {
          "type": "string"
        },
        "templateUid": {
          "type": "string"
        },
        "usernameLabel": {
          "type": "string"
        },
        "version": {
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ClientCustomizationTemplateSummary": {
      "properties": {
        "creatingUsername": {
          "type": "string"
        },
        "creationTimestamp": {
          "format": "date-time",
          "type": "string"
        },
        "lastModifiedTimestamp": {
          "format": "date-time",
          "type": "string"
        },
        "modifierUsername": {
          "type": "string"
        },
        "orgActive": {
          "type": "boolean"
        },
        "orgName": {
          "type": "string"
        },
        "templateName": {
          "type": "string"
        },
        "templateUid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ClientPackageDownloadQueryData": {
      "properties": {
        "clientPackageDownloads": {
          "description": "_List_\n_Required._",
          "items": {
            "$ref": "#/definitions/ClientPackageDownloadQueryData_data"
          },
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        }
      },
      "required": [
        "clientPackageDownloads"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ClientPackageDownloadQueryData_data": {
      "properties": {
        "buildNumber": {
          "description": "Build number of the client package being downloaded.\n_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "clientVersion": {
          "description": "Version of the client package being downloaded.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "os": {
          "description": "Operating system of the client package being downloaded.\n_Values_: [WIN, WIN64, LINUX, MAC].\n_Required._",
          "enum": [
            "WIN",
            "WIN64",
            "LINUX",
            "MAC"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        },
        "productType": {
          "description": "Product type of the client package being downloaded.\n_Values_: [CRASH_PLAN, CRASH_PLAN_PRO, CRASH_PLAN_PRO_E, CODE42_CRASH_PLAN, CRASH_PLAN_SMB, CODE42].\n_Required._",
          "enum": [
            "CRASH_PLAN",
            "CRASH_PLAN_PRO",
            "CRASH_PLAN_PRO_E",
            "CODE42_CRASH_PLAN",
            "CRASH_PLAN_SMB",
            "CODE42"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        },
        "status": {
          "description": "Current status of the client package download.\n_Values_: [RUNNING, COMPLETE, CANCELLED, FAILED].\n_Required._",
          "enum": [
            "RUNNING",
            "COMPLETE",
            "CANCELLED",
            "FAILED"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        }
      },
      "required": [
        "buildNumber",
        "clientVersion",
        "os",
        "productType",
        "status"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ClientPackageDownload_Add": {
      "description": "Initiate download of client installer package.",
      "properties": {
        "buildNumber": {
          "description": "Build number of the client package to download.\n_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "clientVersion": {
          "description": "Version of the client package to download.\n_Format_: int64\n_Required._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "os": {
          "description": "Operating system of the client package to download.\n_Values_: [WIN, WIN64, LINUX, MAC].\n_Required._",
          "enum": [
            "WIN",
            "WIN64",
            "LINUX",
            "MAC"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        },
        "productType": {
          "description": "Product type of the client package to download\n_Values_: [CRASH_PLAN, CRASH_PLAN_PRO, CRASH_PLAN_PRO_E, CODE42_CRASH_PLAN, CRASH_PLAN_SMB, CODE42].\n_Required._",
          "enum": [
            "CRASH_PLAN",
            "CRASH_PLAN_PRO",
            "CRASH_PLAN_PRO_E",
            "CODE42_CRASH_PLAN",
            "CRASH_PLAN_SMB",
            "CODE42"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        }
      },
      "required": [
        "buildNumber",
        "clientVersion",
        "os",
        "productType"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ClientPackageDownload_Remove": {
      "description": "Cancel a currently running client package download identified by version, build number, and operating system.",
      "properties": {
        "buildNumber": {
          "description": "Build number of the client package being downloaded.\n_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "clientVersion": {
          "description": "Version of the client package being downloaded.\n_Format_: int64\n_Required._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "os": {
          "description": "Operating system of the client package being downloaded.\n_Values_: [WIN, WIN64, LINUX, MAC].\n_Required._",
          "enum": [
            "WIN",
            "WIN64",
            "LINUX",
            "MAC"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        },
        "productType": {
          "description": "Product type of the client package being downloaded.\n_Values_: [CRASH_PLAN, CRASH_PLAN_PRO, CRASH_PLAN_PRO_E, CODE42_CRASH_PLAN, CRASH_PLAN_SMB, CODE42].\n_Required._",
          "enum": [
            "CRASH_PLAN",
            "CRASH_PLAN_PRO",
            "CRASH_PLAN_PRO_E",
            "CODE42_CRASH_PLAN",
            "CRASH_PLAN_SMB",
            "CODE42"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        }
      },
      "required": [
        "buildNumber",
        "clientVersion",
        "os",
        "productType"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ClientPackageRecordData": {
      "properties": {
        "buildNumber": {
          "description": "Build number of the client installer package.\n_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "clientPackageRecordUid": {
          "description": "Unique identifier of the client installer package record.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "clientProductVersion": {
          "description": "Human-readable version of the client installer package.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "clientVersion": {
          "description": "Long version of the client installer package.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "md5": {
          "description": "MD5 checksum for this client installer package, 32 hexadecimal characters.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "md5FilePath": {
          "description": "Relative path to request the package's md5 file from the web server. Does not include server host name or port number.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "os": {
          "description": "Operating system of the client installer package.\n_Values_: [WIN, WIN64, LINUX, MAC].\n_Required._",
          "enum": [
            "WIN",
            "WIN64",
            "LINUX",
            "MAC"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        },
        "packageFilePath": {
          "description": "Relative path to request the package from the web server. Does not include server host name or port number.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "productType": {
          "description": "Product type for this client installer package.\n_Values_: [CRASH_PLAN, CRASH_PLAN_PRO, CRASH_PLAN_PRO_E, CODE42_CRASH_PLAN, CRASH_PLAN_SMB, CODE42].\n_Required._",
          "enum": [
            "CRASH_PLAN",
            "CRASH_PLAN_PRO",
            "CRASH_PLAN_PRO_E",
            "CODE42_CRASH_PLAN",
            "CRASH_PLAN_SMB",
            "CODE42"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        }
      },
      "required": [
        "buildNumber",
        "clientPackageRecordUid",
        "clientProductVersion",
        "clientVersion",
        "md5",
        "md5FilePath",
        "os",
        "packageFilePath",
        "productType"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ClientPackageRecordQueryData": {
      "properties": {
        "clientPackageRecords": {
          "description": "Array of client package records.\n_List_\n_Required._",
          "items": {
            "$ref": "#/definitions/ClientPackageRecordData"
          },
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        }
      },
      "required": [
        "clientPackageRecords"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ClientPackageRecord_Add": {
      "description": "Add a client installer package record.",
      "properties": {
        "buildNumber": {
          "description": "Build number of the client installer package.\n_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "clientProductVersion": {
          "description": "Human readable-version of the client installer package.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "clientVersion": {
          "description": "Long version of the client installer package.\n_Format_: int64\n_Required._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "md5": {
          "description": "MD5 checksum for this client installer package, 32 hexadecimal characters.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "md5FilePath": {
          "description": "Relative path to request the package's md5 file from the web server. Does not include server host name or port number.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "os": {
          "description": "Operating system of the client installer package.\n_Values_: [WIN, WIN64, LINUX, MAC].\n_Required._",
          "enum": [
            "WIN",
            "WIN64",
            "LINUX",
            "MAC"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        },
        "packageFilePath": {
          "description": "Relative path to request the package from the web server. Does not include server host name or port number.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "productType": {
          "description": "Product type for this client installer package.\n_Values_: [CRASH_PLAN, CRASH_PLAN_PRO, CRASH_PLAN_PRO_E, CODE42_CRASH_PLAN, CRASH_PLAN_SMB, CODE42].\n_Required._",
          "enum": [
            "CRASH_PLAN",
            "CRASH_PLAN_PRO",
            "CRASH_PLAN_PRO_E",
            "CODE42_CRASH_PLAN",
            "CRASH_PLAN_SMB",
            "CODE42"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        }
      },
      "required": [
        "buildNumber",
        "clientProductVersion",
        "clientVersion",
        "md5",
        "md5FilePath",
        "os",
        "packageFilePath",
        "productType"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ClientPackageRecord_Remove": {
      "description": "Delete a record regarding a client installer package.",
      "properties": {
        "id": {
          "description": "_Format_: int64\n_Required._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "id"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "CloudAuthority_Add": {
      "properties": {
        "notifySettings": {
          "$ref": "#/definitions/NotifySettingsValues"
        },
        "server": {
          "$ref": "#/definitions/ServerValues"
        },
        "serverSettings": {
          "$ref": "#/definitions/ServerSettingsValues"
        }
      },
      "required": [
        "notifySettings",
        "server",
        "serverSettings"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "CloudDestination": {
      "description": "A licensed cloud destination along with the seats and storage in use.",
      "properties": {
        "bytesInUse": {
          "description": "Bytes of storage in use at the destination.",
          "format": "int64",
          "type": "integer"
        },
        "destinationGuid": {
          "description": "The destination's identifier.",
          "format": "int64",
          "type": "integer"
        },
        "destinationName": {
          "description": "The destination's name.",
          "type": "string"
        },
        "seatsInUse": {
          "description": "Seats in use at the destination.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "CloudLicense": {
      "description": "A license to backup to a cloud destination. A cloud seat license must have a seat count, start date, and end dates. A tier product must be associated to determine total storage allowance at the destination.",
      "properties": {
        "active": {
          "description": "Whether the license is in effect (by current date), and any other business criteria.",
          "type": "boolean"
        },
        "destinationGuid": {
          "description": "The destination to which users can backup under this license.",
          "format": "int64",
          "type": "integer"
        },
        "endDate": {
          "description": "The last date the license is in effect.",
          "format": "date",
          "type": "string"
        },
        "seatsPurchased": {
          "description": "The number of users (aka seats) permitted to backup to the cloud destination under this license.",
          "format": "int32",
          "type": "integer"
        },
        "startDate": {
          "description": "The first date the license is in effect.",
          "format": "date",
          "type": "string"
        },
        "storageAllotmentBytes": {
          "description": "Seats-purchased x storage-allotment-per-seat: empty = unlimited.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "CloudLicenses": {
      "description": "A collection of cloud destination seat licenses and the current total seats in use.",
      "properties": {
        "cloudDestinations": {
          "description": "Cloud destinations and their usage. May include unlicensed used destinations. Licensed destinations will have an associated license with the guid of the destination.",
          "items": {
            "$ref": "#/definitions/CloudDestination"
          },
          "type": "array"
        },
        "licenses": {
          "description": "Cloud storage licenses.",
          "items": {
            "$ref": "#/definitions/CloudLicense"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ColdStorageEntry": {
      "properties": {
        "archiveBytes": {
          "format": "int64",
          "type": "integer"
        },
        "archiveGuid": {
          "type": "string"
        },
        "archiveType": {
          "type": "string"
        },
        "fcuId": {
          "format": "int64",
          "type": "integer"
        },
        "orgId": {
          "format": "int32",
          "type": "integer"
        },
        "orgName": {
          "type": "string"
        },
        "purgeDate": {
          "type": "string"
        },
        "serverName": {
          "type": "string"
        },
        "sourceComputerId": {
          "format": "int64",
          "type": "integer"
        },
        "sourceComputerName": {
          "type": "string"
        },
        "sourceComputerOsHostname": {
          "type": "string"
        },
        "sourceComputerService": {
          "type": "string"
        },
        "sourceUserEmail": {
          "type": "string"
        },
        "sourceUserFirstName": {
          "type": "string"
        },
        "sourceUserId": {
          "format": "int32",
          "type": "integer"
        },
        "sourceUserLastName": {
          "type": "string"
        },
        "sourceUserUsername": {
          "type": "string"
        },
        "storePointId": {
          "format": "int32",
          "type": "integer"
        },
        "storePointName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ColdStorageResponse": {
      "properties": {
        "coldStorageRows": {
          "items": {
            "$ref": "#/definitions/ColdStorageEntry"
          },
          "type": "array"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "CommandResult": {
      "properties": {
        "commandGuid": {
          "description": "The GUID of the command.\n_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "result": {
          "description": "The result of executing the command.\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "success": {
          "description": "Indicates if the execution of the command was successfull.\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "commandGuid",
        "success"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ComplianceMode": {
      "properties": {
        "enabled": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ComputerAdoptionParameters": {
      "description": "Computer Adoption input parameters",
      "properties": {
        "adoptedGuid": {
          "description": "The adopted guid. When successful, this guid will remain active, but refer to a different physical device than before.",
          "format": "int64",
          "type": "integer"
        },
        "adoptingGuid": {
          "description": "The pre-adoption guid of the adopting computer. When successful, the device currently identified by this guid will change its guid, and it pre-adoption guid will be deactivated in the database.",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "adoptedGuid",
        "adoptingGuid"
      ],
      "type": "object"
    },
    "ComputerAdoptionResponse": {
      "description": "Computer Adoption Result",
      "properties": {
        "message": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ComputerDeactivation_Remove": {
      "description": "Activate a previously deactivated device.  Backups do *not* restart automatically.",
      "properties": {
        "id": {
          "description": "_Format_: int64\n_Required._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "id"
      ],
      "type": "object",
      "x-code42-visibility": "public",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ComputerDeactivation_Update": {
      "description": "Deactivate a device. Backup stops. Archive(s) go to cold storage.",
      "properties": {
        "id": {
          "description": "_Format_: int64\n_Required._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "id"
      ],
      "type": "object",
      "x-code42-visibility": "public",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ComputerGuid": {
      "type": "object"
    },
    "ComputerHistoryLogResponse": {
      "description": "Computer history log information",
      "type": "object"
    },
    "ConnectionHistory": {
      "description": "A history of the status of connection attempts",
      "properties": {
        "date": {
          "description": "The date of the connection attempt",
          "format": "date-time",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the status",
          "type": "string"
        },
        "status": {
          "description": "The status of the connection attempt",
          "enum": [
            "Connected",
            "HostUnavailable",
            "UnAuthenticated",
            "Unknown",
            "NoRequest"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "ContentDisposition": {
      "properties": {
        "parameters": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "creationDate": {
          "format": "date-time",
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "modificationDate": {
          "format": "date-time",
          "type": "string"
        },
        "readDate": {
          "format": "date-time",
          "type": "string"
        },
        "size": {
          "format": "int64",
          "type": "integer"
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CoreRuntime": {
      "properties": {
        "asyncPoolSize": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "CreateApiClientRequest": {
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "productRoles": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "CreateApiClientResponse": {
      "properties": {
        "clientId": {
          "type": "string"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "lastRedeemedDate": {
          "format": "date-time",
          "type": "string"
        },
        "modifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "productRoles": {
          "items": {
            "$ref": "#/definitions/ProductRoleResponse"
          },
          "type": "array",
          "uniqueItems": true
        },
        "secret": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CreateBody": {
      "properties": {
        "tenantUid": {
          "$ref": "#/definitions/TenantUid"
        }
      },
      "type": "object"
    },
    "CreateMatterRequest": {
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "policyId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CreateOrgRequest": {
      "properties": {
        "notes": {
          "description": "The notes of the org to create.",
          "type": "string"
        },
        "orgExtRef": {
          "description": "The external reference of the org to create.",
          "type": "string"
        },
        "orgName": {
          "description": "The name of the org to create.",
          "type": "string"
        },
        "parentOrgGuid": {
          "description": "The parent ID of the org to create.",
          "type": "string"
        }
      },
      "required": [
        "orgName"
      ],
      "type": "object"
    },
    "CreateOrgRequestInternal": {
      "properties": {
        "notes": {
          "description": "Optional descriptive information.",
          "type": "string"
        },
        "orgExtRef": {
          "description": "Optional external reference information, such as a serial number, asset tag, employee ID, or help desk issue ID.",
          "type": "string"
        },
        "orgName": {
          "description": "Name of the organization.",
          "type": "string"
        },
        "parentOrgGuid": {
          "description": "OrgGuid for the parent organization",
          "type": "string"
        }
      },
      "required": [
        "orgName"
      ],
      "type": "object"
    },
    "CreateOrgResponseInternal": {
      "properties": {
        "active": {
          "description": "True means the org will show up on reports, etc.",
          "type": "boolean"
        },
        "blocked": {
          "description": "True means users will continue backing up, but restores and logins are disabled.",
          "type": "boolean"
        },
        "classification": {
          "description": "Classification is always BASIC.",
          "type": "string"
        },
        "configInheritanceCounts": {
          "additionalProperties": {
            "description": "Summary statistics for the org config inheritance hierarchy.",
            "format": "int32",
            "type": "integer"
          },
          "description": "Summary statistics for the org config inheritance hierarchy.",
          "type": "object"
        },
        "creationDate": {
          "description": "Date and time this org was created.",
          "type": "string"
        },
        "customConfig": {
          "description": "Does this org have custom config?",
          "type": "boolean"
        },
        "deactivationDate": {
          "description": "Date and time this org was deactivated. Blank if org is active.",
          "type": "string"
        },
        "hierarchyCounts": {
          "additionalProperties": {
            "description": "Summary statistics for the org hierarchy. Not currently populated by this request.",
            "format": "int32",
            "type": "integer"
          },
          "description": "Summary statistics for the org hierarchy. Not currently populated by this request.",
          "type": "object"
        },
        "modificationDate": {
          "description": "Date and time this org was last modified.",
          "type": "string"
        },
        "notes": {
          "description": "Optional descriptive information.",
          "type": "string"
        },
        "orgExtRef": {
          "description": "Optional external reference information, such as a serial number, asset tag, employee ID, or help desk issue ID.",
          "type": "string"
        },
        "orgGuid": {
          "description": "The immutable globally unique identifier for this organization.",
          "type": "string"
        },
        "orgId": {
          "description": "The ID for this organization. (Use orgUid instead.)",
          "format": "int32",
          "type": "integer",
          "deprecated": true
        },
        "orgName": {
          "description": "Name of the organization.",
          "type": "string"
        },
        "orgUid": {
          "description": "The UID for this organization.",
          "type": "string"
        },
        "parentOrgGuid": {
          "description": "The orgGuid for the parent organization.",
          "type": "string"
        },
        "parentOrgId": {
          "description": "The orgId for the parent organization. (Use parentOrgUid instead.)",
          "format": "int32",
          "type": "integer",
          "deprecated": true
        },
        "parentOrgUid": {
          "description": "The orgUid for the parent organization.",
          "type": "string"
        },
        "registrationKey": {
          "description": "This org's registration key.",
          "type": "string"
        },
        "reporting": {
          "$ref": "#/definitions/OrgReportingDataInternal"
        },
        "settings": {
          "$ref": "#/definitions/OrgSettingsDataInternal"
        },
        "settingsInherited": {
          "$ref": "#/definitions/OrgSettingsDataInternal"
        },
        "settingsSummary": {
          "$ref": "#/definitions/OrgSettingsDataInternal"
        },
        "status": {
          "description": "Can be a combination of Blocked and Active/Deactivated.",
          "type": "string"
        },
        "type": {
          "description": "Type is always ENTERPRISE.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CreatePolicyRequest": {
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CreatorPrincipalResponse": {
      "properties": {
        "displayName": {
          "type": "string"
        },
        "principalId": {
          "type": "string"
        },
        "type": {
          "enum": [
            "USER",
            "API_KEY",
            "DEVICE",
            "SERVICE",
            "EMPLOYEE"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "CreatorUserResponse": {
      "properties": {
        "userId": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CustomerAccountInformation": {
      "description": "Information about a customer.",
      "properties": {
        "name": {
          "type": "string"
        },
        "registrationKey": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CustomerCloudAdminRequest": {
      "description": "The tenant's initial CustomerCloudAdmin user to create.",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CustomerLabelBody": {
      "description": "Customer Label",
      "type": "object"
    },
    "CustomerLicenseResponse": {
      "description": "Tiered licensing information for a customer",
      "properties": {
        "addOnLicenses": {
          "description": "AddOn license information.",
          "items": {
            "$ref": "#/definitions/AddOnLicense"
          },
          "type": "array"
        },
        "backupSeatsInUse": {
          "description": "The number of users that are consuming a backup license.",
          "format": "int32",
          "type": "integer"
        },
        "cloudLicenses": {
          "$ref": "#/definitions/CloudLicenses"
        },
        "currentServerDate": {
          "description": "The server's current date. Can be used as a reference point to extrapolate license expiration.",
          "format": "date",
          "type": "string"
        },
        "hasLicenseAlert": {
          "description": "Whether this installation has a licensing alert. For example, a license will expire soon and has no replacement.",
          "type": "boolean"
        },
        "hasLicenseUpdateAlert": {
          "description": "Deprecated - Alert does not apply to cloud environments.",
          "type": "boolean"
        },
        "lastUpdate": {
          "description": "When licenses were last updated (either from license server or license file upload).",
          "format": "date-time",
          "type": "string"
        },
        "perpetualLicenses": {
          "$ref": "#/definitions/PerpetualLicenses"
        },
        "productDescriptions": {
          "description": "A list of keys to localizable extra product names (extra=add-ons, support, etc)(by convention the keys are product sku).",
          "items": {
            "description": "A list of keys to localizable extra product names (extra=add-ons, support, etc)(by convention the keys are product sku).",
            "type": "string"
          },
          "type": "array"
        },
        "productName": {
          "description": "A key to localizable the tier name (by convention the tier-product's sku).",
          "type": "string"
        },
        "regKey": {
          "description": "The registration key of the org to which the license information applies.",
          "type": "string"
        },
        "siteCloudLicenses": {
          "$ref": "#/definitions/SiteCloudLicenses"
        },
        "siteUserLicenses": {
          "$ref": "#/definitions/SiteUserLicenses"
        },
        "supportLicenses": {
          "description": "Support license information.",
          "items": {
            "$ref": "#/definitions/SupportLicense"
          },
          "type": "array"
        },
        "tierLicenses": {
          "description": "Tier license information.",
          "items": {
            "$ref": "#/definitions/TierLicense"
          },
          "type": "array"
        },
        "userLicenses": {
          "$ref": "#/definitions/UserLicenses"
        },
        "usingLicenseServer": {
          "description": "Whether or not this installation is using the Code42 public license server to regularly update its licenses.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "CustomerResponse": {
      "properties": {
        "deploymentModel": {
          "description": "The type of deployment the customer has signed up for. May not be available for all customers.\nDenotes how the customer's environment is configured.\n_Values_: [PUBLIC, HYBRID, PRIVATE].\n_Optional._",
          "enum": [
            "PUBLIC",
            "HYBRID",
            "PRIVATE"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        },
        "name": {
          "description": "The name of the customer.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "registrationKey": {
          "description": "Registration key that uniquely identifies the customer.\nis not blank\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "tenantUid": {
          "description": "Tenant UID that uniquely identifies the customer in the cloud.\nis not blank\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "name",
        "registrationKey",
        "tenantUid"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "DataKey": {
      "properties": {
        "archiveKeyVersion": {
          "description": "The archive key version",
          "enum": [
            "V1",
            "V2"
          ],
          "type": "string"
        },
        "creationDate": {
          "description": "The date the key was created",
          "format": "date-time",
          "type": "string"
        },
        "hash": {
          "description": "The key hash",
          "items": {
            "description": "The key hash",
            "format": "byte",
            "type": "string"
          },
          "type": "array"
        },
        "keyId": {
          "description": "The key id",
          "type": "string"
        },
        "rawKey": {
          "description": "The raw key",
          "items": {
            "description": "The raw key",
            "format": "byte",
            "type": "string"
          },
          "type": "array"
        },
        "salt": {
          "description": "The key salt",
          "items": {
            "description": "The key salt",
            "format": "byte",
            "type": "string"
          },
          "type": "array"
        },
        "securityKeyType": {
          "description": "The security key type",
          "enum": [
            "AccountPassword",
            "PrivatePassword",
            "CustomKey"
          ],
          "type": "string"
        },
        "userPrincipalId": {
          "description": "The user principal identifier of the user the key belongs to",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DeactivationJob": {
      "properties": {
        "jobId": {
          "description": "_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        }
      },
      "required": [
        "jobId"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "DefaultSecretStore": {
      "description": "Information about the new secret store.",
      "properties": {
        "config": {
          "description": "The configuration string used by the secret store.",
          "example": "{\"url\":\"https://private.dev.code42.com:8200\",\"systemJKS\":\"/u3+7QAAAAIAAAABAAAAAQAIa2V5YWxpYXMA\"}",
          "type": "string"
        },
        "kind": {
          "description": "The kind of secret store to create.",
          "example": "vault",
          "type": "string"
        },
        "missingRequiredArguments": {
          "type": "boolean"
        }
      },
      "required": [
        "config",
        "kind"
      ],
      "title": "DefaultSecretStore",
      "type": "object"
    },
    "DefaultSecretStoreResource": {
      "type": "object"
    },
    "DelayTableListing": {
      "properties": {
        "appProductVersion": {
          "description": "_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "delay": {
          "description": "_Format_: int32\n_Optional._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "exceptionType": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "orgId": {
          "description": "_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "orgName": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "orgType": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "scheduledDate": {
          "description": "_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "version": {
          "description": "_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "exceptionType",
        "orgId",
        "orgName",
        "orgType"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "DelayTableListings": {
      "properties": {
        "entries": {
          "description": "_List_\n_Required._",
          "items": {
            "$ref": "#/definitions/DelayTableListing"
          },
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "totalPages": {
          "description": "_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        }
      },
      "required": [
        "entries",
        "totalPages"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "DeleteAllBackupDataResponse": {
      "properties": {
        "archiveCount": {
          "format": "int32",
          "type": "integer"
        },
        "archives": {
          "items": {
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        },
        "computerCount": {
          "format": "int32",
          "type": "integer"
        },
        "computers": {
          "items": {
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        },
        "dryRun": {
          "type": "boolean"
        },
        "holdCount": {
          "format": "int32",
          "type": "integer"
        },
        "holds": {
          "items": {
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        },
        "orgDestinationCount": {
          "format": "int32",
          "type": "integer"
        },
        "orgDestinations": {
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "DeploymentPackageGetResponse": {
      "description": "A deployment package.",
      "properties": {
        "addressHidden": {
          "description": "Whether to hide the address and not display it at all.",
          "type": "boolean"
        },
        "addressLocked": {
          "description": "Whether to keep the address locked and unchangeable on the registration screen.",
          "type": "boolean"
        },
        "deploymentPolicy": {
          "$ref": "#/definitions/DeploymentPolicyResponse"
        },
        "primaryAddress": {
          "description": "The authority primary address clients should connect to for registration purposes.",
          "type": "string"
        },
        "publicTransportKey": {
          "description": "The public transport key used to communicate with the authority (base64 encoded).",
          "type": "string"
        },
        "secondaryAddress": {
          "description": "The authority secondary address clients should connect to for registration purposes.",
          "type": "string"
        }
      },
      "title": "DeploymentPackage",
      "type": "object"
    },
    "DeploymentPolicyGetMultipleResponse": {
      "description": "A collection of deployment policies.",
      "properties": {
        "deploymentPolicies": {
          "description": "The deployment policies.",
          "items": {
            "$ref": "#/definitions/ExpandedDeploymentPolicyResponse"
          },
          "type": "array"
        }
      },
      "title": "DeploymentPolicyGetMultipleResponse",
      "type": "object"
    },
    "DeploymentPolicyResponse": {
      "description": "A deployment policy",
      "properties": {
        "autoLaunch": {
          "description": "If true, clients will automatically launch the UI.",
          "type": "boolean"
        },
        "autoRegister": {
          "description": "If true, clients will automatically register or login based on the username that they calculate via the script; if false, clients will remain sitting at the register/login screen, unauthenticated.",
          "type": "boolean"
        },
        "creationDate": {
          "description": "When this policy was created.",
          "format": "date-time",
          "type": "string"
        },
        "customLinuxUserScript": {
          "description": "A script to be executed by Linux clients to derive the endpoint's user name to be used in CrashPlan.",
          "type": "string"
        },
        "customMacUserScript": {
          "description": "A script to be executed by Mac clients to derive the endpoint's user name to be used in CrashPlan.",
          "type": "string"
        },
        "customWindowsUserScript": {
          "description": "A script to be executed by Windows clients to derive the endpoint's user name to be used in CrashPlan.",
          "type": "string"
        },
        "linuxUserScriptOption": {
          "description": "Preset option for the script used by Linux clients to derive the endpoint's user name to be used in CrashPlan",
          "enum": [
            "NONE",
            "CUSTOM_SCRIPT"
          ],
          "type": "string"
        },
        "macUserScriptOption": {
          "description": "Preset option for the script used by Mac clients to derive the endpoint's user name to be used in CrashPlan",
          "enum": [
            "NONE",
            "CUSTOM_SCRIPT",
            "LAST_LOGGED_IN"
          ],
          "type": "string"
        },
        "modificationDate": {
          "description": "When this policy was last modified.",
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "description": "The name of this deployment policy.",
          "type": "string"
        },
        "orgId": {
          "description": "The ID of the org that this policy registers into.",
          "format": "int32",
          "type": "integer"
        },
        "policyUid": {
          "description": "Unique ID of this deployment policy.",
          "type": "string"
        },
        "useProxy": {
          "description": "If true, clients will use the proxy (if any) configured for their Org when obtaining the deployment package.",
          "type": "boolean"
        },
        "windowsUserScriptOption": {
          "description": "Preset option for the script used by Windows clients to derive the endpoint's user name to be used in CrashPlan",
          "enum": [
            "NONE",
            "CUSTOM_SCRIPT",
            "LAST_LOGGED_IN"
          ],
          "type": "string"
        }
      },
      "title": "DeploymentPolicy",
      "type": "object"
    },
    "DeploymentPropertiesResponse": {
      "description": "Property strings to enforce a deployment policy.",
      "properties": {
        "linux": {
          "description": "Returns arguments for install.sh that enforce the deployment policy.",
          "type": "string"
        },
        "mac": {
          "description": "Returns arguments suitable for inclusion in a deploy.properties file that enforce the deployment policy.",
          "type": "string"
        },
        "win": {
          "description": "Returns arguments for Msiexec that enforce the deployment policy.",
          "type": "string"
        }
      },
      "title": "DeploymentProperties",
      "type": "object"
    },
    "DeploymentSecret_Delete": {
      "properties": {
        "secret": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "secret"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "DeploymentSecret_Invalidate": {
      "properties": {
        "secret": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "secret"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "DeploymentSecret_Reactivate": {
      "properties": {
        "secret": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "secret"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "DeploymentSecret_SetExpiration": {
      "properties": {
        "expirationInDays": {
          "description": "_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        }
      },
      "required": [
        "expirationInDays"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "DestinationGuid": {
      "type": "object"
    },
    "DeviceArchivePair": {
      "properties": {
        "archiveGuid": {
          "description": "Guid for the archive\nis not empty\ndigits\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "deviceGuid": {
          "description": "Guid for the device\nis not empty\ndigits\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "archiveGuid",
        "deviceGuid"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "DeviceArchiveResponse": {
      "properties": {
        "archives": {
          "description": "list of archives belonging to the device\n_List_\n_Required._",
          "items": {
            "$ref": "#/definitions/DeviceArchiveResponseEntry"
          },
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        }
      },
      "required": [
        "archives"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "DeviceArchiveResponseEntry": {
      "properties": {
        "archiveGuid": {
          "description": "GUID of the archive\nis not empty\ndigits\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "destinationGuid": {
          "description": "Destination where the archive is stored\nis not empty\ndigits\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "storageNodeUrl": {
          "description": "Storage node where the archive is stored\nis not blank\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "archiveGuid",
        "destinationGuid",
        "storageNodeUrl"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "DeviceAuthResult": {
      "properties": {
        "authorizedForCognito": {
          "description": "Authorization through this resource is meant to provide a way for STS to grant an endpoint an AWS cognito token.\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "tenant": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "userName": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "userUid": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "authorizedForCognito",
        "tenant",
        "userName",
        "userUid"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "DeviceAuth_AuthorizeForCognito": {
      "description": "Returns true with the owning tenant if the device (by guid) is authorized with the system given the proper loginKey. False if inactive.",
      "properties": {
        "deviceGuid": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "loginKey": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "deviceGuid",
        "loginKey"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "DeviceInventory": {
      "properties": {
        "additionalInventoryAsJson": {
          "description": "_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "deviceName": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "os": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "osArch": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "osVersion": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "deviceName",
        "os",
        "osArch",
        "osVersion"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "DeviceListResponse": {
      "properties": {
        "devices": {
          "items": {
            "$ref": "#/definitions/DeviceResponse"
          },
          "type": "array"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "DevicePackage_Add": {
      "description": "Add manifest files",
      "properties": {
        "manifestUrls": {
          "description": "_List_ (Must have at least one entry.)\n_Required._",
          "items": {
            "description": "_Required._",
            "type": "string",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "minItems": 1,
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        }
      },
      "required": [
        "manifestUrls"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "DevicePublishQueueStatusResponse": {
      "properties": {
        "deviceCount": {
          "description": "Number of devices in queue.\n_Format_: int64\n_Required._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "deviceCount"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "DeviceResponse": {
      "description": "A device's details.",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "address": {
          "type": "string"
        },
        "alertState": {
          "format": "int32",
          "type": "integer"
        },
        "blocked": {
          "type": "boolean"
        },
        "build": {
          "format": "int64",
          "type": "integer"
        },
        "creationDate": {
          "type": "string"
        },
        "deviceId": {
          "type": "string"
        },
        "externalReferenceInfo": {
          "type": "string"
        },
        "lastConnected": {
          "type": "string"
        },
        "legacyDeviceId": {
          "type": "string"
        },
        "legacyOrgId": {
          "type": "string"
        },
        "legacyUserId": {
          "type": "string"
        },
        "loginDate": {
          "type": "string"
        },
        "modificationDate": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "orgId": {
          "type": "string"
        },
        "osArch": {
          "type": "string"
        },
        "osHostname": {
          "type": "string"
        },
        "osName": {
          "type": "string"
        },
        "osVersion": {
          "type": "string"
        },
        "remoteAddress": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "timeZone": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "DeviceSetting_Remove": {
      "description": "Delete device-level settings.",
      "properties": {
        "guid": {
          "description": "_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "keys": {
          "description": "Comma-separated list of keys identifying settings to delete.\n_List_ (Must have at least one entry.)\n_Required._",
          "items": {
            "description": "_Required._",
            "type": "string",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "minItems": 1,
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        }
      },
      "required": [
        "guid",
        "keys"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "DeviceSetting_Update": {
      "description": "Create or update device-level settings.",
      "properties": {
        "guid": {
          "description": "_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "packets": {
          "description": "_List_ (Must have at least one entry.)\n_Required._",
          "items": {
            "$ref": "#/definitions/SettingPacket"
          },
          "minItems": 1,
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        }
      },
      "required": [
        "guid",
        "packets"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "DeviceStatusCountResponse": {
      "properties": {
        "criticalCount": {
          "description": "_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "totalCount": {
          "description": "_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "warningCount": {
          "description": "_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        }
      },
      "required": [
        "criticalCount",
        "totalCount",
        "warningCount"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "DeviceUpgrade_DeleteAvailability": {
      "description": "Delete device upgrade availability date for a version.",
      "properties": {
        "system": {
          "default": false,
          "description": "Indicates if availability should be removed at the system level. Requires system admin permissions.\n_Default Value_: false",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "tenantUid": {
          "description": "Tenant UID that uniquely identifies the customer in the cloud. Requires system admin permissions.\nis not blank\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "version": {
          "description": "The version to delete the availability date for.\nis not blank\nhas length between 3 and 24, inclusive\nDevice version and build\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "version"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "DeviceUpgrade_RemoveDelay": {
      "description": "Used to remove a delay exception. No error is returned if no entry for the Org existed to begin with",
      "properties": {
        "orgId": {
          "description": "The ID of the Org the delay is to be deleted for.\n_Format_: int32\n_Optional._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "override": {
          "default": false,
          "description": "_Default Value_: false",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "DeviceUpgrade_RemoveOrgUpgradeDate": {
      "properties": {
        "orgId": {
          "description": "The organization ID that the upgrade date will be removed for.\n_Format_: int32\n_Optional._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "serviceType": {
          "description": "code42 or code42aat or combined\n_Values_: [code42aat, code42, combined].\n_Required._",
          "enum": [
            "code42aat",
            "code42",
            "combined"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        },
        "version": {
          "description": "The version to remove the upgrade date for.\nis not blank\nhas length between 5 and 11, inclusive\nReadable product version\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "serviceType",
        "version"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "DeviceUpgrade_RemoveUpgradeBlock": {
      "description": "Removes the given versions upgrade block for the provided user's FHPO.",
      "properties": {
        "serviceType": {
          "description": "code42 or code42aat or combined\n_Values_: [code42aat, code42, combined].\n_Required._",
          "enum": [
            "code42aat",
            "code42",
            "combined"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        },
        "version": {
          "description": "The version to remove the upgrade block for.\nis not blank\nhas length between 5 and 11, inclusive\nReadable product version\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "serviceType",
        "version"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "DeviceUpgrade_SetAvailability": {
      "description": "Set device upgrade availability dates for a version.",
      "properties": {
        "date": {
          "description": "The date when the version will be made available\n_Format_: date\n_Required._",
          "format": "date",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "system": {
          "default": false,
          "description": "Indicates if availability should be set at the system level. Requires system admin permissions.\n_Default Value_: false",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "tenantUid": {
          "description": "Tenant UID that uniquely identifies the customer in the cloud. Requires system admin permissions.\nis not blank\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "version": {
          "description": "The version to set the availability date for.\nis not blank\nhas length between 3 and 24, inclusive\nDevice version and build\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "date",
        "version"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "DeviceUpgrade_SetDelay": {
      "description": "Set the global delay for a tenant or organization. Not specifying Org ID will set the value on the Tenant level or<br>    or set the System level default, depending on the caller's role",
      "properties": {
        "delay": {
          "description": "_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "orgId": {
          "description": "The ID of the Org the delay is to be set for.\n_Format_: int32\n_Optional._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "override": {
          "default": false,
          "description": "_Default Value_: false",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "delay"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "DeviceUpgrade_SetMaxDelay": {
      "description": "Set the global maximum delay for the current tenant. Any delays already configured that would be greater than the<br>    new maximum delay will be lowered to the new maximum. Can only be accessed by support users.",
      "properties": {
        "maxDelay": {
          "description": "_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        }
      },
      "required": [
        "maxDelay"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "DeviceUpgrade_SetOrgUpgradeDate": {
      "properties": {
        "date": {
          "description": "The date the version will become available for upgrade.\n_Format_: date\n_Required._",
          "format": "date",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "orgId": {
          "description": "The organization ID that the upgrade date will be set for.\n_Format_: int32\n_Optional._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "serviceType": {
          "description": "code42 or code42aat or combined\n_Values_: [code42aat, code42, combined].\n_Required._",
          "enum": [
            "code42aat",
            "code42",
            "combined"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        },
        "version": {
          "description": "The version to set the upgrade date for.\nis not blank\nhas length between 5 and 11, inclusive\nReadable product version\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "date",
        "serviceType",
        "version"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "DeviceUpgrade_SetUpgradeBlock": {
      "description": "Blocks devices in the provided user's FHPO from upgrading to the given version.",
      "properties": {
        "serviceType": {
          "description": "code42 or code42aat or combined\n_Values_: [code42aat, code42, combined].\n_Required._",
          "enum": [
            "code42aat",
            "code42",
            "combined"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        },
        "version": {
          "description": "The version to set the upgrade block for.\nis not blank\nhas length between 5 and 11, inclusive\nReadable product version\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "serviceType",
        "version"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "DeviceUpgrade_SetUpgradeBlockLimit": {
      "description": "Sets the number of upgrade blocks an organization can set.<br>\tThis will set the limit for the purchasing org of the logged in user, which must be a Code42 Support User",
      "properties": {
        "limit": {
          "description": "The number of upgrade blocks the organization can set.\n_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "serviceType": {
          "description": "code42 or code42aat or combined\n_Values_: [code42aat, code42, combined].\n_Required._",
          "enum": [
            "code42aat",
            "code42",
            "combined"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        }
      },
      "required": [
        "limit",
        "serviceType"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "DeviceUpgrade_UpdateChannelUpgradeBlocks": {
      "description": "Updates the state of all channel upgrade blocks for a given tenant",
      "properties": {
        "blockTable": {
          "description": "Channel upgrade blocks to set\n_List_ (Must have at least one entry.)\n_Required._",
          "items": {
            "$ref": "#/definitions/ChannelUpgradeBlockTableEntry"
          },
          "minItems": 1,
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "serviceType": {
          "description": "code42 or code42aat or combined\n_Values_: [code42aat, code42, combined].\n_Required._",
          "enum": [
            "code42aat",
            "code42",
            "combined"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        }
      },
      "required": [
        "blockTable",
        "serviceType"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "DeviceUpgrade_UpgradeDevice": {
      "description": "Upgrade a device to the latest available version. Ignores any configure delays.",
      "properties": {
        "deviceGuid": {
          "description": "The GUID of the device to be upgraded.\nis not empty\ndigits\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "deviceGuid"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "DeviceUpgrade_UpgradeOrgDevices": {
      "description": "Upgrade all device within an organization to the latest available version. Ignores any configure delays.",
      "properties": {
        "orgId": {
          "description": "The organization unique identifier of the devices to be upgraded.\n_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        }
      },
      "required": [
        "orgId"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "DirectorySyncLogCsv": {
      "properties": {
        "dtos": {
          "items": {
            "$ref": "#/definitions/DirectorySyncLogResponse"
          },
          "type": "array"
        },
        "filename": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "DirectorySyncLogResponse": {
      "description": "Log information to be displayed",
      "properties": {
        "Directory Sync Logs": {
          "items": {
            "$ref": "#/definitions/DirectorySyncLogResponse"
          },
          "type": "array"
        },
        "PageNumber": {
          "format": "int32",
          "type": "integer"
        },
        "PageSize": {
          "format": "int32",
          "type": "integer"
        },
        "TotalResults": {
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "EmailTextCustomizationIdentity": {
      "properties": {
        "category": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "segment": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "category",
        "segment"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "EmailTextCustomizationUpdate": {
      "properties": {
        "category": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "content": {
          "description": "_Required._",
          "format": "string",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "segment": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "category",
        "content",
        "segment"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "EmailTextCustomizationView": {
      "properties": {
        "category": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "contentType": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "customizedContent": {
          "description": "_Optional._",
          "format": "string",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "defaultContent": {
          "description": "_Required._",
          "format": "string",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "segment": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "category",
        "contentType",
        "defaultContent",
        "segment"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "EmailTextCustomizationViewResult": {
      "properties": {
        "emailTextCustomizations": {
          "description": "_List_\n_Required._",
          "items": {
            "$ref": "#/definitions/EmailTextCustomizationView"
          },
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        }
      },
      "required": [
        "emailTextCustomizations"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "EmailTextCustomization_Remove": {
      "description": "Remove a defined text email customization. Emails will revert to using default value for the customized segment.",
      "properties": {
        "emailTextCustomizations": {
          "description": "_List_\n_Required._",
          "items": {
            "$ref": "#/definitions/EmailTextCustomizationIdentity"
          },
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        }
      },
      "required": [
        "emailTextCustomizations"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "EmailTextCustomization_Update": {
      "description": "Create or update a text email customization.",
      "properties": {
        "emailTextCustomizations": {
          "description": "_List_\n_Required._",
          "items": {
            "$ref": "#/definitions/EmailTextCustomizationUpdate"
          },
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        }
      },
      "required": [
        "emailTextCustomizations"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "EncryptedArchiveKey": {
      "properties": {
        "encryptedKey": {
          "type": "string"
        },
        "encryptionType": {
          "enum": [
            "PASSWORD_BASED",
            "RECOVERY_BASED"
          ],
          "type": "string"
        },
        "hash": {
          "$ref": "#/definitions/IDigestValue"
        },
        "recoveryQuestion": {
          "type": "string"
        },
        "type": {
          "enum": [
            "AccountPassword",
            "PrivatePassword",
            "CustomKey"
          ],
          "type": "string"
        },
        "version": {
          "enum": [
            "V1",
            "V2"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "EnterpriseCustomerLicenseData": {
      "properties": {
        "license": {
          "description": "The master license string provided to the user.\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "privateKey": {
          "description": "Base64-encoded representation of the RSA private key.\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "publicKey": {
          "description": "Base64-encoded representation of the RSA public key.\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "publicKeyDigest": {
          "description": "Base64-encoded representation of a SHA1 digest of the public key.\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "registrationKey": {
          "description": "Registration key that uniquely identifies the customer.\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "EnterpriseCustomerPurge_Deactivate": {
      "description": "Deactivates and purges a customer.",
      "properties": {
        "registrationKey": {
          "description": "Registration key that uniquely identifies the customer to deactivate.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "registrationKey"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "EnterpriseCustomer_Activate": {
      "description": "Activates a customer.",
      "properties": {
        "registrationKey": {
          "description": "Registration key that uniquely identifies the customer to activate.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "registrationKey"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "EnterpriseCustomer_Add": {
      "description": "Create a new customer.",
      "properties": {
        "company": {
          "description": "Name of the customer organization.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "countryCode": {
          "description": "Country code for customer organization.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "customerLicenseData": {
          "$ref": "#/definitions/EnterpriseCustomerLicenseData"
        },
        "email": {
          "description": "Contact's email at customer organization. This address receives confidential information about the deployment, and is the username of an administrative account if one is created.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "firstname": {
          "description": "Contact's first name at customer organization\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "lastname": {
          "description": "Contact's last name at customer organization.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "phone": {
          "description": "Contact's phone number at customer organization.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "postalCode": {
          "description": "Postal code for customer organization.\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "sendEmailToCustomer": {
          "default": false,
          "description": "Email master license key to customer contact. Default is false.\n_Default Value_: false",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "state": {
          "description": "State for customer organization.\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "tenantUid": {
          "description": "Tenant UID that uniquely identifies the customer in the cloud.\nis not blank\nhas length between 1 and 36, inclusive\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "company",
        "countryCode",
        "email",
        "firstname",
        "lastname",
        "phone"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "EnterpriseCustomer_Deactivate": {
      "description": "Deactivates a customer.",
      "properties": {
        "registrationKey": {
          "description": "Registration key that uniquely identifies the customer to deactivate.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "rerunFailedPurge": {
          "default": false,
          "description": "Attempt to re-set archive expiration date. Default is false.\n_Default Value_: false",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "registrationKey"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ExcludePatternsRequest": {
      "properties": {
        "all": {
          "description": "Exclusion patterns that apply to all operating systems\n_Set_\n_Optional._",
          "items": {
            "description": "_Required._",
            "type": "string",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "type": "array",
          "uniqueItems": true,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "linux": {
          "description": "_Set_\n_Optional._",
          "items": {
            "description": "_Required._",
            "type": "string",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "type": "array",
          "uniqueItems": true,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "macintosh": {
          "description": "_Set_\n_Optional._",
          "items": {
            "description": "_Required._",
            "type": "string",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "type": "array",
          "uniqueItems": true,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "windows": {
          "description": "_Set_\n_Optional._",
          "items": {
            "description": "_Required._",
            "type": "string",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "type": "array",
          "uniqueItems": true,
          "x-type": "OpenApiSchemaArrayDef"
        }
      },
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ExcludePatternsResponse": {
      "properties": {
        "all": {
          "description": "Exclusion patterns that apply to all operating systems\n_Set_\n_Required._",
          "items": {
            "description": "_Required._",
            "type": "string",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "type": "array",
          "uniqueItems": true,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "linux": {
          "description": "_Set_\n_Required._",
          "items": {
            "description": "_Required._",
            "type": "string",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "type": "array",
          "uniqueItems": true,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "macintosh": {
          "description": "_Set_\n_Required._",
          "items": {
            "description": "_Required._",
            "type": "string",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "type": "array",
          "uniqueItems": true,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "windows": {
          "description": "_Set_\n_Required._",
          "items": {
            "description": "_Required._",
            "type": "string",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "type": "array",
          "uniqueItems": true,
          "x-type": "OpenApiSchemaArrayDef"
        }
      },
      "required": [
        "all",
        "linux",
        "macintosh",
        "windows"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ExclusionSet": {
      "description": "OS-specific set of exclusions. The union of allOs and <user os> will be the full set of exclusions which apply to a user.",
      "properties": {
        "allOs": {
          "description": "Exclusions in this set apply to every OS.\n_Set_\n_Required._",
          "items": {
            "description": "_Required._",
            "type": "string",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "type": "array",
          "uniqueItems": true,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "linux": {
          "description": "Exclusions in this set apply to only Linux OS devices.\n_Set_\n_Required._",
          "items": {
            "description": "_Required._",
            "type": "string",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "type": "array",
          "uniqueItems": true,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "macintosh": {
          "description": "Exclusions in this set apply to only Macintosh OS devices.\n_Set_\n_Required._",
          "items": {
            "description": "_Required._",
            "type": "string",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "type": "array",
          "uniqueItems": true,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "windows": {
          "description": "Exclusions in this set apply to only Windows OS devices.\n_Set_\n_Required._",
          "items": {
            "description": "_Required._",
            "type": "string",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "type": "array",
          "uniqueItems": true,
          "x-type": "OpenApiSchemaArrayDef"
        }
      },
      "required": [
        "allOs",
        "linux",
        "macintosh",
        "windows"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ExclusionUpdateRequest": {
      "properties": {
        "existingExclusion": {
          "$ref": "#/definitions/PathExclusion"
        },
        "updatedExclusion": {
          "$ref": "#/definitions/PathExclusion"
        }
      },
      "type": "object"
    },
    "Exclusions_Update": {
      "description": "Update the set of exclusions for this org. Overwrites existing exclusion set with provided set.",
      "properties": {
        "exclusionSet": {
          "$ref": "#/definitions/ExclusionSet"
        },
        "exclusionType": {
          "description": "Type of exclusion to apply.\nType of exclusions to apply\nGLOBAL: Excludes files from backup no matter where the files are being backed up, whether to local storage (for example, an external drive) or to Code42 cloud storage.\nCLOUD: Exclude files from backup to Code42 cloud storage, but not from local storage (for example, external drives).\nUSER: Exclude file types from a backup for a user.\n_Values_: [GLOBAL, CLOUD, USER].\n_Required._",
          "enum": [
            "GLOBAL",
            "CLOUD",
            "USER"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        },
        "lock": {
          "default": false,
          "description": "Lock exclusion set for devices.\n_Default Value_: false",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "orgId": {
          "description": "_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "pushToAllOrgs": {
          "default": false,
          "description": "Push exclusion set to all orgs.\n_Default Value_: false",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "pushToInheritingOrgs": {
          "default": false,
          "description": "Push exclusion set to inheriting orgs.\n_Default Value_: false",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "regex": {
          "default": false,
          "description": "Exclusion set contains regular expressions, instead of file and folder endings.\n_Default Value_: false",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "exclusionSet",
        "exclusionType",
        "orgId"
      ],
      "type": "object",
      "x-code42-visibility": "public",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ExpandedDeploymentPolicyResponse": {
      "description": "A deployment policy",
      "properties": {
        "autoLaunch": {
          "description": "If true, clients will automatically launch the UI.",
          "type": "boolean"
        },
        "autoRegister": {
          "description": "If true, clients will automatically register or login based on the username that they calculate via the script; if false, clients will remain sitting at the register/login screen, unauthenticated.",
          "type": "boolean"
        },
        "creationDate": {
          "description": "When this policy was created.",
          "format": "date-time",
          "type": "string"
        },
        "creatorUsername": {
          "description": "The username of the user that created this policy.",
          "type": "string"
        },
        "customLinuxUserScript": {
          "description": "A script to be executed by Linux clients to derive the endpoint's user name to be used in CrashPlan.",
          "type": "string"
        },
        "customMacUserScript": {
          "description": "A script to be executed by Mac clients to derive the endpoint's user name to be used in CrashPlan.",
          "type": "string"
        },
        "customWindowsUserScript": {
          "description": "A script to be executed by Windows clients to derive the endpoint's user name to be used in CrashPlan.",
          "type": "string"
        },
        "linuxUserScriptOption": {
          "description": "Preset option for the script used by Linux clients to derive the endpoint's user name to be used in CrashPlan",
          "enum": [
            "NONE",
            "CUSTOM_SCRIPT"
          ],
          "type": "string"
        },
        "macUserScriptOption": {
          "description": "Preset option for the script used by Mac clients to derive the endpoint's user name to be used in CrashPlan",
          "enum": [
            "NONE",
            "CUSTOM_SCRIPT",
            "LAST_LOGGED_IN"
          ],
          "type": "string"
        },
        "modificationDate": {
          "description": "When this policy was last modified.",
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "description": "The name of this deployment policy.",
          "type": "string"
        },
        "orgActive": {
          "description": "The active status of the org that the policy registers into.",
          "type": "boolean"
        },
        "orgAuthLocal": {
          "description": "The org that the policy registers into is using local authentication.",
          "type": "boolean"
        },
        "orgId": {
          "description": "The ID of the org that this policy registers into.",
          "format": "int32",
          "type": "integer"
        },
        "orgName": {
          "description": "The name of the org that this policy registers into.",
          "type": "string"
        },
        "policyUid": {
          "description": "Unique ID of this deployment policy.",
          "type": "string"
        },
        "useProxy": {
          "description": "If true, clients will use the proxy (if any) configured for their Org when obtaining the deployment package.",
          "type": "boolean"
        },
        "windowsUserScriptOption": {
          "description": "Preset option for the script used by Windows clients to derive the endpoint's user name to be used in CrashPlan",
          "enum": [
            "NONE",
            "CUSTOM_SCRIPT",
            "LAST_LOGGED_IN"
          ],
          "type": "string"
        }
      },
      "title": "ExpandedDeploymentPolicyResponse",
      "type": "object"
    },
    "FedEnablementPromptShowResponse": {
      "properties": {
        "isShow": {
          "description": "Boolean as to whether the console should show the Enable FED prompt.\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "isShow"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "File": {
      "properties": {
        "acquiredFrom": {
          "items": {
            "$ref": "#/definitions/AcquiredFrom"
          },
          "title": "List of other events associated with this file. This can help determine the origin of the file.",
          "type": "array"
        },
        "archiveId": {
          "title": "Unique identifier for files identified as an archive, such as .zip files.",
          "type": "string",
          "x-nullable": true
        },
        "category": {
          "example": "Audio",
          "title": "A categorization of the file that is inferred from MIME type.",
          "type": "string",
          "x-nullable": true
        },
        "changeType": {
          "example": "CREATED",
          "title": "The action that caused the event. For example: CREATED, MODIFIED, DELETED.",
          "type": "string",
          "x-nullable": true
        },
        "classifications": {
          "items": {
            "$ref": "#/definitions/FileClassification"
          },
          "title": "Data provided by an external file classification vendor.",
          "type": "array"
        },
        "cloudDriveId": {
          "example": "RvBpZ48u2m",
          "title": "Unique identifier reported by the cloud provider for the drive containing the file at the time the event occurred.",
          "type": "string",
          "x-nullable": true
        },
        "created": {
          "example": "2020-10-27T15:16:05.369203Z",
          "format": "date-time",
          "title": "File creation timestamp as reported by the device's operating system in Coordinated Universal Time (UTC); available for Mac and Windows NTFS devices only.",
          "type": "string",
          "x-nullable": true
        },
        "directory": {
          "example": "/Users/alix/Documents/",
          "title": "The file location on the user's device; a forward or backslash must be included at the end of the filepath. Possibly null if the file event occurred on a cloud provider.",
          "type": "string",
          "x-nullable": true
        },
        "directoryId": {
          "example": [
            "1234",
            "56d78"
          ],
          "items": {
            "example": "[\"1234\",\"56d78\"]",
            "title": "Unique identifiers of the parent drives that contain the file; searching on directoryId will return events for all of the files contained in the parent drive.",
            "type": "string"
          },
          "title": "Unique identifiers of the parent drives that contain the file; searching on directoryId will return events for all of the files contained in the parent drive.",
          "type": "array"
        },
        "hash": {
          "$ref": "#/definitions/Hash"
        },
        "id": {
          "example": "PUL5zWLRrdudiJZ1OCWw",
          "title": "Unique identifier reported by the cloud provider for the file associated with the event.",
          "type": "string",
          "x-nullable": true
        },
        "mimeType": {
          "title": "The MIME type of the file. For endpoint events, if the mimeTypeByBytes differs from mimeTypeByExtension, this indicates the most likely MIME type for the file. For activity observed by a web browser, this is the only MIME type reported.",
          "type": "string",
          "x-nullable": true
        },
        "mimeTypeByBytes": {
          "example": "text/csv",
          "title": "The MIME type of the file based on its contents.",
          "type": "string",
          "x-nullable": true
        },
        "mimeTypeByExtension": {
          "example": "audio/vorbis",
          "title": "The MIME type of the file based on its extension.",
          "type": "string",
          "x-nullable": true
        },
        "modified": {
          "example": "2020-10-27T15:16:05.369203Z",
          "format": "date-time",
          "title": "File modification timestamp as reported by the device's operating system.  This only indicates changes to file contents.  Changes to file permissions, file owner, or other metadata are not reflected in this timestamp.  Date is reported in Coordinated Universal Time (UTC).",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "example": "ReadMe.md",
          "title": "The name of the file, including the file extension.",
          "type": "string",
          "x-nullable": true
        },
        "originalDirectory": {
          "example": "/Users/alix/Documents/",
          "title": "The original file location on the user's device or cloud service location; a forward or backslash must be included at the end of the filepath. Possibly null if the file event occurred on a cloud provider.",
          "type": "string",
          "x-nullable": true
        },
        "originalName": {
          "example": "ReadMe.md",
          "title": "The original name of the file, including the file extension.",
          "type": "string",
          "x-nullable": true
        },
        "owner": {
          "example": "ari.example",
          "title": "The name of the user who owns the file as reported by the device's file system.",
          "type": "string",
          "x-nullable": true
        },
        "parentArchiveId": {
          "title": "For files contained within an archive (such as a .zip file), the unique identifier for that archive; searching on parentArchiveID returns events for all files contained within that archive",
          "type": "string",
          "x-nullable": true
        },
        "passwordProtected": {
          "title": "Indicates if this file is password protected.",
          "type": "boolean",
          "x-nullable": true
        },
        "sizeInBytes": {
          "example": 256,
          "format": "int64",
          "title": "Size of the file in bytes.",
          "type": "integer",
          "x-nullable": true
        },
        "url": {
          "example": "https://example.com",
          "title": "URL reported by the cloud provider at the time the event occurred.",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "acquiredFrom",
        "classifications",
        "directoryId",
        "hash"
      ],
      "title": "Metadata about the file for this event.",
      "type": "object"
    },
    "FileVersionListing": {
      "properties": {
        "totalVersions": {
          "description": "total number of file versions found in archive\n_Format_: int64\n_Required._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "versions": {
          "description": "list of file versions (newest first, up to maxResults entries)\n_List_\n_Required._",
          "items": {
            "$ref": "#/definitions/FileVersionListingEntry"
          },
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        }
      },
      "required": [
        "totalVersions",
        "versions"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "FileVersionListingEntry": {
      "properties": {
        "archiveGuid": {
          "description": "archive that the file is stored in\nis not empty\ndigits\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "deleted": {
          "description": "indicates if this is a deleted file version\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "fileId": {
          "description": "internal FileID, use for downloading the file\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "md5": {
          "description": "md5 of the file version\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "modTime": {
          "description": "mod time of the file version (formatted as a long)\n_Format_: int64\n_Required._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "sha256": {
          "description": "sha256 of the file version (V3 archives only)\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "size": {
          "description": "size of the file version\n_Format_: int64\n_Required._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "type": {
          "description": "type of the file version (DIRECTORY, FILE, OTHER)\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "versionTimestamp": {
          "description": "unique timestamp identifying this file version\n_Format_: int64\n_Required._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "deleted",
        "fileId",
        "modTime",
        "size",
        "type",
        "versionTimestamp"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "FileVersion_ViewByArchiveAndPathList": {
      "description": "Retrieve a single file version whose contents match the provided hash.",
      "properties": {
        "archivePaths": {
          "description": "paths to search grouped by archive\n_List_\n_Required._",
          "items": {
            "$ref": "#/definitions/PathContainer"
          },
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "fileMD5": {
          "description": "md5 hash of the desired file contents\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "fileSHA256": {
          "description": "sha256 hash of the desired file contents\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "archivePaths"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "FormDataBodyPart": {
      "properties": {
        "contentDisposition": {
          "$ref": "#/definitions/ContentDisposition"
        },
        "entity": {
          "type": "object"
        },
        "formDataContentDisposition": {
          "$ref": "#/definitions/FormDataContentDisposition"
        },
        "headers": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object"
        },
        "mediaType": {
          "properties": {
            "parameters": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "subtype": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "wildcardSubtype": {
              "type": "boolean"
            },
            "wildcardType": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "messageBodyWorkers": {
          "$ref": "#/definitions/MessageBodyWorkers"
        },
        "name": {
          "type": "string"
        },
        "parameterizedHeaders": {
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/ParameterizedHeader"
            },
            "type": "array"
          },
          "type": "object"
        },
        "parent": {
          "$ref": "#/definitions/MultiPart"
        },
        "providers": {
          "type": "object"
        },
        "simple": {
          "type": "boolean"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "FormDataContentDisposition": {
      "properties": {
        "parameters": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "creationDate": {
          "format": "date-time",
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "modificationDate": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "readDate": {
          "format": "date-time",
          "type": "string"
        },
        "size": {
          "format": "int64",
          "type": "integer"
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "FormDataMultiPart": {
      "properties": {
        "bodyParts": {
          "items": {
            "$ref": "#/definitions/BodyPart"
          },
          "type": "array"
        },
        "contentDisposition": {
          "$ref": "#/definitions/ContentDisposition"
        },
        "entity": {
          "type": "object"
        },
        "fields": {
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/FormDataBodyPart"
            },
            "type": "array"
          },
          "type": "object"
        },
        "headers": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object"
        },
        "mediaType": {
          "properties": {
            "parameters": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "subtype": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "wildcardSubtype": {
              "type": "boolean"
            },
            "wildcardType": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "messageBodyWorkers": {
          "$ref": "#/definitions/MessageBodyWorkers"
        },
        "parameterizedHeaders": {
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/ParameterizedHeader"
            },
            "type": "array"
          },
          "type": "object"
        },
        "parent": {
          "$ref": "#/definitions/MultiPart"
        },
        "providers": {
          "type": "object"
        }
      },
      "type": "object"
    },
    "GetApiClientResponse": {
      "properties": {
        "clientId": {
          "type": "string"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "lastRedeemedDate": {
          "format": "date-time",
          "type": "string"
        },
        "modifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "productRoles": {
          "items": {
            "$ref": "#/definitions/ProductRoleResponse"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "GetCustodianMatterResponse": {
      "properties": {
        "matterId": {
          "type": "string"
        },
        "membershipActive": {
          "type": "boolean"
        },
        "membershipCreationDate": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "GetCustodianMattersResponse": {
      "properties": {
        "matters": {
          "items": {
            "$ref": "#/definitions/GetCustodianMatterResponse"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "GetCustodianResponse": {
      "properties": {
        "email": {
          "type": "string"
        },
        "membershipActive": {
          "type": "boolean"
        },
        "membershipCreationDate": {
          "format": "date-time",
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "GetCustodiansResponse": {
      "properties": {
        "custodians": {
          "items": {
            "$ref": "#/definitions/GetCustodianResponse"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "GetMattersResponse": {
      "properties": {
        "matters": {
          "items": {
            "$ref": "#/definitions/MatterResponse"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "GetPoliciesResponse": {
      "properties": {
        "policies": {
          "items": {
            "$ref": "#/definitions/PolicyResponse"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "GroupOrgMapping": {
      "properties": {
        "orgId": {
          "description": "_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "scimGroupUid": {
          "description": "_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "orgId",
        "scimGroupUid"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "HiddenFilePatternsResponse": {
      "properties": {
        "osPatterns": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "type": "object"
        },
        "patterns": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "IDigestValue": {
      "properties": {
        "byteArray": {
          "$ref": "#/definitions/ByteArray"
        },
        "bytes": {
          "items": {
            "format": "byte",
            "type": "string"
          },
          "type": "array"
        },
        "encoded": {
          "type": "string"
        },
        "length": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "IPermission": {
      "properties": {
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "IdentityProviderSamlSettings_Update": {
      "description": "Update SAML settings for an existing Identity Provider. Missing or empty fields remain unchanged.",
      "properties": {
        "settings": {
          "$ref": "#/definitions/SamlSettingsUpdateData"
        }
      },
      "required": [
        "settings"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "LegalHoldDeactivation_Update": {
      "description": "Deactivate a legal hold. Release users' devices from the backup configuration applied by the legal hold.",
      "properties": {
        "legalHoldUid": {
          "description": "_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "legalHoldUid"
      ],
      "type": "object",
      "x-code42-visibility": "public",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "LegalHoldEventResult": {
      "properties": {
        "actorPrincipal": {
          "$ref": "#/definitions/Principal"
        },
        "custodianPrincipal": {
          "$ref": "#/definitions/Principal"
        },
        "eventDate": {
          "description": "When the event occurred\n_Format_: date-time\n_Required._",
          "format": "date-time",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "eventType": {
          "description": "The type of event. Each event may have fields specific to it\n_Values_: [HOLD_CREATED, HOLD_DEACTIVATED, HOLD_REACTIVATED, MEMBERSHIP_CREATED, MEMBERSHIP_DEACTIVATED, MEMBERSHIP_REACTIVATED, RESTORE].\n_Required._",
          "enum": [
            "HOLD_CREATED",
            "HOLD_DEACTIVATED",
            "HOLD_REACTIVATED",
            "MEMBERSHIP_CREATED",
            "MEMBERSHIP_DEACTIVATED",
            "MEMBERSHIP_REACTIVATED",
            "RESTORE"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        },
        "eventUid": {
          "description": "The unique identifier for the event\nis not empty\ndigits\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "legalHoldMembershipUid": {
          "description": "The unique identifier of the LegalHoldMembership corresponding to the event. Only present in the following events: MembershipCreated, MembershipDeactivated, MembershipReactivated\nis not empty\ndigits\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "legalHoldUid": {
          "description": "The unique identifier of the LegalHold corresponding to the event\nis not empty\ndigits\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "restoreEvent": {
          "$ref": "#/definitions/LegalHoldRestoreEvent"
        }
      },
      "required": [
        "actorPrincipal",
        "eventDate",
        "eventType",
        "eventUid",
        "legalHoldUid"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "LegalHoldMatter": {
      "properties": {
        "active": {
          "type": "boolean"
        },
        "activeMembershipCount": {
          "format": "int32",
          "type": "integer"
        },
        "creationDate": {
          "format": "int64",
          "type": "integer"
        },
        "creator": {
          "$ref": "#/definitions/PrincipalDto"
        },
        "description": {
          "type": "string"
        },
        "externalReference": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "int64",
          "type": "integer"
        },
        "legalHoldUid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "policyId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "LegalHoldMatterListResponse": {
      "properties": {
        "matters": {
          "items": {
            "$ref": "#/definitions/LegalHoldMatter"
          },
          "type": "array"
        },
        "totalSize": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "LegalHoldMatter_Activate": {
      "description": "Activate an existing matter.",
      "properties": {
        "legalHoldUid": {
          "description": "The unique identifier of the legal hold matter to activate.\nis not empty\ndigits\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "legalHoldUid"
      ],
      "type": "object",
      "x-code42-visibility": "public",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "LegalHoldMatter_Create": {
      "description": "Create a matter",
      "properties": {
        "description": {
          "description": "A description to give to the matter\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "externalReference": {
          "description": "The external reference for the hold\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "name": {
          "description": "The name to give to the matter\nis not blank\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "notes": {
          "description": "Notes to give to the matter\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "policyId": {
          "description": "The unique identifier of the policy involved in the matter\nis not empty\ndigits\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "name",
        "policyId"
      ],
      "type": "object",
      "x-code42-visibility": "public",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "LegalHoldMatter_Deactivate": {
      "description": "Deactivate an existing matter.",
      "properties": {
        "legalHoldUid": {
          "description": "The unique identifier of the legal hold matter to deactivate.\nis not empty\ndigits\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "legalHoldUid"
      ],
      "type": "object",
      "x-code42-visibility": "public",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "LegalHoldMatter_Update": {
      "description": "Update an existing matter.",
      "properties": {
        "description": {
          "description": "A description to give to the matter\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "externalReference": {
          "description": "The external reference for the hold\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "legalHoldUid": {
          "description": "The unique identifier of the legal hold matter to update\nis not empty\ndigits\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "name": {
          "description": "The name to give to the matter\nis not blank\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "notes": {
          "description": "Notes to give to the matter\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "policyId": {
          "description": "The unique identifier of the policy involved in the matter\nis not empty\ndigits\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "legalHoldUid"
      ],
      "type": "object",
      "x-code42-visibility": "public",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "LegalHoldMembership": {
      "properties": {
        "active": {
          "type": "boolean"
        },
        "activeBackupAgentCount": {
          "format": "int32",
          "type": "integer"
        },
        "creationDate": {
          "format": "date-time",
          "type": "string"
        },
        "hasRestorePermissionFor": {
          "type": "boolean"
        },
        "legalHold": {
          "$ref": "#/definitions/MembershipLegalHold"
        },
        "legalHoldMembershipUid": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/LegalHoldUser"
        }
      },
      "type": "object"
    },
    "LegalHoldMembershipResponse": {
      "properties": {
        "active": {
          "description": "Indicates if the user is currently a member of the LegalHold.\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "activeBackupAgentCount": {
          "description": "Number of active backup agents registered to the custodian of the legal hold.\n_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "creationDate": {
          "description": "Date and time the membership was created.\n_Format_: date\n_Required._",
          "format": "date",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "hasRestorePermissionFor": {
          "description": "Does the caller likely have permission to restore this custodian's files?\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "legalHold": {
          "$ref": "#/definitions/MembershipLegalHold"
        },
        "legalHoldMembershipUid": {
          "description": "The unique identifier for this membership.\n_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "user": {
          "$ref": "#/definitions/LegalHoldUser"
        }
      },
      "required": [
        "active",
        "activeBackupAgentCount",
        "creationDate",
        "hasRestorePermissionFor",
        "legalHold",
        "legalHoldMembershipUid",
        "user"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "LegalHoldMembership_Create": {
      "description": "Create a new membership (add a user to a legal hold). If the given user already has an inactive membership in the legal hold, that membership will be reactivated.",
      "properties": {
        "legalHoldUid": {
          "description": "Creates or reactivates a membership for the given user.\n_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "userUid": {
          "description": "The unique identifier of the user to add to the legal hold.\n_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "legalHoldUid",
        "userUid"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "LegalHoldMembership_Deactivate": {
      "description": "Removes a user from a legal hold by deactivating their membership. All of the user's computers will be updated to remove the backup configuration associated with the corresponding legal hold.",
      "properties": {
        "legalHoldMembershipUid": {
          "description": "The unique identifier of the legal hold membership to return. If provided, then legalHoldMatterUid and userUid should NOT be provided.\n_Format_: guid\n_Optional._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "legalHoldUid": {
          "description": "The unique identifier of the matter the custodian belongs to. Must be provided with a userUid. If provided, then legalHoldMembershipUid should NOT be provided.\nis not empty\ndigits\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "userUid": {
          "description": "The unique identifier of the custodian under a hold. Must be provided with a legalHoldMatterUid. If provided, then legalHoldMembershipUid should NOT be provided.\n_Format_: guid\n_Optional._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "type": "object",
      "x-code42-visibility": "public",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "LegalHoldPolicy": {
      "properties": {
        "creationDate": {
          "format": "int64",
          "type": "integer"
        },
        "creatorPrincipal": {
          "$ref": "#/definitions/Principal"
        },
        "legalHoldPolicyUid": {
          "type": "string"
        },
        "modificationDate": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "policy": {
          "$ref": "#/definitions/PolicyResponse"
        }
      },
      "type": "object"
    },
    "LegalHoldPolicyListResponse": {
      "properties": {
        "policies": {
          "items": {
            "$ref": "#/definitions/LegalHoldPolicy"
          },
          "type": "array"
        },
        "totalSize": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "LegalHoldPolicyResponse": {
      "properties": {
        "creationDate": {
          "description": "When the policy was created\n_Format_: date-time\n_Required._",
          "format": "date-time",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "creatorPrincipal": {
          "$ref": "#/definitions/Principal"
        },
        "legalHoldPolicyUid": {
          "description": "The policy's unique identifier\nis not empty\ndigits\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "modificationDate": {
          "description": "When the policy was last modified\n_Format_: date-time\n_Required._",
          "format": "date-time",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "name": {
          "description": "The name of the policy\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "policy": {
          "$ref": "#/definitions/PolicyResponse"
        }
      },
      "required": [
        "creationDate",
        "creatorPrincipal",
        "legalHoldPolicyUid",
        "modificationDate",
        "name",
        "policy"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "LegalHoldPolicy_Create": {
      "description": "Create a new Legal Hold Policy",
      "properties": {
        "name": {
          "description": "The name of the policy\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "policy": {
          "$ref": "#/definitions/PolicyCreateOrUpdateRequest"
        }
      },
      "required": [
        "name"
      ],
      "type": "object",
      "x-code42-visibility": "public",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "LegalHoldPolicy_Update": {
      "description": "Update an existing Legal Hold Policy",
      "properties": {
        "legalHoldPolicyUid": {
          "description": "The policy's unique identifier\nis not empty\ndigits\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "name": {
          "description": "The name of the policy\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "policy": {
          "$ref": "#/definitions/PolicyCreateOrUpdateRequest"
        }
      },
      "required": [
        "legalHoldPolicyUid"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "LegalHoldRestoreEvent": {
      "properties": {
        "restoreFileCount": {
          "description": "The number of files that were restored\n_Format_: int64\n_Required._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "restoreId": {
          "description": "The unique identifier of the RestoreRecord corresponding to the event\nis not empty\ndigits\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "restoreStatus": {
          "description": "Simplified status of the restore\n_Values_: [PENDING, SUCCESS, CANCELED, ERROR].\n_Required._",
          "enum": [
            "PENDING",
            "SUCCESS",
            "CANCELED",
            "ERROR"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        },
        "restoreType": {
          "description": "The type of restore performed\n_Values_: [PUSH, WEB, CLIENT].\n_Required._",
          "enum": [
            "PUSH",
            "WEB",
            "CLIENT"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        }
      },
      "required": [
        "restoreFileCount",
        "restoreId",
        "restoreStatus",
        "restoreType"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "LegalHoldUser": {
      "properties": {
        "email": {
          "description": "Email of the user.\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "externalReference": {
          "description": "The external reference of the user.\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "firstName": {
          "description": "First name of the user.\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "lastName": {
          "description": "Last name of the user.\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "orgName": {
          "description": "Users organization name\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "orgUid": {
          "description": "Users organization unique identifer.\n_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "userUid": {
          "description": "Unique identifier of the user.\n_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "username": {
          "description": "Username of the user.\nis not blank\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "orgName",
        "orgUid",
        "userUid",
        "username"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "LicensePlan": {
      "properties": {
        "productPlan": {
          "type": "string"
        },
        "supportPlans": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "LicenseUsageDetails": {
      "properties": {
        "licensesInUse": {
          "description": "The number of licences currently in use\n_Format_: int64\n_Required._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "usageCalculationTimestamp": {
          "description": "The time when the summary was calculated\n_Format_: date-time\n_Required._",
          "format": "date-time",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "licensesInUse",
        "usageCalculationTimestamp"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "LicenseUsageSummary": {
      "properties": {
        "securityUsage": {
          "$ref": "#/definitions/LicenseUsageDetails"
        }
      },
      "required": [
        "securityUsage"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ListApiClientResponse": {
      "properties": {
        "apiClients": {
          "items": {
            "$ref": "#/definitions/ApiClientWithoutProductRolesResponse"
          },
          "type": "array"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ListProductRoleResponse": {
      "properties": {
        "productRoles": {
          "items": {
            "$ref": "#/definitions/ProductRoleResponse"
          },
          "type": "array"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "LocalAuthUserRequestElement": {
      "properties": {
        "localAuthentication": {
          "type": "boolean"
        },
        "userUid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "LocalAuthUserResponseElement": {
      "properties": {
        "userUid": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "LocalAuthUsersRequest": {
      "properties": {
        "users": {
          "items": {
            "$ref": "#/definitions/LocalAuthUserRequestElement"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "LocalAuthUsersResponse": {
      "properties": {
        "users": {
          "items": {
            "$ref": "#/definitions/LocalAuthUserResponseElement"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "LoginConfigurationResponse": {
      "description": "LoginConfiguration response containing the log in type and metadata.",
      "properties": {
        "loginType": {
          "description": "The type of authentication method.",
          "enum": [
            "CLOUD_SSO",
            "PRIVATE_SSO",
            "LOCAL",
            "LOCAL_2FA"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "MD5Value": {
      "properties": {
        "array": {
          "items": {
            "format": "byte",
            "type": "string"
          },
          "type": "array"
        },
        "checksum": {
          "$ref": "#/definitions/MD5Value"
        }
      },
      "type": "object"
    },
    "MasterServicesAgreement": {
      "description": "Information about a customer's Master Services Agreement acknowledgement.",
      "properties": {
        "acceptanceRequired": {
          "description": "Whether the user should be required to accept the MSA.",
          "type": "boolean"
        },
        "accepted": {
          "description": "Whether the MSA has been accepted.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Matter": {
      "description": "A Legal Hold matter",
      "properties": {
        "active": {
          "description": "Whether the matter is currently active\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "activeMembershipCount": {
          "description": "The number of active principals (custodians) belonging to the hold. Only calculated if calculateActiveMembers is true\n_Format_: int32\n_Optional._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "creationDate": {
          "description": "The date and time the matter was created\n_Format_: date-time\n_Required._",
          "format": "date-time",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "creator": {
          "$ref": "#/definitions/Principal"
        },
        "description": {
          "description": "The description of the matter\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "externalReference": {
          "description": "The external reference for the hold\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "lastModifiedDate": {
          "description": "The date and time the matter was last modified\n_Format_: date-time\n_Required._",
          "format": "date-time",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "legalHoldUid": {
          "description": "The unique identifier of the matter\nis not empty\ndigits\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "name": {
          "description": "The name of the matter\nis not blank\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "notes": {
          "description": "Notes about the matter\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "policyId": {
          "description": "The ID of the policy containing the matter\nis not empty\ndigits\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "active",
        "creationDate",
        "creator",
        "lastModifiedDate",
        "legalHoldUid",
        "name",
        "policyId"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "MatterResponse": {
      "properties": {
        "active": {
          "type": "boolean"
        },
        "creationDate": {
          "format": "date-time",
          "type": "string"
        },
        "creator": {
          "$ref": "#/definitions/CreatorUserResponse"
        },
        "creatorPrincipal": {
          "$ref": "#/definitions/CreatorPrincipalResponse"
        },
        "description": {
          "type": "string"
        },
        "matterId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "policyId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "MembershipLegalHold": {
      "properties": {
        "legalHoldUid": {
          "description": "Unique identifier of the legal hold.\n_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "name": {
          "description": "Name of the legal hold.\nis not blank\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "legalHoldUid",
        "name"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "MessageBodyWorkers": {
      "type": "object"
    },
    "MultiPart": {
      "properties": {
        "bodyParts": {
          "items": {
            "$ref": "#/definitions/BodyPart"
          },
          "type": "array"
        },
        "contentDisposition": {
          "$ref": "#/definitions/ContentDisposition"
        },
        "entity": {
          "type": "object"
        },
        "headers": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object"
        },
        "mediaType": {
          "properties": {
            "parameters": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "subtype": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "wildcardSubtype": {
              "type": "boolean"
            },
            "wildcardType": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "messageBodyWorkers": {
          "$ref": "#/definitions/MessageBodyWorkers"
        },
        "parameterizedHeaders": {
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/ParameterizedHeader"
            },
            "type": "array"
          },
          "type": "object"
        },
        "parent": {
          "$ref": "#/definitions/MultiPart"
        },
        "providers": {
          "type": "object"
        }
      },
      "type": "object"
    },
    "NotifyNewLocationResponse": {
      "properties": {
        "notifyNewLocation": {
          "description": "Boolean as to whether the user should be notified when the login from a new location.\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "notifyNewLocation"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "NotifyNewLocation_UpdateForSsoUsers": {
      "description": "Update Notify New Location Value for all SSO Users.",
      "properties": {
        "notifyNewLocation": {
          "description": "Set to true to have the user notified when they are logging in from a new location.\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "notifyNewLocation"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "NotifyNewLocation_UpdateForUser": {
      "description": "Update Notify New Location Value for a User.",
      "properties": {
        "notifyNewLocation": {
          "description": "Set to true have the user notified when they are logging in from a new location.\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "userUid": {
          "description": "The user's UID.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "notifyNewLocation",
        "userUid"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "NotifySettingsValues": {
      "description": "Structure with values which belong to the notify settings entity.",
      "properties": {
        "criticalGigabytes": {
          "default": 5,
          "description": "_Format_: int32\n_Default Value_: 5",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "nightlyReportingTime": {
          "description": "_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "serverAlertEmailAddresses": {
          "description": "_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "warningGigabytes": {
          "default": 10,
          "description": "_Format_: int32\n_Default Value_: 10",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        }
      },
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "OauthResponse": {
      "properties": {
        "v3_user_token": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "OrgAuthRequestElement": {
      "properties": {
        "orgId": {
          "format": "int32",
          "type": "integer"
        },
        "ssoAuthUids": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "OrgAuthResponseElement": {
      "properties": {
        "inherits": {
          "type": "boolean"
        },
        "orgActive": {
          "type": "boolean"
        },
        "orgId": {
          "format": "int32",
          "type": "integer"
        },
        "orgName": {
          "type": "string"
        },
        "orgUid": {
          "type": "string"
        },
        "parentOrgId": {
          "format": "int32",
          "type": "integer"
        },
        "ssoAuthUids": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "OrgClientManagementSummary": {
      "properties": {
        "orgAssignedToCustomizationTemplate": {
          "type": "boolean"
        },
        "orgAssignedToDeploymentPolicy": {
          "type": "boolean"
        },
        "orgId": {
          "format": "int32",
          "type": "integer"
        },
        "orgName": {
          "type": "string"
        },
        "parentOrgId": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "OrgData": {
      "properties": {
        "active": {
          "type": "boolean"
        },
        "agentCountResponse": {
          "$ref": "#/definitions/AgentCountResponse"
        },
        "blocked": {
          "type": "boolean"
        },
        "orgCount": {
          "format": "int32",
          "type": "integer"
        },
        "orgGuid": {
          "type": "string"
        },
        "orgId": {
          "format": "int32",
          "type": "integer"
        },
        "orgName": {
          "type": "string"
        },
        "parentOrgGuid": {
          "type": "string"
        },
        "userCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "OrgGuid": {
      "type": "object"
    },
    "OrgGuidResponse": {
      "description": "Guid of the Org",
      "properties": {
        "orgGuid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "OrgInfo": {
      "properties": {
        "authMethod": {
          "description": "_Values_: [LOCAL, SSO].\n_Required._",
          "enum": [
            "LOCAL",
            "SSO"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        },
        "cloaked": {
          "description": "_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "ssoIdentityProviders": {
          "description": "_List_\n_Required._",
          "items": {
            "description": "_Required._",
            "type": "string",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        }
      },
      "required": [
        "authMethod",
        "cloaked",
        "ssoIdentityProviders"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "OrgListContainer": {
      "properties": {
        "orgs": {
          "items": {
            "$ref": "#/definitions/OrgResponse"
          },
          "type": "array"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "OrgListContainerInternal": {
      "properties": {
        "orgs": {
          "items": {
            "$ref": "#/definitions/OrgResponseInternal"
          },
          "type": "array"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "OrgListResponse": {
      "properties": {
        "orgs": {
          "items": {
            "$ref": "#/definitions/OrgData"
          },
          "type": "array"
        },
        "totalResultCount": {
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "OrgPlanSetting_Remove": {
      "description": "Delete organization-plan settings.",
      "properties": {
        "keys": {
          "description": "Comma-separated list of keys identifying settings to delete.\n_List_ (Must have at least one entry.)\n_Required._",
          "items": {
            "description": "_Required._",
            "type": "string",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "minItems": 1,
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "orgId": {
          "description": "_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        }
      },
      "required": [
        "keys",
        "orgId"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "OrgPlanSetting_Update": {
      "description": "Create or update organization-plan settings.",
      "properties": {
        "orgId": {
          "description": "_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "packets": {
          "description": "_List_ (Must have at least one entry.)\n_Required._",
          "items": {
            "$ref": "#/definitions/SettingPacket"
          },
          "minItems": 1,
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        }
      },
      "required": [
        "orgId",
        "packets"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "OrgReportingDataInternal": {
      "description": "Reporting information structure.",
      "properties": {
        "orgManagers": {
          "items": {
            "$ref": "#/definitions/User"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "OrgResponse": {
      "properties": {
        "active": {
          "description": "Whether or not the org is currently active.",
          "type": "boolean"
        },
        "computerCount": {
          "description": "The count of computers within this org.",
          "format": "int32",
          "type": "integer"
        },
        "creationDate": {
          "description": "Date and time this org was created.",
          "type": "string"
        },
        "deactivationDate": {
          "description": "Date and time this org was deactivated. Blank if org is active.",
          "type": "string"
        },
        "modificationDate": {
          "description": "Date and time this org was last modified.",
          "type": "string"
        },
        "notes": {
          "description": "The notes for this org. Intended for optional additional descriptive information.",
          "type": "string"
        },
        "orgCount": {
          "description": "The count of child orgs for this org.",
          "format": "int32",
          "type": "integer"
        },
        "orgExtRef": {
          "description": "Optional external reference information, such as a serial number, asset tag, employee ID, or help desk issue ID.",
          "type": "string"
        },
        "orgGuid": {
          "description": "The globally unique ID of this org.",
          "type": "string"
        },
        "orgName": {
          "description": "The name of this org.",
          "type": "string"
        },
        "parentOrgGuid": {
          "description": "The globally unique ID of the parent org.",
          "type": "string"
        },
        "registrationKey": {
          "description": "The registration key for the org.",
          "type": "string"
        },
        "userCount": {
          "description": "The count of users within this org.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "OrgResponseInternal": {
      "properties": {
        "active": {
          "description": "True means the org will show up on reports, etc.",
          "type": "boolean"
        },
        "blocked": {
          "description": "True means users will continue backing up, but restores and logins are disabled.",
          "type": "boolean"
        },
        "computerCount": {
          "description": "The number of computers registered to this org.",
          "format": "int32",
          "type": "integer"
        },
        "creationDate": {
          "description": "Date and time this org was created.",
          "type": "string"
        },
        "deactivationDate": {
          "description": "Date and time this org was deactivated. Blank if org is active.",
          "type": "string"
        },
        "externalId": {
          "description": "A globally unique ID for this organization. (Use orgUid instead.)",
          "type": "string",
          "deprecated": true
        },
        "modificationDate": {
          "description": "Date and time this org was last modified.",
          "type": "string"
        },
        "notes": {
          "description": "Optional descriptive information.",
          "type": "string"
        },
        "orgCount": {
          "description": "The number of active child orgs under this org.",
          "format": "int32",
          "type": "integer"
        },
        "orgExtRef": {
          "description": "Optional external reference information, such as a serial number, asset tag, employee ID, or help desk issue ID.",
          "type": "string"
        },
        "orgGuid": {
          "description": "The immutable globally unique identifier for this organization.",
          "type": "string"
        },
        "orgId": {
          "description": "The ID for this organization. (Use orgUid instead.)",
          "format": "int32",
          "type": "integer",
          "deprecated": true
        },
        "orgName": {
          "description": "Name of the organization.",
          "type": "string"
        },
        "orgUid": {
          "description": "The UID for this organization.",
          "type": "string"
        },
        "parentOrgGuid": {
          "description": "The orgGuid for the parent organization.",
          "type": "string"
        },
        "parentOrgId": {
          "description": "The orgId for the parent organization. (Use parentOrgUid instead.)",
          "format": "int32",
          "type": "integer",
          "deprecated": true
        },
        "parentOrgUid": {
          "description": "The orgUid for the parent organization.",
          "type": "string"
        },
        "registrationKey": {
          "description": "This org's registration key.",
          "type": "string"
        },
        "userCount": {
          "description": "The number of users registered to this org.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "OrgSettingCreateOrUpdate": {
      "description": "Create or update a setting for an Org, using parameters.",
      "properties": {
        "locked": {
          "type": "boolean"
        },
        "orgId": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "OrgSettingData": {
      "properties": {
        "locked": {
          "type": "boolean"
        },
        "orgGuid": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "OrgSettingJobResponse": {
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "status": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "OrgSettingResponse": {
      "properties": {
        "orgsSettings": {
          "items": {
            "$ref": "#/definitions/OrgSettingData"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "OrgSetting_Remove": {
      "description": "Delete organization-level settings.",
      "properties": {
        "keys": {
          "description": "Comma-separated list of keys identifying settings to delete.\n_List_ (Must have at least one entry.)\n_Required._",
          "items": {
            "description": "_Required._",
            "type": "string",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "minItems": 1,
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "orgId": {
          "description": "_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        }
      },
      "required": [
        "keys",
        "orgId"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "OrgSetting_Update": {
      "description": "Create or update organization-level settings.",
      "properties": {
        "orgId": {
          "description": "_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "packets": {
          "description": "_List_ (Must have at least one entry.)\n_Required._",
          "items": {
            "$ref": "#/definitions/SettingPacket"
          },
          "minItems": 1,
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        }
      },
      "required": [
        "orgId",
        "packets"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "OrgSettingsDataInternal": {
      "description": "The resolved settings of this org, combining the inherited and settings structures. Most users will be interested in this settings object.",
      "properties": {
        "maxBytes": {
          "format": "int64",
          "type": "integer"
        },
        "maxSeats": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "OrgSettingsUpdateRequest": {
      "properties": {
        "orgIdsInheriting": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "orgSettingCreateOrUpdates": {
          "items": {
            "$ref": "#/definitions/OrgSettingCreateOrUpdate"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "OrgTreeNode": {
      "properties": {
        "orgGuid": {
          "type": "string"
        },
        "orgId": {
          "format": "int32",
          "type": "integer"
        },
        "orgName": {
          "type": "string"
        },
        "orgType": {
          "type": "string"
        },
        "parentOrgGuid": {
          "type": "string"
        },
        "parentOrgId": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "OrgTreeResponse": {
      "properties": {
        "orgs": {
          "items": {
            "$ref": "#/definitions/OrgTreeNode"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "OrgsAuthRequest": {
      "properties": {
        "orgAuthChanges": {
          "items": {
            "$ref": "#/definitions/OrgAuthRequestElement"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "OrgsAuthResponse": {
      "properties": {
        "orgsForTenant": {
          "items": {
            "$ref": "#/definitions/OrgAuthResponseElement"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ParameterizedHeader": {
      "properties": {
        "parameters": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PathContainer": {
      "properties": {
        "paths": {
          "description": "paths to search for\n_List_\n_Required._",
          "items": {
            "description": "_Required._",
            "type": "string",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "archiveGuid": {
          "description": "the archive to search in\nis not empty\ndigits\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "encodedPaths": {
          "description": "base64 encoded paths to search for\n_List_\n_Required._",
          "items": {
            "description": "_Required._",
            "type": "string",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        }
      },
      "required": [
        "archiveGuid",
        "encodedPaths",
        "paths"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "PathData": {
      "properties": {
        "directory": {
          "description": "Does the path represent a directory?\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "path": {
          "description": "The file path\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "selected": {
          "description": "Should this path be included or excluded from backup?\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "directory",
        "path",
        "selected"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "PathExclusion": {
      "properties": {
        "osRestriction": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PendingAgentCliCommand": {
      "properties": {
        "parameters": {
          "description": "The parameters for the command.\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "command": {
          "description": "The name of the command to be executed by the agent.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "commandGuid": {
          "description": "The GUID of the command.\n_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "command",
        "commandGuid"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "PendingCommandsResponse": {
      "properties": {
        "commands": {
          "description": "Array of agent CLI commands in the order they were created.\n_List_\n_Required._",
          "items": {
            "$ref": "#/definitions/PendingAgentCliCommand"
          },
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "pollFrequencyInMinutes": {
          "description": "Sepecifies how often the agent should poll for pending CLI commands.\n_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        }
      },
      "required": [
        "commands",
        "pollFrequencyInMinutes"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "PermissionDefinition": {
      "description": "Definition of a single permission",
      "properties": {
        "description": {
          "description": "has length between 0 and 512, inclusive\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "permission": {
          "description": "is not empty\nservice_family.resource.action\nhas length between 5 and 100, inclusive\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "description",
        "permission"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "PermissionInfo": {
      "description": "the permissions given to this role",
      "properties": {
        "description": {
          "type": "string"
        },
        "permission": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PermissionPublishRequest": {
      "properties": {
        "permissions": {
          "items": {
            "$ref": "#/definitions/PermissionRequestDefinition"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "PermissionPublishResult": {
      "properties": {
        "permissionsAdded": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "permissionsDeleted": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "permissionsUpdated": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "PermissionRequestDefinition": {
      "properties": {
        "allowedPrincipalTypes": {
          "items": {
            "enum": [
              "USR",
              "SVC",
              "DEVICE",
              "API_CLIENT"
            ],
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "description": {
          "type": "string"
        },
        "permission": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PermissionResponse": {
      "properties": {
        "description": {
          "type": "string"
        },
        "permission": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Permission_Publish": {
      "description": "Update Unified Access Control (UAC) with the latest set of permissions.<br>  This command will always take in the full set of permission definitions, from all services.<br>  At the completion of the command, the permission definitions will match what was provided.<br>  This means adding, updating or deleting to/from existing state.  This command supports being called<br>  before or after the role-permission assignments are published.",
      "properties": {
        "permissions": {
          "description": "The new set of permissions; the current permission set is to be modified to match this.\n_Set_\n_Required._",
          "items": {
            "$ref": "#/definitions/PermissionDefinition"
          },
          "type": "array",
          "uniqueItems": true,
          "x-type": "OpenApiSchemaArrayDef"
        }
      },
      "required": [
        "permissions"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "PerpetualLicenses": {
      "description": "A perpetual seat license is a license to backup indefinitely. It's very much like a user seat license except that it has no end date. If multiple perpetual licenses exist for the customer, their values are aggregated here as if there is only one.",
      "properties": {
        "maintenanceActive": {
          "description": "Whether maintenance is in effect (by current date), and any other business criteria.",
          "type": "boolean"
        },
        "projectedMaintenanceEndDate": {
          "description": "The calculated end date of support/maintenance.",
          "format": "date",
          "type": "string"
        },
        "seatsPurchased": {
          "description": "The number of users (aka seats) permitted to backup under this license.",
          "format": "int32",
          "type": "integer"
        },
        "startDate": {
          "description": "The first date the license is in effect.",
          "format": "date",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PingAuthResponse": {
      "description": "Ping response containing session information about the authenticated requester.",
      "properties": {
        "realSubjectName": {
          "type": "string"
        },
        "subjectName": {
          "type": "string"
        }
      },
      "title": "PingAuthResponse",
      "type": "object"
    },
    "PingResponse": {
      "description": "Simple model for an unauthenticated ping response.",
      "properties": {
        "serverTime": {
          "format": "date-time",
          "type": "string"
        }
      },
      "title": "PingResponse",
      "type": "object"
    },
    "PlanDeviceSetting_Remove": {
      "description": "Delete device-plan settings.",
      "properties": {
        "guid": {
          "description": "GUID of the device.\n_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "keys": {
          "description": "Comma-separated list of keys identifying settings to delete.\n_List_ (Must have at least one entry.)\n_Required._",
          "items": {
            "description": "_Required._",
            "type": "string",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "minItems": 1,
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "planUid": {
          "description": "UID of the device plan.\n_Format_: int64\n_Required._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "guid",
        "keys",
        "planUid"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "PlanDeviceSetting_Update": {
      "description": "Create or update device-plan settings.",
      "properties": {
        "guid": {
          "description": "_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "packets": {
          "description": "_List_ (Must have at least one entry.)\n_Required._",
          "items": {
            "$ref": "#/definitions/SettingPacket"
          },
          "minItems": 1,
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "planUid": {
          "description": "UID of the plan these settings apply to.\n_Format_: int64\n_Required._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "guid",
        "packets",
        "planUid"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "PlanSetting_Remove": {
      "description": "Delete plan-level settings.",
      "properties": {
        "keys": {
          "description": "Comma-separated list of keys identifying settings to delete.\n_List_ (Must have at least one entry.)\n_Required._",
          "items": {
            "description": "_Required._",
            "type": "string",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "minItems": 1,
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "planUid": {
          "description": "UID of the plan.\n_Format_: int64\n_Required._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "keys",
        "planUid"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "PlanSetting_Update": {
      "description": "Create or update plan-level settings.",
      "properties": {
        "packets": {
          "description": "_List_ (Must have at least one entry.)\n_Required._",
          "items": {
            "$ref": "#/definitions/SettingPacket"
          },
          "minItems": 1,
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "planUid": {
          "description": "UID of the plan these settings apply to.\n_Format_: int64\n_Required._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "packets",
        "planUid"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "PlanUserSetting_Remove": {
      "description": "Delete user-plan settings.",
      "properties": {
        "keys": {
          "description": "Comma-separated list of keys identifying settings to delete.\n_List_ (Must have at least one entry.)\n_Required._",
          "items": {
            "description": "_Required._",
            "type": "string",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "minItems": 1,
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "planUid": {
          "description": "UID of the plan.\n_Format_: int64\n_Required._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "userUid": {
          "description": "UID of the user, defaults to the calling user.\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "keys",
        "planUid"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "PlanUserSetting_Update": {
      "description": "Create or update user-plan settings.",
      "properties": {
        "packets": {
          "description": "_List_ (Must have at least one entry.)\n_Required._",
          "items": {
            "$ref": "#/definitions/SettingPacket"
          },
          "minItems": 1,
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "planUid": {
          "description": "UID of the plan these settings apply to.\n_Format_: int64\n_Required._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "userUid": {
          "description": "_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "packets",
        "planUid"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "PolicyCreateOrUpdateRequest": {
      "properties": {
        "backupOpenFiles": {
          "description": "_Optional._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "backupPaths": {
          "$ref": "#/definitions/BackupPathsCreateOrUpdateRequest"
        },
        "backupRunWindow": {
          "$ref": "#/definitions/BackupRunWindowCreateOrUpdateRequest"
        },
        "compression": {
          "description": "Note: Compression can only be changed to 'ON'. Changing to any other value is no longer allowed\n_Values_: [AUTOMATIC, ON, OFF].\n_Optional._",
          "enum": [
            "AUTOMATIC",
            "ON",
            "OFF"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        },
        "dataDeDupAutoMaxFileSizeForLan": {
          "description": "When DataDeDuplication is set to automatic, and connected via LAN, only files smaller than this will be deduplicated\n_Format_: int64\n_Optional._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "dataDeDupAutoMaxFileSizeForWan": {
          "description": "When DataDeDuplication is set to automatic, and connected via WAN, only files smaller than this will be deduplicated\n_Format_: int64\n_Optional._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "dataDeDuplication": {
          "description": "Note: DataDeduplication can only be changed to 'FULL'.  Changing to any other value is no longer allowed\n_Values_: [AUTOMATIC, FULL, MINIMAL].\n_Optional._",
          "enum": [
            "AUTOMATIC",
            "FULL",
            "MINIMAL"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        },
        "destinations": {
          "description": "The destination guids to backup to. If none are specified, all available destinations will be used\n_Set_\n_Optional._",
          "items": {
            "description": "is not empty\ndigits\n_Required._",
            "type": "string",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "type": "array",
          "uniqueItems": true,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "encryptionEnabled": {
          "description": "Note: Encryption can only be changed from 'false' to 'true'. Going the other way is no longer allowed\n_Optional._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "retentionPolicy": {
          "$ref": "#/definitions/RetentionPolicyCreateOrUpdateRequest"
        },
        "scanIntervalMillis": {
          "description": "How often, in millis, to scan for file changes\n_Format_: int64\n_Optional._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "scanTime": {
          "description": "Time of day in which client db and client file system are reconciled. Example: 03:00\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "watchFiles": {
          "description": "Is real-time file watching enabled?\n_Optional._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "PolicyResponse": {
      "properties": {
        "creationDate": {
          "format": "date-time",
          "type": "string"
        },
        "creatorPrincipal": {
          "$ref": "#/definitions/CreatorPrincipalResponse"
        },
        "creatorUser": {
          "$ref": "#/definitions/CreatorUserResponse"
        },
        "modificationDate": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "policyId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PostDeleteResponse": {
      "properties": {
        "jobId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PreLoginClientCustomizationResponse": {
      "properties": {
        "base64AboutScreenImage": {
          "description": "About Screen Image of this client customization, base64 encoded string, require a UI_CUSTOMIZATIONS License in order to be returned.",
          "type": "string"
        },
        "base64HeaderImage": {
          "description": "Header Image of this client customization, base64 encoded string, require a UI_CUSTOMIZATIONS License in order to be returned.",
          "type": "string"
        },
        "passwordLabel": {
          "description": "Password Label of this client customization.",
          "type": "string"
        },
        "usernameLabel": {
          "description": "Username Label of this client customization.",
          "type": "string"
        },
        "version": {
          "description": "Version of this client customization.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Principal": {
      "properties": {
        "displayName": {
          "description": "The human-readable name of the principal\nis not blank\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "principalId": {
          "description": "The unique id of the principal\nis not blank\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "type": {
          "description": "The type of principal this represents\ntypes representing specific kinds of principals\n_Values_: [USER, API_KEY, DEVICE, SERVICE, EMPLOYEE].\n_Required._",
          "enum": [
            "USER",
            "API_KEY",
            "DEVICE",
            "SERVICE",
            "EMPLOYEE"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        },
        "user": {
          "$ref": "#/definitions/UserPrincipal"
        }
      },
      "required": [
        "displayName",
        "principalId",
        "type"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "PrincipalDto": {
      "properties": {
        "displayName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "enum": [
            "USER",
            "APIKEY",
            "DEVICE",
            "SERVICE",
            "EMPLOYEE"
          ],
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/UserPrincipalDto"
        }
      },
      "type": "object"
    },
    "ProductName": {
      "properties": {
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProductRolePublishDefinition": {
      "properties": {
        "allowedPrincipalTypes": {
          "items": {
            "enum": [
              "USR",
              "SVC",
              "DEVICE",
              "API_CLIENT"
            ],
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "description": {
          "type": "string"
        },
        "hidden": {
          "type": "boolean"
        },
        "permissions": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "productAction": {
          "enum": [
            "READ",
            "WRITE"
          ],
          "type": "string"
        },
        "productName": {
          "$ref": "#/definitions/ProductName"
        },
        "roleId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProductRolePublishRequest": {
      "properties": {
        "roles": {
          "items": {
            "$ref": "#/definitions/ProductRolePublishDefinition"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "ProductRoleResponse": {
      "properties": {
        "productAction": {
          "type": "string"
        },
        "productName": {
          "type": "string"
        },
        "roleId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProductRole_Publish": {
      "description": "Publish all the product roles and permission assignments for the directory. This command will always take in the full set<br>  of product roles. At the end of a successful command, the product roles in the system will match what was provided.<br>  This means adding or updating existing product roles. This command supports<br>  being called before or after the permission definitions are published.",
      "properties": {
        "productRoles": {
          "description": "The product roles and their permission assignments for the directory. These product roles and permissions\n    will be translated to differences with existing product roles and permissions.\n_Set_\n_Required._",
          "items": {
            "$ref": "#/definitions/PublishProductRoleData"
          },
          "type": "array",
          "uniqueItems": true,
          "x-type": "OpenApiSchemaArrayDef"
        }
      },
      "required": [
        "productRoles"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ProviderInfo": {
      "description": "Container for information about a SecretStoreProvider",
      "properties": {
        "connectionStatusDate": {
          "description": "The timestamp of the last connection status change",
          "format": "date-time",
          "type": "string"
        },
        "domain": {
          "description": "The domain of the provider",
          "type": "string"
        },
        "privatelyOwned": {
          "description": "A boolean indicated whether a provider is privately owned by a customer",
          "type": "boolean"
        },
        "providerId": {
          "description": "The unique id of the provider",
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "description": "The type of provider",
          "enum": [
            "Database",
            "Vault",
            "Unknown"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProvisionTenantRequest": {
      "description": "The tenant's creation data.",
      "properties": {
        "customerCloudAdmin": {
          "$ref": "#/definitions/CustomerCloudAdminRequest"
        },
        "destinationGuids": {
          "items": {
            "$ref": "#/definitions/DestinationGuid"
          },
          "type": "array",
          "uniqueItems": true
        },
        "tenantName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProvisionTenantResponse": {
      "properties": {
        "customerCloudAdminUsername": {
          "type": "string"
        },
        "registrationKey": {
          "type": "string"
        },
        "tenantId": {
          "$ref": "#/definitions/TenantUid"
        }
      },
      "type": "object"
    },
    "ProxyConfiguration": {
      "properties": {
        "address": {
          "description": "is not blank\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "method": {
          "description": "_Values_: [NONE, NAMED, PAC, SYSTEM].\n_Required._",
          "enum": [
            "NONE",
            "NAMED",
            "PAC",
            "SYSTEM"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        }
      },
      "required": [
        "method"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "PublishProductRoleData": {
      "description": "A package of information to define a product role and its assigned permissions",
      "properties": {
        "description": {
          "description": "Description of the product role's intent to be displayed to a human.\n  ex. \"View Audit Log\"\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "permissions": {
          "description": "The permission ids to assign to this product role.\n_Set_\n_Required._",
          "items": {
            "description": "is not empty\nservice_family.resource.action\nhas length between 5 and 100, inclusive\n_Required._",
            "type": "string",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "type": "array",
          "uniqueItems": true,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "productAction": {
          "description": "Name of the action that can be taken with on product with this role.\n_Values_: [READ, WRITE].\n_Required._",
          "enum": [
            "READ",
            "WRITE"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        },
        "productName": {
          "description": "Name of the product represented by this role.\nhas length between 1 and 192, inclusive\nis not blank\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "roleId": {
          "description": "Unique ID for the product role.\nAlphanumeric (inc. hyphen) without spaces\nhas length between 1 and 64, inclusive\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "description",
        "permissions",
        "productAction",
        "productName",
        "roleId"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "PublishRoleData": {
      "description": "A package of information to define a directory level role and its assigned permissions",
      "properties": {
        "description": {
          "description": "Description of the role's intent to be displayed to a human.\n  ex. \"Given to a customer administrator to manage security and preservation settings\"\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "name": {
          "description": "has length between 1 and 128, inclusive\nis not blank\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "permissions": {
          "description": "The permission ids to assign to this role.\n_Set_\n_Required._",
          "items": {
            "description": "is not empty\nservice_family.resource.action\nhas length between 5 and 100, inclusive\n_Required._",
            "type": "string",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "type": "array",
          "uniqueItems": true,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "roleId": {
          "description": "Alphanumeric (inc. hyphen) without spaces\nhas length between 1 and 64, inclusive\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "description",
        "name",
        "permissions",
        "roleId"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "PushRestoreJob": {
      "properties": {
        "acceptingEndpointOsName": {
          "description": "The OS name we are restoring to\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "acceptingEndpointOsVersion": {
          "description": "the OS version we are restoring to\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "acceptingGuid": {
          "description": "The device being restored to\n_Format_: guid\n_Optional._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "canceled": {
          "description": "Was the restore cancelled\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "done": {
          "description": "Has the restore completed\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "jobId": {
          "description": "The guid of this restore job\n_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "originalEndpointOsName": {
          "description": "The OS name we are restoring from\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "originalEndpointOsVersion": {
          "description": "The OS version we are restoring from\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "providerDestination": {
          "description": "Are we restoring to a provider destination?\n_Optional._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "sourceComputerGuid": {
          "description": "the guid of the source computer we are restoring from\n_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "userId": {
          "description": "The user who requested the restore job\n_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "canceled",
        "done",
        "jobId",
        "sourceComputerGuid",
        "userId"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ReactivateMembershipResponse": {
      "properties": {
        "membershipsChanged": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ReconstructPathsRequest": {
      "properties": {
        "paths": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "ReconstructedPathsResponse": {
      "properties": {
        "paths": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "RegistrationResponse": {
      "properties": {
        "deviceGuid": {
          "description": "_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "loginKey": {
          "description": "_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "registrationId": {
          "description": "_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "status": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "status"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "RemoveUserFromMatterRequest": {
      "description": "The request containing the userId of the user to remove from a legal hold matter.",
      "properties": {
        "userId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "RenewCustomerLicense_Update": {
      "description": "Marks a customer identified by their reg key with a renewed subscription (expires on the provided date).",
      "properties": {
        "expirationDate": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "regKey": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "expirationDate",
        "regKey"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ResetApiClientSecretResponse": {
      "properties": {
        "clientId": {
          "type": "string"
        },
        "secret": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "RestorableArchiveDetail": {
      "description": "Information about an archive's ownership and its restore location.",
      "properties": {
        "archiveId": {
          "$ref": "#/definitions/ArchiveGuid"
        },
        "destinationId": {
          "$ref": "#/definitions/DestinationGuid"
        },
        "destinationName": {
          "type": "string"
        },
        "deviceId": {
          "$ref": "#/definitions/ComputerGuid"
        },
        "deviceName": {
          "type": "string"
        },
        "principalId": {
          "type": "string"
        },
        "storageNodeWebUrl": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "RestorableArchiveDetailsResponse": {
      "description": "Information about all the archives found.",
      "properties": {
        "restorableArchiveDetails": {
          "items": {
            "$ref": "#/definitions/RestorableArchiveDetail"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "RestoreGroup": {
      "properties": {
        "backupSetId": {
          "description": "The id of the backup set to restore from\n_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "files": {
          "description": "The files to be restored\n_List_\n_Required._",
          "items": {
            "$ref": "#/definitions/File"
          },
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "timestamp": {
          "description": "The timestamp nearest to the file versions to be restored. If not set the time of submission will be used\n_Format_: int64\n_Optional._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "backupSetId",
        "files"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "RestoreHistoryEventDto": {
      "properties": {
        "acceptingDeviceId": {
          "format": "int64",
          "type": "integer"
        },
        "acceptingDeviceName": {
          "type": "string"
        },
        "acceptingDeviceOsHostname": {
          "type": "string"
        },
        "acceptingDeviceOsName": {
          "type": "string"
        },
        "acceptingDeviceOsVersion": {
          "type": "string"
        },
        "acceptingType": {
          "type": "string"
        },
        "acceptingUserFirstName": {
          "type": "string"
        },
        "acceptingUserId": {
          "format": "int32",
          "type": "integer"
        },
        "acceptingUserLastName": {
          "type": "string"
        },
        "acceptingUsername": {
          "type": "string"
        },
        "completedDate": {
          "type": "string"
        },
        "rateBytesPerSecond": {
          "format": "int64",
          "type": "integer"
        },
        "requestingUserId": {
          "format": "int32",
          "type": "integer"
        },
        "restoreBytes": {
          "format": "int64",
          "type": "integer"
        },
        "restoreFiles": {
          "format": "int64",
          "type": "integer"
        },
        "restoreId": {
          "format": "int64",
          "type": "integer"
        },
        "sourceOrgId": {
          "format": "int32",
          "type": "integer"
        },
        "sourceUserId": {
          "format": "int32",
          "type": "integer"
        },
        "startDate": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "RestoreHistoryResponse": {
      "properties": {
        "events": {
          "items": {
            "$ref": "#/definitions/RestoreHistoryEventDto"
          },
          "type": "array"
        },
        "totalSize": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "RestoreRecordComplete_Update": {
      "description": "Marks a restore record identified by restore id as complete (non-null completion date).",
      "properties": {
        "completionDate": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "restoreRecordId": {
          "description": "_Format_: int64\n_Required._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "completionDate",
        "restoreRecordId"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "Restore_Push": {
      "description": "Restore files to a provided crashplan client",
      "properties": {
        "acceptingComputerGuid": {
          "description": "The device to restore to\n_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "existingFiles": {
          "description": "Strategy for dealing with existing files\n_Values_: [OVERWRITE_ORIGINAL, RENAME_ORIGINAL].\n_Optional._",
          "enum": [
            "OVERWRITE_ORIGINAL",
            "RENAME_ORIGINAL"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        },
        "fileLocation": {
          "description": "Strategy for where to restore the files to\n_Values_: [ORIGINAL_LOCATION, TARGET_DIRECTORY].\n_Optional._",
          "enum": [
            "ORIGINAL_LOCATION",
            "TARGET_DIRECTORY"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        },
        "filePermissions": {
          "description": "Strategy for assigning file permissions to restored files\n_Values_: [CURRENT, ORIGINAL].\n_Optional._",
          "enum": [
            "CURRENT",
            "ORIGINAL"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        },
        "legalHoldUid": {
          "description": "Identifier for a relevant legal hold\n_Format_: guid\n_Optional._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "numBytes": {
          "description": "The bytes of data being restored (for indicating progress)\n_Format_: int64\n_Optional._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "numFiles": {
          "description": "The number of files being restored (for indicating progress)\n_Format_: int32\n_Optional._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "permitRestoreToDifferentOsVersion": {
          "description": "Allow restore to a different OS than the one originally backed up from\n_Optional._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "requestingLocalIp": {
          "description": "Requesting local IP\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "restoreFullPath": {
          "description": "Restore all directories above the restored files\n_Optional._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "restoreGroups": {
          "description": "The groups of files to restore given a backup set and timestamp\n_List_\n_Required._",
          "items": {
            "$ref": "#/definitions/RestoreGroup"
          },
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "restorePath": {
          "description": "Path to restore the files to. Required and only used when pushRestoreStrategy is ORIGINAL_LOCATION\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "showDeleted": {
          "description": "Are deleted files and directories shown\n_Optional._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "sourceComputerGuid": {
          "description": "The guid of the source device\n_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "targetNodeGuid": {
          "description": "The storage node to restore from\n_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "userLocalTime": {
          "description": "User local time for when the event occured\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "webRestoreSessionId": {
          "description": "The id of the current web restore session\n_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "acceptingComputerGuid",
        "restoreGroups",
        "sourceComputerGuid",
        "targetNodeGuid",
        "webRestoreSessionId"
      ],
      "type": "object",
      "x-code42-visibility": "public",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "Restore_Web": {
      "description": "Create web restores given with one or more paths and planUids",
      "properties": {
        "expireJob": {
          "description": "Should the job expire after a set amount of time?\n_Optional._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "numBytes": {
          "description": "The bytes of data being restored (for indicating progress)\n_Format_: int64\n_Optional._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "numDirs": {
          "description": "The number of directories being restored (for indicating progress)\n_Format_: int32\n_Optional._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "numFiles": {
          "description": "The number of files being restored (for indicating progress)\n_Format_: int32\n_Optional._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "requestingLocalIp": {
          "description": "Requesting local IP\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "restoreFullPath": {
          "description": "Restore all directories above the restored files\n_Optional._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "restoreGroups": {
          "description": "The groups of files to restore given a backup set and timestamp\n_List_\n_Required._",
          "items": {
            "$ref": "#/definitions/RestoreGroup"
          },
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "restoreToServer": {
          "description": "Restore to the target storage node instead of zipping for download\n_Optional._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "showDeleted": {
          "description": "Are deleted files and directories shown\n_Optional._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "sourceComputerGuid": {
          "description": "The guid of the source device\n_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "userLocalTime": {
          "description": "User local time for when the event occured\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "webRestoreSessionId": {
          "description": "The id of the current web restore session\n_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "restoreGroups",
        "sourceComputerGuid",
        "webRestoreSessionId"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "RetentionPolicyCreateOrUpdateRequest": {
      "properties": {
        "backupFrequencyMillis": {
          "description": "Backup files after this many millis\n_Format_: int64\n_Optional._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "keepDeleted": {
          "description": "Keep deleted files forever?\n_Optional._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "keepDeletedMinutes": {
          "description": "How long should deleted files be kept?\n_Format_: int32\n_Optional._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "versionLastNinetyDaysIntervalMinutes": {
          "description": "Versions to keep from the last 90 days\n_Format_: int32\n_Optional._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "versionLastWeekIntervalMinutes": {
          "description": "Versions to keep from the last week\n_Format_: int32\n_Optional._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "versionLastYearIntervalMinutes": {
          "description": "Versions to keep from the last year\n_Format_: int32\n_Optional._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "versionPrevYearsIntervalMinutes": {
          "description": "Versions to keep from the previous year\n_Format_: int32\n_Optional._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        }
      },
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "RetentionPolicyResponse": {
      "properties": {
        "backupFrequencyMillis": {
          "description": "Backup files after this many millis\n_Format_: int64\n_Required._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "keepDeleted": {
          "description": "Keep deleted files forever?\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "keepDeletedMinutes": {
          "description": "How long should deleted files be kept?\n_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "versionLastNinetyDaysIntervalMinutes": {
          "description": "Versions to keep from the last 90 days\n_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "versionLastWeekIntervalMinutes": {
          "description": "Versions to keep from the last week\n_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "versionLastYearIntervalMinutes": {
          "description": "Versions to keep from the last year\n_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "versionPrevYearsIntervalMinutes": {
          "description": "Versions to keep from the previous year\n_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        }
      },
      "required": [
        "backupFrequencyMillis",
        "keepDeleted",
        "keepDeletedMinutes",
        "versionLastNinetyDaysIntervalMinutes",
        "versionLastWeekIntervalMinutes",
        "versionLastYearIntervalMinutes",
        "versionPrevYearsIntervalMinutes"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "RoleData": {
      "properties": {
        "creationDate": {
          "description": "Date and time this role created.\n_Format_: date-time\n_Required._",
          "format": "date-time",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "locked": {
          "description": "Role cannot be removed.\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "modificationDate": {
          "description": "Date and time this role last modified.\n_Format_: date-time\n_Required._",
          "format": "date-time",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "numberOfUsers": {
          "description": "Number of users with the role.\n_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "permissions": {
          "description": "Permissions held by this role.\n_List_\n_Required._",
          "items": {
            "$ref": "#/definitions/RoleQueryData_permissions"
          },
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "roleId": {
          "description": "Unique ID for the role.\nAlphanumeric (inc. hyphen) without spaces\nhas length between 1 and 64, inclusive\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "roleName": {
          "description": "Name for the role.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "creationDate",
        "locked",
        "modificationDate",
        "numberOfUsers",
        "permissions",
        "roleId",
        "roleName"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "RoleInfo": {
      "properties": {
        "creationDate": {
          "description": "date and time this role was created",
          "type": "string"
        },
        "modificationDate": {
          "description": "date and time this role was last modified",
          "type": "string"
        },
        "numberOfUsers": {
          "description": "number of users with the role",
          "format": "int32",
          "type": "integer"
        },
        "permissions": {
          "description": "the permissions given to this role",
          "items": {
            "$ref": "#/definitions/PermissionInfo"
          },
          "type": "array"
        },
        "roleId": {
          "description": "unique ID for the role",
          "type": "string"
        },
        "roleName": {
          "description": "name for the role",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RolePublishResult": {
      "properties": {
        "rolesAdded": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "rolesDeleted": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "rolesUpdated": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "RoleQueryData_permissions": {
      "properties": {
        "description": {
          "description": "_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "permission": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "permission"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "RoleResponse": {
      "properties": {
        "creationDate": {
          "format": "date-time",
          "type": "string"
        },
        "modificationDate": {
          "format": "date-time",
          "type": "string"
        },
        "permissions": {
          "items": {
            "$ref": "#/definitions/PermissionResponse"
          },
          "type": "array",
          "uniqueItems": true
        },
        "roleId": {
          "type": "string"
        },
        "roleName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Role_Publish": {
      "description": "Publish all the roles and permission assignments for the directory. This command will always take in the full set<br>  of directory roles. At the end of a successful command, the directory roles in the system will match what was provided.<br>  This means adding or updating existing roles. Deleting a role will not be allowed until PL-95261. This command supports<br>  being called before or after the permission definitions are published.",
      "properties": {
        "roles": {
          "description": "The roles and their permission assignments for the directory. These roles and permissions\n    will be translated to differences with existing roles and permissions.\n_Set_\n_Required._",
          "items": {
            "$ref": "#/definitions/PublishRoleData"
          },
          "type": "array",
          "uniqueItems": true,
          "x-type": "OpenApiSchemaArrayDef"
        }
      },
      "required": [
        "roles"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "SafetyCheckResponse": {
      "properties": {
        "exists": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "SamlSettingsData": {
      "properties": {
        "authnContextClassRef": {
          "description": "Context ClassRefs.  e.g.: urn:oasis:names:tc:SAML:2.0:ac:classes:Password, urn:oasis:names:tc:SAML:2.0:ac:classes:SecureRemotePassword\n_List_\n_Required._",
          "items": {
            "description": "_Required._",
            "type": "string",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "authnContextComparison": {
          "description": "Context Comparison to use in the Authentication Request.\n_Values_: [EXACT, MINIMUM, MAXIMUM, BETTER].\n_Required._",
          "enum": [
            "EXACT",
            "MINIMUM",
            "MAXIMUM",
            "BETTER"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        },
        "displayName": {
          "description": "Display name of this Identity Provider configuration.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "modificationDate": {
          "description": "Date the Identity Provider's configuration last changed for any setting, including non-SAML specific settings.\n_Format_: date-time\n_Required._",
          "format": "date-time",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "requestAuthnDigestMethod": {
          "description": "W3C URI defining the cryptographic digest method to be used for AuthN Requests.  Example: \"http://www.w3.org/2000/09/xmldsig#sha1\"\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "requestAuthnSignatureMethod": {
          "description": "W3C URI defining the cryptographic signature method to be used for AuthN Requests.  Example: \"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "uid": {
          "description": "_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "authnContextClassRef",
        "authnContextComparison",
        "displayName",
        "modificationDate",
        "requestAuthnDigestMethod",
        "requestAuthnSignatureMethod",
        "uid"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "SamlSettingsUpdateData": {
      "properties": {
        "authnContextClassRef": {
          "description": "Context ClassRef\n_List_\n_Optional._",
          "items": {
            "description": "_Required._",
            "type": "string",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "authnContextComparison": {
          "description": "Context Comparison to use in the Authentication Request.\n_Values_: [EXACT, MINIMUM, MAXIMUM, BETTER].\n_Optional._",
          "enum": [
            "EXACT",
            "MINIMUM",
            "MAXIMUM",
            "BETTER"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        },
        "requestAuthnDigestMethod": {
          "description": "W3C URI defining the cryptographic digest method to be used for AuthN Requests.  Example: \"http://www.w3.org/2000/09/xmldsig#sha1\"\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "requestAuthnSignatureMethod": {
          "description": "W3C URI defining the cryptographic signature method to be used for AuthN Requests.  Example: \"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "uid": {
          "description": "_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "uid"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ScimGroupQueryResult": {
      "properties": {
        "scimGroups": {
          "description": "_List_\n_Required._",
          "items": {
            "$ref": "#/definitions/ScimServerGroup"
          },
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "totalCount": {
          "description": "_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        }
      },
      "required": [
        "scimGroups",
        "totalCount"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ScimServerCreateData": {
      "properties": {
        "provisioningDeactivationDelay": {
          "description": "Delay before committing deactivation requests, in minutes.\n_Format_: int64\nis in the interval [0,129600]\n_Optional._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "scimOrgAttribute": {
          "description": "SCIM custom attribute that names a user's organization.\nis not blank\nhas length between 1 and 100, inclusive\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "scimServerName": {
          "description": "Display name of this SCIM server configuration.\nis not blank\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "serverType": {
          "description": "Source descriptor for determining available functionality and defaults.\n_Values_: [GENERIC, C42CONNECTOR].\n_Optional._",
          "enum": [
            "GENERIC",
            "C42CONNECTOR"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        }
      },
      "required": [
        "scimServerName"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ScimServerCreateResult": {
      "properties": {
        "credentialPassword": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "scimServer": {
          "$ref": "#/definitions/ScimServerData"
        }
      },
      "required": [
        "credentialPassword",
        "scimServer"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ScimServerData": {
      "properties": {
        "creationDate": {
          "description": "Date this configuration created.\n_Format_: date-time\n_Required._",
          "format": "date-time",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "defaultOrgId": {
          "description": "Default organization ID for assigning users.\n_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "modificationDate": {
          "description": "Date this configuration last updated.\n_Format_: date-time\n_Required._",
          "format": "date-time",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "orgMappingType": {
          "description": "Processing type for determining user organizations.\n_Values_: [DEFAULT, ATTRIBUTE, MAPPING].\n_Required._",
          "enum": [
            "DEFAULT",
            "ATTRIBUTE",
            "MAPPING"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        },
        "provisioningDeactivationDelay": {
          "description": "Delay before committing deactivation requests, in minutes.\n_Format_: int64\nis in the interval [0,129600]\n_Required._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "roleMappingType": {
          "description": "Processing type for determining user roles.\n_Values_: [NONE, GROUP, ATTRIBUTE].\n_Required._",
          "enum": [
            "NONE",
            "GROUP",
            "ATTRIBUTE"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        },
        "scimBaseUrl": {
          "description": "Base URL for the SCIM API.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "scimGroupOrgMap": {
          "description": "Mapping from SCIM group to Code42 organization, in priority order.\n_List_\n_Required._",
          "items": {
            "$ref": "#/definitions/GroupOrgMapping"
          },
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "scimGroupRoleMap": {
          "additionalProperties": {
            "description": "_List_ (Must have at least one entry.)\n_Required._",
            "items": {
              "description": "Alphanumeric (inc. hyphen) without spaces\nhas length between 1 and 64, inclusive\n_Required._",
              "type": "string",
              "x-type": "OpenApiSchemaBasicDef"
            },
            "minItems": 1,
            "type": "array",
            "uniqueItems": false,
            "x-type": "OpenApiSchemaArrayDef"
          },
          "description": "Mapping from SCIM group to Code42 role. Used when Roles are assigned by Group membership.\n_Map_\n_Required._",
          "type": "object",
          "x-type": "OpenApiSchemaMapDef"
        },
        "scimOrgAttribute": {
          "description": "SCIM custom attribute that names a user's organization.\nis not blank\nhas length between 1 and 100, inclusive\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "scimRoleAllowList": {
          "description": "List of role IDs that are allowed to be managed via SCIM.  Used when Roles are assigned by SCIM attribute.\n_List_\n_Required._",
          "items": {
            "description": "Alphanumeric (inc. hyphen) without spaces\nhas length between 1 and 64, inclusive\n_Required._",
            "type": "string",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "scimServerName": {
          "description": "Display name of this SCIM server configuration.\nis not blank\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "scimServerUid": {
          "description": "_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "scimSyncUserUid": {
          "description": "Code42 user ID used by the SCIM provider.\n_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "scimSyncUserUsername": {
          "description": "Code42 username used by the SCIM provider.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "serverType": {
          "description": "Source descriptor for determining available functionality.\n_Values_: [GENERIC, C42CONNECTOR].\n_Required._",
          "enum": [
            "GENERIC",
            "C42CONNECTOR"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        }
      },
      "required": [
        "creationDate",
        "defaultOrgId",
        "modificationDate",
        "orgMappingType",
        "provisioningDeactivationDelay",
        "roleMappingType",
        "scimBaseUrl",
        "scimGroupOrgMap",
        "scimGroupRoleMap",
        "scimOrgAttribute",
        "scimRoleAllowList",
        "scimServerName",
        "scimServerUid",
        "scimSyncUserUid",
        "scimSyncUserUsername",
        "serverType"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ScimServerGroup": {
      "properties": {
        "groupName": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "scimGroupUid": {
          "description": "_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "groupName",
        "scimGroupUid"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ScimServerQueryResult": {
      "properties": {
        "scimServers": {
          "description": "_List_\n_Required._",
          "items": {
            "$ref": "#/definitions/ScimServerData"
          },
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "totalCount": {
          "description": "_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        }
      },
      "required": [
        "scimServers",
        "totalCount"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ScimServerUpdateData": {
      "properties": {
        "defaultOrgId": {
          "description": "Default organization ID for assigning users.\n_Format_: int32\n_Optional._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "orgMappingType": {
          "description": "Processing type for determining user organizations.\n_Values_: [DEFAULT, ATTRIBUTE, MAPPING].\n_Optional._",
          "enum": [
            "DEFAULT",
            "ATTRIBUTE",
            "MAPPING"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        },
        "provisioningDeactivationDelay": {
          "description": "Delay before committing deactivation requests, in minutes.\n_Format_: int64\nis in the interval [0,129600]\n_Optional._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "roleMappingType": {
          "description": "Processing type for determining user roles.\n_Values_: [NONE, GROUP, ATTRIBUTE].\n_Optional._",
          "enum": [
            "NONE",
            "GROUP",
            "ATTRIBUTE"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        },
        "scimGroupOrgMap": {
          "description": "Mapping from SCIM group to Code42 organization, in priority order.\n_List_\n_Optional._",
          "items": {
            "$ref": "#/definitions/GroupOrgMapping"
          },
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "scimGroupRoleMap": {
          "additionalProperties": {
            "description": "_List_ (Must have at least one entry.)\n_Required._",
            "items": {
              "description": "Alphanumeric (inc. hyphen) without spaces\nhas length between 1 and 64, inclusive\n_Required._",
              "type": "string",
              "x-type": "OpenApiSchemaBasicDef"
            },
            "minItems": 1,
            "type": "array",
            "uniqueItems": false,
            "x-type": "OpenApiSchemaArrayDef"
          },
          "description": "Mapping from SCIM group to Code42 role.\n_Map_\n_Optional._",
          "type": "object",
          "x-type": "OpenApiSchemaMapDef"
        },
        "scimOrgAttribute": {
          "description": "SCIM custom attribute that names a user's organization.\nis not blank\nhas length between 1 and 100, inclusive\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "scimRoleAllowList": {
          "description": "List of role IDs that are allowed to be managed via SCIM.  Used when Roles are assigned by SCIM attribute.\n_List_\n_Optional._",
          "items": {
            "description": "Alphanumeric (inc. hyphen) without spaces\nhas length between 1 and 64, inclusive\n_Required._",
            "type": "string",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "scimServerName": {
          "description": "Display name of this SCIM Server configuration.\nis not blank\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "scimServerUid": {
          "description": "_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "scimServerUid"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ScimServer_ApplyConfigurationToUsers": {
      "description": "Apply configuration of roles/org asynchronously to users.",
      "properties": {
        "uid": {
          "description": "UID of the Server.\n_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "uid"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ScimServer_Create": {
      "description": "Create a new SCIM server. Also SYNC_USERNAME credentials to let the SCIM provider access the Code42 server.",
      "properties": {
        "server": {
          "$ref": "#/definitions/ScimServerCreateData"
        }
      },
      "required": [
        "server"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ScimServer_Delete": {
      "description": "Delete a SCIM server. Also deactivate and block the associated credentials.",
      "properties": {
        "uid": {
          "description": "UID of the Server.\n_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "uid"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ScimServer_ResetPassword": {
      "description": "Reset the password for a SCIM Server's Sync User.",
      "properties": {
        "uid": {
          "description": "UID of the SCIM server.\n_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "uid"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ScimServer_Update": {
      "description": "Update an existing SCIM server. Missing or empty fields remain unchanged.",
      "properties": {
        "server": {
          "$ref": "#/definitions/ScimServerUpdateData"
        }
      },
      "required": [
        "server"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ScimUserDataEntry": {
      "description": "SCIM UserData for a particular user.",
      "properties": {
        "country": {
          "description": "The user's country, in ISO 3166-1 \"alpha-2\" code format.\nhas length between 2 and 2, inclusive\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "department": {
          "description": "_Optional._",
          "format": "string",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "division": {
          "description": "_Optional._",
          "format": "string",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "employmentType": {
          "description": "_Optional._",
          "format": "string",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "firstName": {
          "description": "The first name associated with the user, if present. This data is sourced from the core User record.\nhas length between 0 and 256, inclusive\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "hasScimUserData": {
          "description": "True if the user has associated SCIM UserData.\n_Optional._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "lastName": {
          "description": "The last name associated with the user, if present. This data is sourced from the core User record.\nhas length between 0 and 256, inclusive\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "locality": {
          "description": "The user's city.\nhas length between 0 and 128, inclusive\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "managerUserId": {
          "description": "The UID of the user that represents this SCIM user's manager.\nhas length between 1 and 36, inclusive\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "region": {
          "description": "The user's state.\nhas length between 0 and 128, inclusive\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "title": {
          "description": "_Optional._",
          "format": "string",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "userId": {
          "description": "The UID of the user this SCIM UserData is associated with.\nhas length between 1 and 36, inclusive\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "username": {
          "description": "The username associated with the user, if present. This data is sourced from the core User record.\nhas length between 0 and 346, inclusive\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "userId"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "Secret": {
      "properties": {
        "expirationTimestamp": {
          "description": "_Format_: int64\n_Required._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "secret": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "expirationTimestamp",
        "secret"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "SecretStoreMigrationHistoryResponse": {
      "description": "Latest update of the secret store migration history record.",
      "properties": {
        "sourceProviderInfo": {
          "$ref": "#/definitions/ProviderInfo"
        },
        "targetProviderInfo": {
          "$ref": "#/definitions/ProviderInfo"
        },
        "usersMigrated": {
          "description": "The number of users migrated",
          "format": "int32",
          "type": "integer"
        },
        "usersTotal": {
          "description": "The total number of users to be migrated",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SecretStoreProviderStatusOrMigrationResponse": {
      "description": "Information about the state of a secret store provider, either its health status or migration status",
      "properties": {
        "migrating": {
          "type": "boolean"
        },
        "migrationResponse": {
          "$ref": "#/definitions/SecretStoreMigrationHistoryResponse"
        },
        "migrationsExist": {
          "type": "boolean"
        },
        "statusResponse": {
          "$ref": "#/definitions/SecretStoreProviderStatusResponse"
        }
      },
      "title": "SecretStoreProviderStatusOrMigrationResponse",
      "type": "object"
    },
    "SecretStoreProviderStatusResponse": {
      "description": "Information about the org's secret store provider's current and recent status.",
      "properties": {
        "connectionHistory": {
          "description": "The history of connection checks for the provider",
          "items": {
            "$ref": "#/definitions/ConnectionHistory"
          },
          "type": "array"
        },
        "providerInfo": {
          "$ref": "#/definitions/ProviderInfo"
        }
      },
      "type": "object"
    },
    "SecretStoreStartMigration": {
      "description": "Information to start a secret store migration.",
      "properties": {
        "code42provider": {
          "description": "The customer is migrating to a Code42-owned secret store provider.",
          "example": false,
          "type": "boolean"
        },
        "contactEmail": {
          "description": "The email address to notify about secret store migration.",
          "example": "example@code42.com",
          "type": "string"
        },
        "targetSecretStoreProviderId": {
          "description": "The ID of the secret store to migrate to.",
          "example": 1,
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "contactEmail"
      ],
      "title": "SecretStoreStartMigration",
      "type": "object"
    },
    "SecretStoreStartMigrationPostResponse": {
      "description": "Information about the initiated secret store migration.",
      "properties": {
        "secretStoreMigrationHistoryId": {
          "format": "int32",
          "type": "integer"
        }
      },
      "title": "InitiateSecretStoreMigrationResponse",
      "type": "object"
    },
    "ServerInformationQueryData": {
      "properties": {
        "clientMgmtDisabled": {
          "description": "Client management tab is disabled.\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "cloudConnectorsEnabled": {
          "additionalProperties": {
            "description": "_Required._",
            "type": "boolean",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "description": "A map of which cloud connectors are configured and can be used. (The feature as a whole must be turned on by organization.)\n_Map_\n_Required._",
          "type": "object",
          "x-type": "OpenApiSchemaMapDef"
        },
        "clusterInfo": {
          "$ref": "#/definitions/ServerInformationQueryData_clusterInfo"
        },
        "dataCollectionEnabled": {
          "description": "Data Collection Dashboard is enabled.\n_Optional._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "env": {
          "$ref": "#/definitions/ServerInformationQueryData_env"
        },
        "highRiskEnabled": {
          "description": "High Risk Employees is enabled.\n_Optional._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "hybridProvisioningAllowed": {
          "description": "Hybrid provisioning is allowed.\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "orgConstants": {
          "$ref": "#/definitions/ServerInformationQueryData_orgConstants"
        },
        "queryLimited": {
          "description": "Database query results are limited to a maximum number of allowable rows. May change after log in. Only use on or shortly after log in.\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "securityAlertingEnabled": {
          "description": "Security Alerting is enabled.\n_Optional._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "serverInfo": {
          "$ref": "#/definitions/ServerInformationQueryData_serverInfo"
        },
        "statsEnabled": {
          "description": "Real-time statistics are enabled.\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "trustedDomainsEnabled": {
          "description": "Trusted domains is enabled.\n_Optional._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "universalProfileEnabled": {
          "description": "Universal Profile is enabled.\n_Optional._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "versionInfo": {
          "$ref": "#/definitions/ServerInformationQueryData_versionInfo"
        }
      },
      "required": [
        "clientMgmtDisabled",
        "cloudConnectorsEnabled",
        "clusterInfo",
        "env",
        "hybridProvisioningAllowed",
        "orgConstants",
        "queryLimited",
        "serverInfo",
        "statsEnabled",
        "versionInfo"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ServerInformationQueryData_clusterInfo": {
      "properties": {
        "business": {
          "description": "This is a business cluster.\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "clusterServerId": {
          "description": "ID of the cluster.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "consumer": {
          "description": "This is a consumer cluster.\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "cpc": {
          "description": "This is the Code42 cloud.\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "enterprise": {
          "description": "This is an enterprise cluster.\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "multiTenant": {
          "description": "This is a multiTenant cluster.\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "business",
        "clusterServerId",
        "consumer",
        "cpc",
        "enterprise",
        "multiTenant"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ServerInformationQueryData_env": {
      "properties": {
        "beta": {
          "description": "This is a beta environment.\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "dev": {
          "description": "This is a development environment.\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "prd": {
          "description": "This is a production environment.\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "stg": {
          "description": "This is a staging environment.\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "beta",
        "dev",
        "prd",
        "stg"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ServerInformationQueryData_orgConstants": {
      "properties": {
        "cpOrgId": {
          "description": "The administrative CrashPlan organization database ID.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "proOrgId": {
          "description": "The enterprise administrative organization database ID.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "cpOrgId",
        "proOrgId"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ServerInformationQueryData_serverInfo": {
      "properties": {
        "database": {
          "description": "Type of database in use.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "master": {
          "description": "This is a master server.\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "serverGuid": {
          "description": "GUID of the server node.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "serverId": {
          "description": "ID of the server node.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "storage": {
          "description": "This is a dedicated storage server.\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "database",
        "master",
        "serverGuid",
        "serverId",
        "storage"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ServerInformationQueryData_versionInfo": {
      "properties": {
        "buildVersion": {
          "description": "Build number of server.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "clientProductVersion": {
          "description": "Pretty name of last Code42 client version that can access this server.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "nativeClientProductVersion": {
          "description": "Pretty name of last native Code42 client version that can access this server.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "productVersion": {
          "description": "Pretty name of Code42 server version.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "version": {
          "description": "Version of Code42 server software.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "buildVersion",
        "clientProductVersion",
        "nativeClientProductVersion",
        "productVersion",
        "version"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ServerSettingsValues": {
      "description": "Structure with values which belong to the server settings entity.",
      "properties": {
        "autoUpgrade": {
          "default": true,
          "description": "_Default Value_: true",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "dirSyncIntervalHours": {
          "default": 12,
          "description": "_Format_: int32\n_Default Value_: 12",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "keystoreId": {
          "description": "_Format_: int64\n_Optional._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "mailHost": {
          "default": "\"localhost\"",
          "description": "Must be a valid looking URL.\n_Default Value_: \"localhost\"",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "mailPassword": {
          "description": "_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "mailSsl": {
          "description": "_Optional._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "mailUserName": {
          "description": "_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "maintenanceIntervalDays": {
          "default": 60,
          "description": "_Format_: int32\n_Default Value_: 60",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "maintenanceRate": {
          "default": 90,
          "description": "_Format_: int32\n_Default Value_: 90",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "migrationRate": {
          "default": 90,
          "description": "_Format_: int32\n_Default Value_: 90",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "nonLdapOrgId": {
          "description": "_Format_: int32\n_Optional._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "secureKeystore": {
          "default": false,
          "description": "_Default Value_: false",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "secureKeystoreId": {
          "description": "_Format_: int64\n_Optional._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "useHttps": {
          "default": true,
          "description": "_Default Value_: true",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "userMaintenanceRate": {
          "default": 90,
          "description": "_Format_: int32\n_Default Value_: 90",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        }
      },
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "ServerValues": {
      "description": "Structure with values which belong to the server entity.",
      "properties": {
        "address": {
          "description": "Must be a valid looking URL.\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "clusterGuid": {
          "description": "_Format_: int64\n_Optional._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "clusterServerId": {
          "description": "_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "destinationServerId": {
          "description": "_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "guid": {
          "description": "Must be unique.\n_Format_: int64\n_Required._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "lastVolumeNumber": {
          "description": "_Format_: int32\n_Optional._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "myClusterPrimaryAddressOverride": {
          "description": "Must be a valid looking URL.\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "myClusterSecondaryAddressOverride": {
          "description": "Must be a valid looking URL.\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "myClusterWebsiteOverride": {
          "description": "Must be a valid looking URL.\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "name": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "os_name": {
          "description": "_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "primaryAddress": {
          "description": "Must be a valid looking URL.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "proxyAddress": {
          "description": "Must be a valid looking URL.\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "secondaryAddress": {
          "description": "Must be a valid looking URL.\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "serverTransportKeyId": {
          "description": "_Format_: int64\n_Optional._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "spaceAddress": {
          "description": "Must be a valid looking URL.\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "spaceBindAddress": {
          "description": "Must be a valid looking URL.\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "spaceId": {
          "description": "_Format_: int64\n_Required._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "superPeerAddress": {
          "description": "Must be a valid looking URL.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "superPeerBindingAddress": {
          "description": "Must be a valid looking URL.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "websiteHost": {
          "description": "Must be a valid looking URL.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "clusterServerId",
        "destinationServerId",
        "guid",
        "name",
        "primaryAddress",
        "spaceId",
        "superPeerAddress",
        "superPeerBindingAddress",
        "websiteHost"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "SettingPacket": {
      "properties": {
        "key": {
          "description": "Key of the setting.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "locked": {
          "description": "Setting is locked.\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "value": {
          "description": "Value of the setting.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "key",
        "locked",
        "value"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "SettingQueryData": {
      "properties": {
        "id": {
          "description": "_Format_: guid\n_Optional._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "locked": {
          "default": false,
          "description": "_Default Value_: false",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "planUid": {
          "description": "_Format_: int64\n_Optional._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "scope": {
          "description": "_Values_: [SYSTEM, HOSTED_SYSTEM, ORG, ORG_PLAN, PLAN, USER, PLAN_USER, DEVICE, PLAN_DEVICE].\n_Required._",
          "enum": [
            "SYSTEM",
            "HOSTED_SYSTEM",
            "ORG",
            "ORG_PLAN",
            "PLAN",
            "USER",
            "PLAN_USER",
            "DEVICE",
            "PLAN_DEVICE"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        },
        "value": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "scope",
        "value"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "SettingQueryData2": {
      "description": "Supports settings containing HTML",
      "properties": {
        "id": {
          "description": "_Format_: guid\n_Optional._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "locked": {
          "default": false,
          "description": "_Default Value_: false",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "planUid": {
          "description": "_Format_: int64\n_Optional._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "scope": {
          "description": "_Values_: [SYSTEM, HOSTED_SYSTEM, ORG, ORG_PLAN, PLAN, USER, PLAN_USER, DEVICE, PLAN_DEVICE].\n_Required._",
          "enum": [
            "SYSTEM",
            "HOSTED_SYSTEM",
            "ORG",
            "ORG_PLAN",
            "PLAN",
            "USER",
            "PLAN_USER",
            "DEVICE",
            "PLAN_DEVICE"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        },
        "value": {
          "description": "_Required._",
          "format": "string",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "scope",
        "value"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "SettingResponse": {
      "properties": {
        "id": {
          "type": "string"
        },
        "locked": {
          "type": "boolean"
        },
        "scope": {
          "enum": [
            "SYSTEM",
            "ORG",
            "ORG_PLAN",
            "PLAN",
            "USER",
            "PLAN_USER",
            "DEVICE",
            "PLAN_DEVICE"
          ],
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SingleUseLoginTokenResponse": {
      "description": "Contains the single-use login token.",
      "title": "SingleUseLoginToken",
      "type": "object"
    },
    "SiteCloudDestination": {
      "description": "A site-licensed cloud destination along with the seats and storage in use.",
      "properties": {
        "bytesInUse": {
          "description": "Bytes of storage in use at the destination.",
          "format": "int64",
          "type": "integer"
        },
        "destinationGuid": {
          "description": "The destination's identifier.",
          "format": "int64",
          "type": "integer"
        },
        "destinationName": {
          "description": "The destination's name.",
          "type": "string"
        },
        "seatsInUse": {
          "description": "Seats in use at the destination.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SiteCloudLicense": {
      "description": "A license for unlimited users to backup to a cloud destination. A cloud site-license must start date, and end dates.",
      "properties": {
        "active": {
          "description": "Whether the license is in effect (by current date), and any other business criteria.",
          "type": "boolean"
        },
        "destinationGuid": {
          "description": "The destination to which users can backup under this license.",
          "format": "int64",
          "type": "integer"
        },
        "endDate": {
          "description": "The last date the license is in effect.",
          "format": "date",
          "type": "string"
        },
        "startDate": {
          "description": "The first date the license is in effect.",
          "format": "date",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SiteCloudLicenses": {
      "description": "A collection of cloud destination licenses with no seat limit, and their current usage.",
      "properties": {
        "licenses": {
          "description": "Site cloud storage licenses.",
          "items": {
            "$ref": "#/definitions/SiteCloudLicense"
          },
          "type": "array"
        },
        "siteCloudDestinations": {
          "description": "Site-licensed cloud destinations and their usage.",
          "items": {
            "$ref": "#/definitions/SiteCloudDestination"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SiteUserLicense": {
      "description": "The site user licenses (aka backup seat licenses with no seat count).",
      "properties": {
        "active": {
          "description": "Whether the license is in effect (by current date), and any other business criteria.",
          "type": "boolean"
        },
        "endDate": {
          "description": "The last date the license is in effect.",
          "format": "date",
          "type": "string"
        },
        "startDate": {
          "description": "The first date the license is in effect.",
          "format": "date",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SiteUserLicenses": {
      "description": "A collection of user licenses with no seat count.",
      "properties": {
        "licenses": {
          "description": "The site user licenses (aka backup seat licenses with no seat count).",
          "items": {
            "$ref": "#/definitions/SiteUserLicense"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SmbTieredLicensingMigrationRecord": {
      "properties": {
        "customerRegistrationKey": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "migrationTime": {
          "description": "_Format_: date-time\n_Required._",
          "format": "date-time",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "orgId": {
          "description": "_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "orgUid": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "purchasingOrgId": {
          "description": "_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "purchasingOrgUid": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "state": {
          "description": "_Values_: [MIGRATED, ROLLED_BACK].\n_Required._",
          "enum": [
            "MIGRATED",
            "ROLLED_BACK"
          ],
          "type": "string",
          "x-type": "OpenApiSchemaEnumDef"
        }
      },
      "required": [
        "customerRegistrationKey",
        "migrationTime",
        "orgId",
        "orgUid",
        "purchasingOrgId",
        "purchasingOrgUid",
        "state"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "SmbTieredLicensingMigration_Migrate": {
      "description": "Migrate an smb org to support licensing",
      "properties": {
        "customerRegistrationKey": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "orgId": {
          "description": "_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "tenantUid": {
          "description": "_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "customerRegistrationKey",
        "orgId"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "SmbTieredLicensingMigration_Rollback": {
      "description": "Rollback an smb migration",
      "properties": {
        "orgId": {
          "description": "_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        }
      },
      "required": [
        "orgId"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "StandardRestRawJsonResponse": {
      "properties": {
        "rawJson": {
          "type": "string"
        },
        "status": {
          "enum": [
            "OK",
            "Created",
            "Accepted",
            "No Content",
            "Reset Content",
            "Partial Content",
            "Moved Permanently",
            "Found",
            "See Other",
            "Not Modified",
            "Use Proxy",
            "Temporary Redirect",
            "Bad Request",
            "Unauthorized",
            "Payment Required",
            "Forbidden",
            "Not Found",
            "Method Not Allowed",
            "Not Acceptable",
            "Proxy Authentication Required",
            "Request Timeout",
            "Conflict",
            "Gone",
            "Length Required",
            "Precondition Failed",
            "Request Entity Too Large",
            "Request-URI Too Long",
            "Unsupported Media Type",
            "Requested Range Not Satisfiable",
            "Expectation Failed",
            "Precondition Required",
            "Too Many Requests",
            "Request Header Fields Too Large",
            "Internal Server Error",
            "Not Implemented",
            "Bad Gateway",
            "Service Unavailable",
            "Gateway Timeout",
            "HTTP Version Not Supported",
            "Network Authentication Required"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "StorageNodeArchivesResponse": {
      "properties": {
        "storageNodes": {
          "description": "list of storage nodes that contain the requested archives\n_List_\n_Required._",
          "items": {
            "$ref": "#/definitions/StorageNodeArchivesResponseEntry"
          },
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        }
      },
      "required": [
        "storageNodes"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "StorageNodeArchivesResponseEntry": {
      "properties": {
        "destinationGuid": {
          "description": "Destination where the archive is stored\nis not empty\ndigits\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "deviceArchives": {
          "description": "list of device archives on this node\n_List_\n_Required._",
          "items": {
            "$ref": "#/definitions/DeviceArchivePair"
          },
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "storageNodeUrl": {
          "description": "Storage node where the archives are stored\nis not blank\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "destinationGuid",
        "deviceArchives",
        "storageNodeUrl"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "SupportLicense": {
      "description": "A support license is a license for a support product.",
      "properties": {
        "active": {
          "description": "Whether the license is in effect (by current date), and any other business criteria.",
          "type": "boolean"
        },
        "endDate": {
          "description": "The last date the license is in effect.",
          "format": "date",
          "type": "string"
        },
        "sku": {
          "description": "The sku of the support product.",
          "type": "string"
        },
        "startDate": {
          "description": "The first date the license is in effect.",
          "format": "date",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SupportUserCreateData": {
      "properties": {
        "password": {
          "description": "The password for the user.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "registrationKey": {
          "description": "The registration key of the Purchasing Org of the customer tenant to create the user in.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "retentionDays": {
          "description": "How many days should the support user exist. If not provided, it's up to the implementation to default to 14 days (for example.)\n_Format_: int32\n_Optional._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "username": {
          "description": "The username for the user. Must be a unique email address, ending in @code42.com.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "password",
        "registrationKey",
        "username"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "SupportUserCreateResult": {
      "properties": {
        "userUid": {
          "description": "The userUid of the user that was created.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "userUid"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "SupportUserCreationStatus": {
      "properties": {
        "enabled": {
          "description": "Whether or not creation of new support users are enabled for the tenant.\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "enabled"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "SupportUserCreation_SetEnabled": {
      "description": "Enables|Disables the ability for new support users to be created in the caller's tenant.",
      "properties": {
        "enabled": {
          "description": "_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "enabled"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "SupportUser_Create": {
      "description": "Create a support user in a given tenant. For Code42 internal use only.",
      "properties": {
        "supportUser": {
          "$ref": "#/definitions/SupportUserCreateData"
        }
      },
      "required": [
        "supportUser"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "SupportUser_Deactivate": {
      "description": "Deactivate a support user. For Code42 internal use only.",
      "properties": {
        "userUid": {
          "description": "The userUid of the support user to deactivate.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "userUid"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "SyncUserPassword": {
      "properties": {
        "credentialPassword": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "credentialPassword"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "SystemSetting_Remove": {
      "description": "Delete system-level settings.",
      "properties": {
        "keys": {
          "description": "Comma-separated list of keys identifying settings to delete.\n_List_ (Must have at least one entry.)\n_Required._",
          "items": {
            "description": "_Required._",
            "type": "string",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "minItems": 1,
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        }
      },
      "required": [
        "keys"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "SystemSetting_Update": {
      "description": "Create or update system-level settings.",
      "properties": {
        "packets": {
          "description": "_List_ (Must have at least one entry.)\n_Required._",
          "items": {
            "$ref": "#/definitions/SettingPacket"
          },
          "minItems": 1,
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        }
      },
      "required": [
        "packets"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "TempAgentResponse": {
      "description": "An agent's details.",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "agentHealthIssueTypes": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "agentId": {
          "format": "int64",
          "type": "integer"
        },
        "agentType": {
          "description": "Type of agent",
          "enum": [
            "CODE42AAT",
            "COMBINED",
            "CODE42"
          ],
          "type": "string"
        },
        "appVersion": {
          "type": "string"
        },
        "creationDate": {
          "format": "date-time",
          "type": "string"
        },
        "externalReference": {
          "type": "string"
        },
        "lastConnected": {
          "format": "date-time",
          "type": "string"
        },
        "machineId": {
          "type": "string"
        },
        "modificationDate": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "osHostname": {
          "type": "string"
        },
        "osName": {
          "type": "string"
        },
        "productVersion": {
          "type": "string"
        },
        "serialNumber": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "TempAgentUpdateRequest": {
      "properties": {
        "extRef": {
          "type": "string"
        },
        "externalReference": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "TenantSsoSettingsResponse": {
      "properties": {
        "hasAuthenticationProvider": {
          "type": "boolean"
        },
        "hasProvisioningProvider": {
          "type": "boolean"
        },
        "ssoSettingsNeedClearing": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "TenantUid": {
      "properties": {
        "defaultSystemTenant": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "TierLicense": {
      "description": "A tier license is a license for a tier product.",
      "properties": {
        "active": {
          "description": "Whether the license is in effect (by current date), and any other business criteria.",
          "type": "boolean"
        },
        "cloudStorageAllowance": {
          "description": "The cloud storage bytes per user allowance. If the tier itself includes cloud storage, then an empty value here means \"unlimited\").",
          "format": "int64",
          "type": "integer"
        },
        "endDate": {
          "description": "The last date the license is in effect.",
          "format": "date",
          "type": "string"
        },
        "seatsPurchased": {
          "description": "The number of tier seats licensed.",
          "format": "int32",
          "type": "integer"
        },
        "sku": {
          "description": "The sku of the tier product.",
          "type": "string"
        },
        "startDate": {
          "description": "The first date the license is in effect.",
          "format": "date",
          "type": "string"
        }
      },
      "type": "object"
    },
    "TotpAuthFactorCreateSecretKeyResult": {
      "properties": {
        "secretKey": {
          "description": "The generated secret key\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "secretKey"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "TotpAuthFactor_CompleteConfiguration": {
      "description": "Completes the registration process for the user.",
      "properties": {
        "password": {
          "description": "The password for the user.\n_Required._",
          "format": "string",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "totp": {
          "description": "The time-based one-time password.\n_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "username": {
          "description": "The username for the user.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "password",
        "totp",
        "username"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "TotpAuthFactor_CreateSecretKey": {
      "description": "Creates a secret key for the specified user.",
      "properties": {
        "password": {
          "description": "The password for the user.\n_Required._",
          "format": "string",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "username": {
          "description": "The username for the user.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "password",
        "username"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "TotpAuthFactor_RemoveSecretKey": {
      "description": "Removes a secret key from the user specified in the parameter.",
      "properties": {
        "totp": {
          "description": "The time-based one-time password. This is required if the user is attempting to remove their own secret. An admin should not pass in a TOTP, and if they do it will be ignored.\n_Format_: int32\n_Optional._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "username": {
          "description": "The username for the user we are removing the secret for.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "username"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "UpdateApiClientRequest": {
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "productRoles": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "UpdateApiClientResponse": {
      "properties": {
        "clientId": {
          "type": "string"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "lastRedeemedDate": {
          "format": "date-time",
          "type": "string"
        },
        "modifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "productRoles": {
          "items": {
            "$ref": "#/definitions/ProductRoleResponse"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "UpdateOrgRequest": {
      "properties": {
        "notes": {
          "description": "The updated notes for the org.",
          "type": "string"
        },
        "orgExtRef": {
          "description": "The updated external reference for the org.",
          "type": "string"
        },
        "orgName": {
          "description": "The updated name for the org.",
          "type": "string"
        }
      },
      "required": [
        "orgName"
      ],
      "type": "object"
    },
    "UpdateOrgRequestInternal": {
      "properties": {
        "notes": {
          "description": "Optional descriptive information.",
          "type": "string"
        },
        "orgExtRef": {
          "description": "Optional external reference information, such as a serial number, asset tag, employee ID, or help desk issue ID.",
          "type": "string"
        },
        "orgName": {
          "description": "Name of the organization.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UpdateRolesRequest": {
      "properties": {
        "roleIds": {
          "description": "List of roleIds to be the set of roles assigned to the user",
          "items": {
            "description": "List of roleIds to be the set of roles assigned to the user",
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "UpdateRolesResult": {
      "properties": {
        "ignoredRoleIds": {
          "description": "Role identifiers of any roles that were ignored due to the role not being found.",
          "items": {
            "description": "Role identifiers of any roles that were ignored due to the role not being found.",
            "type": "string"
          },
          "type": "array"
        },
        "newlyAssignedRoleIds": {
          "description": "Role identifiers of any roles that were assigned to the user.",
          "items": {
            "description": "Role identifiers of any roles that were assigned to the user.",
            "type": "string"
          },
          "type": "array"
        },
        "processedReplacementRoleIds": {
          "description": "Role identifiers from the replacement set that were successfully processed",
          "items": {
            "description": "Role identifiers from the replacement set that were successfully processed",
            "type": "string"
          },
          "type": "array"
        },
        "unassignedRoleIds": {
          "description": "Role identifiers of any roles that were unassigned from the user.",
          "items": {
            "description": "Role identifiers of any roles that were unassigned from the user.",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "UpgradeForOrg": {
      "properties": {
        "appBuildVersion": {
          "description": "_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "appProductVersion": {
          "description": "_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "buildNumber": {
          "description": "_Format_: int64\n_Required._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "effectiveDate": {
          "description": "_Format_: date\n_Optional._",
          "format": "date",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "orgId": {
          "description": "_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "orgName": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "orgType": {
          "description": "_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "productVersion": {
          "description": "_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "upgradeDelay": {
          "description": "_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        },
        "version": {
          "description": "_Format_: int64\n_Required._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "buildNumber",
        "orgId",
        "orgName",
        "orgType",
        "upgradeDelay",
        "version"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "User": {
      "properties": {
        "deviceUid": {
          "example": "24681",
          "title": "Unique identifier for the device. Null if the file event occurred on a cloud provider.",
          "type": "string",
          "x-nullable": true
        },
        "email": {
          "example": "cody@example.com",
          "title": "The Code42 username used to sign in to the Code42 app on the device. Null if the file event occurred on a cloud provider.",
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "example": "1138",
          "title": "Unique identifier for the user of the Code42 app on the device. Null if the file event occurred on a cloud provider.",
          "type": "string",
          "x-nullable": true
        }
      },
      "title": "Attributes of the the Code42 username signed in to the Code42 app on the device.",
      "type": "object"
    },
    "UserGuidResponse": {
      "description": "principal Id of the user",
      "properties": {
        "principalId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserLicense": {
      "description": "A user license is backup seat license usually associated with a tier product. A user seat license must have a seat count, start date, and end dates.",
      "properties": {
        "active": {
          "description": "Whether the license is in effect (by current date), and any other business criteria.",
          "type": "boolean"
        },
        "endDate": {
          "description": "The last date the license is in effect.",
          "format": "date",
          "type": "string"
        },
        "seatsPurchased": {
          "description": "The number of users (aka seats) permitted to backup under this license.",
          "format": "int32",
          "type": "integer"
        },
        "startDate": {
          "description": "The first date the license is in effect.",
          "format": "date",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserLicenses": {
      "description": "A collection of user licenses.",
      "properties": {
        "licenses": {
          "description": "The user licenses (aka backup seat licenses).",
          "items": {
            "$ref": "#/definitions/UserLicense"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "UserListDataResponse": {
      "properties": {
        "active": {
          "type": "boolean"
        },
        "agentCounts": {
          "$ref": "#/definitions/AgentCountResponse"
        },
        "blocked": {
          "type": "boolean"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "principalId": {
          "type": "string"
        },
        "totalCloudArchiveBytes": {
          "format": "int64",
          "type": "integer"
        },
        "userId": {
          "format": "int32",
          "type": "integer"
        },
        "userName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserListResponse": {
      "description": "One 'page' of user data.",
      "properties": {
        "totalResultCount": {
          "format": "int32",
          "type": "integer"
        },
        "users": {
          "items": {
            "$ref": "#/definitions/UserListDataResponse"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "UserMoveOrgRequest": {
      "description": "The request containing the org GUID of the org to move the user to.",
      "properties": {
        "orgGuid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserMoveRequest": {
      "properties": {
        "orgId": {
          "description": "orgId or orgGuid of the organization to be the new parent org of the user",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserPasswordResetAuthenticated_Add": {
      "description": "Send email to user telling how to reset password.",
      "properties": {
        "userId": {
          "description": "The ID of the user whose password needs resetting.\n_Format_: int32\n_Required._",
          "example": 1,
          "format": "int32",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDefWithIntExample"
        }
      },
      "required": [
        "userId"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "UserPasswordReset_Request": {
      "description": "Sends an email to the provided username or email showing them how to reset their password.",
      "properties": {
        "email": {
          "description": "_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "username": {
          "description": "Username of user\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "UserPasswordReset_Update": {
      "description": "Updates the password to a new one that the user has entered.",
      "properties": {
        "password": {
          "description": "New password to assign to user\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "token": {
          "description": "Token assigned to the password reset request\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "password",
        "token"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "UserPrincipal": {
      "properties": {
        "email": {
          "description": "Email of the user principal.\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "externalReference": {
          "description": "The external reference of the user principal. May exist if and only if this principal is a user\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "firstName": {
          "description": "The first name of the user principal. May exist if and only if this principal is a user\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "lastName": {
          "description": "The last name of the user principal. May exist if and only if this principal is a user\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "UserPrincipalDto": {
      "properties": {
        "email": {
          "type": "string"
        },
        "externalReference": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "userUid": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserResponse": {
      "properties": {
        "active": {
          "type": "boolean"
        },
        "blocked": {
          "type": "boolean"
        },
        "creationDate": {
          "format": "date-time",
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "legacyOrgId": {
          "type": "string"
        },
        "legacyUserId": {
          "type": "string"
        },
        "modificationDate": {
          "format": "date-time",
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "orgGuid": {
          "type": "string"
        },
        "orgId": {
          "type": "string"
        },
        "orgName": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserRoleData": {
      "properties": {
        "creationDate": {
          "description": "Date and time this relationship was created",
          "format": "date-time",
          "type": "string"
        },
        "modificationDate": {
          "description": "Date and time this relationship was last modified",
          "format": "date-time",
          "type": "string"
        },
        "permissionIds": {
          "description": "the permissions given to this role",
          "items": {
            "description": "the permissions given to this role",
            "type": "string"
          },
          "type": "array"
        },
        "roleId": {
          "description": "ID of the role assigned to the user",
          "type": "string"
        },
        "roleName": {
          "description": "name of the role assigned to the user",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserRolePublishDefinition": {
      "properties": {
        "allowedPrincipalTypes": {
          "items": {
            "enum": [
              "USR",
              "SVC",
              "DEVICE",
              "API_CLIENT"
            ],
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "description": {
          "type": "string"
        },
        "hidden": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "permissions": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "roleId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserRolePublishRequest": {
      "properties": {
        "roles": {
          "items": {
            "$ref": "#/definitions/UserRolePublishDefinition"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "UserRoleResponse": {
      "properties": {
        "creationDate": {
          "format": "date-time",
          "type": "string"
        },
        "modificationDate": {
          "format": "date-time",
          "type": "string"
        },
        "permissionIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "roleId": {
          "type": "string"
        },
        "roleName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserRoleUpdateRequest": {
      "description": "The request containing the role IDs to assign the new user (ex: desktop-user). These will replace the existing roles assigned to the user.",
      "properties": {
        "roleIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "UserRoleUpdateResponse": {
      "properties": {
        "ignoredRoleIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "newlyAssignedRoleIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "processedReplacementRoleIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "unassignedRoleIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "UserSetting_Remove": {
      "description": "Delete user-level settings.",
      "properties": {
        "keys": {
          "description": "Comma-separated list of keys identifying settings to delete.\n_List_ (Must have at least one entry.)\n_Required._",
          "items": {
            "description": "_Required._",
            "type": "string",
            "x-type": "OpenApiSchemaBasicDef"
          },
          "minItems": 1,
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "userUid": {
          "description": "The user's UID. Defaults to the current user.\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "keys"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "UserSetting_Update": {
      "description": "Create or update user-level settings.",
      "properties": {
        "packets": {
          "description": "_List_ (Must have at least one entry.)\n_Required._",
          "items": {
            "$ref": "#/definitions/SettingPacket"
          },
          "minItems": 1,
          "type": "array",
          "uniqueItems": false,
          "x-type": "OpenApiSchemaArrayDef"
        },
        "userUid": {
          "description": "The user's UID. Defaults to the current user.\n_Optional._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "packets"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "UsersResponse": {
      "properties": {
        "totalCount": {
          "format": "int32",
          "type": "integer"
        },
        "users": {
          "items": {
            "$ref": "#/definitions/UserResponse"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ValidateResult": {
      "properties": {
        "token": {
          "description": "A new token\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "username": {
          "description": "Name of the user represented by the token.\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "token",
        "username"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "VaultSecretStoreProviderResource": {
      "properties": {
        "runtime": {
          "$ref": "#/definitions/CoreRuntime"
        }
      },
      "type": "object"
    },
    "VaultSecretStoreProviderUpdatePostResponse": {
      "description": "Information about the updated secret store record.",
      "properties": {
        "status": {
          "enum": [
            "Succeeded",
            "BadUrl",
            "BadPassword",
            "BadPKCS12File",
            "InternalError",
            "NoConnection",
            "VaultUnavailable",
            "Unknown"
          ],
          "type": "string"
        }
      },
      "title": "SecretStoreProviderUpdateResponse",
      "type": "object"
    },
    "WebRestoreJob": {
      "properties": {
        "bytesZipped": {
          "description": "The number of bytes zipped\n_Format_: int64\n_Optional._",
          "format": "int64",
          "type": "integer",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "canceled": {
          "description": "Was the restore cancelled\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "creationDate": {
          "description": "The date when the restore job was created\n_Format_: date\n_Optional._",
          "format": "date",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "done": {
          "description": "Has the restore completed\n_Required._",
          "type": "boolean",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "expirationDate": {
          "description": "The longest the restore job will last before expiring\n_Format_: date\n_Optional._",
          "format": "date",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "jobId": {
          "description": "The guid of this restore job\n_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "name": {
          "description": "The name of the restore job\n_Required._",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "sourceComputerGuid": {
          "description": "the guid of the source computer we are restoring from\n_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        },
        "userId": {
          "description": "The user who requested the restore job\n_Format_: guid\n_Required._",
          "format": "guid",
          "type": "string",
          "x-type": "OpenApiSchemaBasicDef"
        }
      },
      "required": [
        "canceled",
        "done",
        "jobId",
        "name",
        "sourceComputerGuid",
        "userId"
      ],
      "type": "object",
      "x-code42-visibility": "internal",
      "x-hidden": false,
      "x-type": "OpenApiSchemaObjectDef"
    },
    "WatchlistDeprecatedSdk.Model.AddExcludedUsersRequest": {
      "additionalProperties": false,
      "description": "AddExcludedUsersRequest",
      "properties": {
        "userIds": {
          "description": "A list of user IDs to add.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "WatchlistDeprecatedSdk.Model.AddIncludedDepartmentsRequest": {
      "additionalProperties": false,
      "description": "AddIncludedDepartmentsRequest",
      "properties": {
        "departments": {
          "description": "A list of departments to add.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "WatchlistDeprecatedSdk.Model.AddIncludedDirectoryGroupsRequest": {
      "additionalProperties": false,
      "description": "AddIncludedDirectoryGroupsRequest",
      "properties": {
        "groupIds": {
          "description": "A list of group IDs to add.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "WatchlistDeprecatedSdk.Model.AddIncludedUsersRequest": {
      "additionalProperties": false,
      "description": "AddIncludedUsersRequest",
      "properties": {
        "userIds": {
          "description": "A list of user IDs to add.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "watchlistId": {
          "description": "A unique watchlist ID.",
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "WatchlistDeprecatedSdk.Model.CreateWatchlistRequest": {
      "additionalProperties": false,
      "description": "CreateWatchlistRequest",
      "properties": {
        "description": {
          "description": "The optional description of a custom watchlist.",
          "type": "string",
          "x-nullable": true
        },
        "title": {
          "description": "The required title for a custom watchlist.",
          "type": "string",
          "x-nullable": true
        },
        "watchlistType": {
          "description": "Gets or Sets WatchlistType",
          "enum": [
            "WATCHLISTTYPEUNSPECIFIED",
            "CONTRACTEMPLOYEE",
            "DEPARTINGEMPLOYEE",
            "ELEVATEDACCESSPRIVILEGES",
            "FLIGHTRISK",
            "HIGHIMPACTEMPLOYEE",
            "NEWEMPLOYEE",
            "PERFORMANCECONCERNS",
            "POORSECURITYPRACTICES",
            "SUSPICIOUSSYSTEMACTIVITY",
            "CUSTOM"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "WatchlistDeprecatedSdk.Model.DeleteExcludedUsersRequest": {
      "additionalProperties": false,
      "description": "DeleteExcludedUsersRequest",
      "properties": {
        "userIds": {
          "description": "A list of user IDs to delete.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "WatchlistDeprecatedSdk.Model.DeleteIncludedDepartmentsRequest": {
      "additionalProperties": false,
      "description": "DeleteIncludedDepartmentsRequest",
      "properties": {
        "departments": {
          "description": "A list of departments to delete.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "WatchlistDeprecatedSdk.Model.DeleteIncludedDirectoryGroupsRequest": {
      "additionalProperties": false,
      "description": "DeleteIncludedDirectoryGroupsRequest",
      "properties": {
        "groupIds": {
          "description": "A list of group IDs to delete.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "WatchlistDeprecatedSdk.Model.DeleteIncludedUsersRequest": {
      "additionalProperties": false,
      "description": "DeleteIncludedUsersRequest",
      "properties": {
        "userIds": {
          "description": "A list of user IDs to delete.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "watchlistId": {
          "description": "A unique watchlist ID.",
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "WatchlistDeprecatedSdk.Model.ExcludedUser": {
      "additionalProperties": false,
      "description": "ExcludedUser",
      "properties": {
        "addedTime": {
          "description": "Gets or Sets AddedTime",
          "format": "date-time",
          "type": "string"
        },
        "userId": {
          "description": "A unique user ID.",
          "type": "string",
          "x-nullable": true
        },
        "username": {
          "description": "Gets or Sets Username",
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "WatchlistDeprecatedSdk.Model.IncludedDepartment": {
      "additionalProperties": false,
      "description": "IncludedDepartment",
      "properties": {
        "addedTime": {
          "description": "Gets or Sets AddedTime",
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "description": "Gets or Sets Name",
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "WatchlistDeprecatedSdk.Model.IncludedDirectoryGroup": {
      "additionalProperties": false,
      "description": "IncludedDirectoryGroup",
      "properties": {
        "addedTime": {
          "description": "Gets or Sets AddedTime",
          "format": "date-time",
          "type": "string"
        },
        "groupId": {
          "description": "A unique group ID.",
          "type": "string",
          "x-nullable": true
        },
        "isDeleted": {
          "description": "Whether the included group was deleted by the directory provider but still referenced by the watchlist",
          "type": "boolean"
        },
        "name": {
          "description": "Gets or Sets Name",
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "WatchlistDeprecatedSdk.Model.IncludedUser": {
      "additionalProperties": false,
      "description": "IncludedUser",
      "properties": {
        "addedTime": {
          "description": "Gets or Sets AddedTime",
          "format": "date-time",
          "type": "string"
        },
        "userId": {
          "description": "A unique user ID.",
          "type": "string",
          "x-nullable": true
        },
        "username": {
          "description": "Gets or Sets Username",
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "WatchlistDeprecatedSdk.Model.ListExcludedUsersResponse": {
      "additionalProperties": false,
      "description": "ListExcludedUsersResponse",
      "properties": {
        "excludedUsers": {
          "description": "Gets or Sets ExcludedUsers",
          "items": {
            "$ref": "#/definitions/WatchlistDeprecatedSdk.Model.ExcludedUser"
          },
          "type": "array",
          "x-nullable": true
        },
        "totalCount": {
          "description": "The total count of all excluded users.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "WatchlistDeprecatedSdk.Model.ListIncludedDepartmentsResponse": {
      "additionalProperties": false,
      "description": "ListIncludedDepartmentsResponse",
      "properties": {
        "includedDepartments": {
          "description": "Gets or Sets IncludedDepartments",
          "items": {
            "$ref": "#/definitions/WatchlistDeprecatedSdk.Model.IncludedDepartment"
          },
          "type": "array",
          "x-nullable": true
        },
        "totalCount": {
          "description": "The total count of all included departments.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "WatchlistDeprecatedSdk.Model.ListIncludedDirectoryGroupsResponse": {
      "additionalProperties": false,
      "description": "ListIncludedDirectoryGroupsResponse",
      "properties": {
        "includedDirectoryGroups": {
          "description": "Gets or Sets IncludedDirectoryGroups",
          "items": {
            "$ref": "#/definitions/WatchlistDeprecatedSdk.Model.IncludedDirectoryGroup"
          },
          "type": "array",
          "x-nullable": true
        },
        "totalCount": {
          "description": "The total count of all included directory groups.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "WatchlistDeprecatedSdk.Model.ListIncludedUsersResponse": {
      "additionalProperties": false,
      "description": "ListIncludedUsersResponse",
      "properties": {
        "includedUsers": {
          "description": "A paged collection of users explictly added as included users for the list.",
          "items": {
            "$ref": "#/definitions/WatchlistDeprecatedSdk.Model.IncludedUser"
          },
          "type": "array",
          "x-nullable": true
        },
        "totalCount": {
          "description": "The total count of all included users.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "WatchlistDeprecatedSdk.Model.ListWatchlistMembersResponse": {
      "additionalProperties": false,
      "description": "ListWatchlistMembersResponse",
      "properties": {
        "totalCount": {
          "description": "The total count of all watchlist members.",
          "format": "int64",
          "type": "integer"
        },
        "watchlistMembers": {
          "description": "A paged collection of users who are members of the watchlist.  These users may have been added as an included user, or are members of an included department, etc.",
          "items": {
            "$ref": "#/definitions/WatchlistDeprecatedSdk.Model.WatchlistMember"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "WatchlistDeprecatedSdk.Model.ListWatchlistsResponse": {
      "additionalProperties": false,
      "description": "ListWatchlistsResponse",
      "properties": {
        "totalCount": {
          "description": "The total count of all watchlists.",
          "format": "int64",
          "type": "integer"
        },
        "watchlists": {
          "description": "The list of watchlists.",
          "items": {
            "$ref": "#/definitions/WatchlistDeprecatedSdk.Model.Watchlist"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "WatchlistDeprecatedSdk.Model.UpdatedWatchlist": {
      "additionalProperties": false,
      "description": "UpdatedWatchlist",
      "properties": {
        "description": {
          "description": "Description for a custom watchlist.",
          "type": "string",
          "x-nullable": true
        },
        "title": {
          "description": "Title of a custom watchlist.",
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "WatchlistDeprecatedSdk.Model.Watchlist": {
      "additionalProperties": false,
      "description": "Watchlist",
      "properties": {
        "description": {
          "description": "Description for a custom watchlist.",
          "type": "string",
          "x-nullable": true
        },
        "listType": {
          "description": "Gets or Sets ListType",
          "enum": [
            "WATCHLISTTYPEUNSPECIFIED",
            "CONTRACTEMPLOYEE",
            "DEPARTINGEMPLOYEE",
            "ELEVATEDACCESSPRIVILEGES",
            "FLIGHTRISK",
            "HIGHIMPACTEMPLOYEE",
            "NEWEMPLOYEE",
            "PERFORMANCECONCERNS",
            "POORSECURITYPRACTICES",
            "SUSPICIOUSSYSTEMACTIVITY",
            "CUSTOM"
          ],
          "type": "string"
        },
        "stats": {
          "allOf": [
            {
              "$ref": "#/definitions/WatchlistDeprecatedSdk.Model.WatchlistStats"
            }
          ],
          "description": "Gets or Sets Stats",
          "x-nullable": true
        },
        "tenantId": {
          "description": "A unique tenant ID.",
          "type": "string",
          "x-nullable": true
        },
        "title": {
          "description": "Title for a custom watchlist.",
          "type": "string",
          "x-nullable": true
        },
        "watchlistId": {
          "description": "A unique watchlist ID.",
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "WatchlistDeprecatedSdk.Model.WatchlistMember": {
      "additionalProperties": false,
      "description": "WatchlistMember",
      "properties": {
        "addedTime": {
          "description": "Gets or Sets AddedTime",
          "format": "date-time",
          "type": "string"
        },
        "userId": {
          "description": "A unique user ID.",
          "type": "string",
          "x-nullable": true
        },
        "username": {
          "description": "Gets or Sets Username",
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "WatchlistDeprecatedSdk.Model.WatchlistStats": {
      "additionalProperties": false,
      "description": "WatchlistStats",
      "properties": {
        "excludedUsersCount": {
          "description": "The number of users explicitly excluded from the watchlist.",
          "format": "int64",
          "type": "integer"
        },
        "includedDepartmentsCount": {
          "description": "The number of departments explicitly included on the watchlist.",
          "format": "int64",
          "type": "integer"
        },
        "includedDirectoryGroupsCount": {
          "description": "The number of directory groups explicitly included on the watchlist.",
          "format": "int64",
          "type": "integer"
        },
        "includedUsersCount": {
          "description": "The number of users explicitly included on the watchlist.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "WatchlistSdk.Model.AddExcludedActorsRequest": {
      "additionalProperties": false,
      "description": "AddExcludedActorsRequest",
      "properties": {
        "actorIds": {
          "description": "A list of actor IDs to add.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "WatchlistSdk.Model.AddIncludedActorsRequest": {
      "additionalProperties": false,
      "description": "AddIncludedActorsRequest",
      "properties": {
        "actorIds": {
          "description": "A list of actor IDs to add.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "watchlistId": {
          "description": "A unique watchlist ID.",
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "WatchlistSdk.Model.AddIncludedDepartmentsRequest": {
      "additionalProperties": false,
      "description": "AddIncludedDepartmentsRequest",
      "properties": {
        "departments": {
          "description": "A list of departments to add.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "WatchlistSdk.Model.AddIncludedDirectoryGroupsRequest": {
      "additionalProperties": false,
      "description": "AddIncludedDirectoryGroupsRequest",
      "properties": {
        "groupIds": {
          "description": "A list of group IDs to add.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "WatchlistSdk.Model.CreateWatchlistRequest": {
      "additionalProperties": false,
      "description": "CreateWatchlistRequest",
      "properties": {
        "description": {
          "description": "The optional description of a custom watchlist.",
          "type": "string",
          "x-nullable": true
        },
        "title": {
          "description": "The required title for a custom watchlist.",
          "type": "string",
          "x-nullable": true
        },
        "watchlistType": {
          "description": "Gets or Sets WatchlistType",
          "enum": [
            "WATCHLISTTYPEUNSPECIFIED",
            "CONTRACTEMPLOYEE",
            "DEPARTINGEMPLOYEE",
            "ELEVATEDACCESSPRIVILEGES",
            "FLIGHTRISK",
            "HIGHIMPACTEMPLOYEE",
            "NEWEMPLOYEE",
            "PERFORMANCECONCERNS",
            "POORSECURITYPRACTICES",
            "SUSPICIOUSSYSTEMACTIVITY",
            "CUSTOM"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "WatchlistSdk.Model.DeleteExcludedActorsRequest": {
      "additionalProperties": false,
      "description": "DeleteExcludedActorsRequest",
      "properties": {
        "actorIds": {
          "description": "A list of actor IDs to delete.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "WatchlistSdk.Model.DeleteIncludedActorsRequest": {
      "additionalProperties": false,
      "description": "DeleteIncludedActorsRequest",
      "properties": {
        "actorIds": {
          "description": "A list of actor IDs to delete.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "watchlistId": {
          "description": "A unique watchlist ID.",
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "WatchlistSdk.Model.DeleteIncludedDepartmentsRequest": {
      "additionalProperties": false,
      "description": "DeleteIncludedDepartmentsRequest",
      "properties": {
        "departments": {
          "description": "A list of departments to delete.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "WatchlistSdk.Model.DeleteIncludedDirectoryGroupsRequest": {
      "additionalProperties": false,
      "description": "DeleteIncludedDirectoryGroupsRequest",
      "properties": {
        "groupIds": {
          "description": "A list of group IDs to delete.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "WatchlistSdk.Model.ExcludedActor": {
      "additionalProperties": false,
      "description": "ExcludedActor",
      "properties": {
        "actorId": {
          "description": "A unique actor ID.",
          "type": "string",
          "x-nullable": true
        },
        "actorname": {
          "description": "Gets or Sets Actorname",
          "type": "string",
          "x-nullable": true
        },
        "addedTime": {
          "description": "Gets or Sets AddedTime",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "WatchlistSdk.Model.IncludedActor": {
      "additionalProperties": false,
      "description": "IncludedActor",
      "properties": {
        "actorId": {
          "description": "A unique actor ID.",
          "type": "string",
          "x-nullable": true
        },
        "actorname": {
          "description": "Gets or Sets Actorname",
          "type": "string",
          "x-nullable": true
        },
        "addedTime": {
          "description": "Gets or Sets AddedTime",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "WatchlistSdk.Model.IncludedDepartment": {
      "additionalProperties": false,
      "description": "IncludedDepartment",
      "properties": {
        "addedTime": {
          "description": "Gets or Sets AddedTime",
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "description": "Gets or Sets Name",
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "WatchlistSdk.Model.IncludedDirectoryGroup": {
      "additionalProperties": false,
      "description": "IncludedDirectoryGroup",
      "properties": {
        "addedTime": {
          "description": "Gets or Sets AddedTime",
          "format": "date-time",
          "type": "string"
        },
        "groupId": {
          "description": "A unique group ID.",
          "type": "string",
          "x-nullable": true
        },
        "isDeleted": {
          "description": "Whether the included group was deleted by the directory provider but still referenced by the watchlist",
          "type": "boolean"
        },
        "name": {
          "description": "Gets or Sets Name",
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "WatchlistSdk.Model.ListExcludedActorsResponse": {
      "additionalProperties": false,
      "description": "ListExcludedActorsResponse",
      "properties": {
        "excludedActors": {
          "description": "Gets or Sets ExcludedActors",
          "items": {
            "$ref": "#/definitions/WatchlistSdk.Model.ExcludedActor"
          },
          "type": "array",
          "x-nullable": true
        },
        "totalCount": {
          "description": "The total count of all excluded actors.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "WatchlistSdk.Model.ListIncludedActorsResponse": {
      "additionalProperties": false,
      "description": "ListIncludedActorsResponse",
      "properties": {
        "includedActors": {
          "description": "A paged collection of actors explictly added as included actors for the list.",
          "items": {
            "$ref": "#/definitions/WatchlistSdk.Model.IncludedActor"
          },
          "type": "array",
          "x-nullable": true
        },
        "totalCount": {
          "description": "The total count of all included actors.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "WatchlistSdk.Model.ListIncludedDepartmentsResponse": {
      "additionalProperties": false,
      "description": "ListIncludedDepartmentsResponse",
      "properties": {
        "includedDepartments": {
          "description": "Gets or Sets IncludedDepartments",
          "items": {
            "$ref": "#/definitions/WatchlistSdk.Model.IncludedDepartment"
          },
          "type": "array",
          "x-nullable": true
        },
        "totalCount": {
          "description": "The total count of all included departments.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "WatchlistSdk.Model.ListIncludedDirectoryGroupsResponse": {
      "additionalProperties": false,
      "description": "ListIncludedDirectoryGroupsResponse",
      "properties": {
        "includedDirectoryGroups": {
          "description": "Gets or Sets IncludedDirectoryGroups",
          "items": {
            "$ref": "#/definitions/WatchlistSdk.Model.IncludedDirectoryGroup"
          },
          "type": "array",
          "x-nullable": true
        },
        "totalCount": {
          "description": "The total count of all included directory groups.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "WatchlistSdk.Model.ListWatchlistMembersResponse": {
      "additionalProperties": false,
      "description": "ListWatchlistMembersResponse",
      "properties": {
        "totalCount": {
          "description": "The total count of all watchlist members.",
          "format": "int64",
          "type": "integer"
        },
        "watchlistMembers": {
          "description": "A paged collection of actors who are members of the watchlist.  These actors may have been added as an included actor, or are members of an included department, etc.",
          "items": {
            "$ref": "#/definitions/WatchlistSdk.Model.WatchlistMember"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "WatchlistSdk.Model.ListWatchlistsResponse": {
      "additionalProperties": false,
      "description": "ListWatchlistsResponse",
      "properties": {
        "totalCount": {
          "description": "The total count of all watchlists.",
          "format": "int64",
          "type": "integer"
        },
        "watchlists": {
          "description": "The list of watchlists.",
          "items": {
            "$ref": "#/definitions/WatchlistSdk.Model.Watchlist"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "WatchlistSdk.Model.UpdatedWatchlist": {
      "additionalProperties": false,
      "description": "UpdatedWatchlist",
      "properties": {
        "description": {
          "description": "Description for a custom watchlist.",
          "type": "string",
          "x-nullable": true
        },
        "title": {
          "description": "Title of a custom watchlist.",
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "WatchlistSdk.Model.Watchlist": {
      "additionalProperties": false,
      "description": "Watchlist",
      "properties": {
        "description": {
          "description": "Description for a custom watchlist.",
          "type": "string",
          "x-nullable": true
        },
        "listType": {
          "description": "Gets or Sets ListType",
          "enum": [
            "WATCHLISTTYPEUNSPECIFIED",
            "CONTRACTEMPLOYEE",
            "DEPARTINGEMPLOYEE",
            "ELEVATEDACCESSPRIVILEGES",
            "FLIGHTRISK",
            "HIGHIMPACTEMPLOYEE",
            "NEWEMPLOYEE",
            "PERFORMANCECONCERNS",
            "POORSECURITYPRACTICES",
            "SUSPICIOUSSYSTEMACTIVITY",
            "CUSTOM"
          ],
          "type": "string"
        },
        "stats": {
          "allOf": [
            {
              "$ref": "#/definitions/WatchlistSdk.Model.WatchlistStats"
            }
          ],
          "description": "Gets or Sets Stats",
          "x-nullable": true
        },
        "tenantId": {
          "description": "A unique tenant ID.",
          "type": "string",
          "x-nullable": true
        },
        "title": {
          "description": "Title for a custom watchlist.",
          "type": "string",
          "x-nullable": true
        },
        "watchlistId": {
          "description": "A unique watchlist ID.",
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "WatchlistSdk.Model.WatchlistMember": {
      "additionalProperties": false,
      "description": "WatchlistMember",
      "properties": {
        "actorId": {
          "description": "A unique actor ID.",
          "type": "string",
          "x-nullable": true
        },
        "actorname": {
          "description": "Gets or Sets Actorname",
          "type": "string",
          "x-nullable": true
        },
        "addedTime": {
          "description": "Gets or Sets AddedTime",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "WatchlistSdk.Model.WatchlistStats": {
      "additionalProperties": false,
      "description": "WatchlistStats",
      "properties": {
        "excludedActorsCount": {
          "description": "The number of actors explicitly excluded from the watchlist.",
          "format": "int64",
          "type": "integer"
        },
        "includedActorsCount": {
          "description": "The number of actors explicitly included on the watchlist.",
          "format": "int64",
          "type": "integer"
        },
        "includedDepartmentsCount": {
          "description": "The number of departments explicitly included on the watchlist.",
          "format": "int64",
          "type": "integer"
        },
        "includedDirectoryGroupsCount": {
          "description": "The number of directory groups explicitly included on the watchlist.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AcquiredFrom": {
      "properties": {
        "agentTimestamp": {
          "example": "2020-10-27T15:16:05.369203Z",
          "format": "date-time",
          "title": "Date and time that the Code42 service on the device detected an event; based on the device's system clock and reported in Coordinated Universal Time (UTC).",
          "type": "string",
          "x-nullable": true
        },
        "eventAction": {
          "example": "file-downloaded",
          "title": "The type of file event observed. For example: file-modified, application-read, removable-media-created.",
          "type": "string",
          "x-nullable": true
        },
        "eventId": {
          "example": "0_147e9445-2f30-4a91-8b2a-9455332e880a_973435567569502913_986467523038446097_163",
          "title": "The unique identifier for the event.",
          "type": "string",
          "x-nullable": true
        },
        "fileName": {
          "example": "example.txt",
          "title": "The name of the file, including the file extension.",
          "type": "string",
          "x-nullable": true
        },
        "git": {
          "$ref": "#/definitions/AcquiredFromGit"
        },
        "md5": {
          "example": "6123bbce7f3937667a368bbb9f3d79ce",
          "title": "The MD5 hash of the file contents.",
          "type": "string",
          "x-nullable": true
        },
        "sourceAccountName": {
          "title": "For cloud sync apps installed on user devices, the name of the cloud account where the event was observed. This can help identify if the activity occurred in a business or personal account.",
          "type": "string",
          "x-nullable": true
        },
        "sourceAccountType": {
          "title": "For cloud sync apps installed on user devices, the type of account where the event was observed. For example, 'BUSINESS' or 'PERSONAL'.",
          "type": "string",
          "x-nullable": true
        },
        "sourceCategory": {
          "example": "Social Media",
          "title": "General category of where the file originated. For example: Cloud Storage, Email, Social Media.",
          "type": "string",
          "x-nullable": true
        },
        "sourceDomains": {
          "example": "example.com",
          "items": {
            "example": "example.com",
            "title": "The domain section of the URLs reported in file.acquiredFrom.tabs.url.",
            "type": "string"
          },
          "title": "The domain section of the URLs reported in file.acquiredFrom.tabs.url.",
          "type": "array"
        },
        "sourceName": {
          "example": "Mari's MacBook",
          "title": "The name reported by the device's operating system.  This may be different than the device name in the Code42 console.",
          "type": "string",
          "x-nullable": true
        },
        "sourceUser": {
          "$ref": "#/definitions/AcquiredFromSourceUser"
        },
        "tabs": {
          "items": {
            "$ref": "#/definitions/Tab"
          },
          "title": "Metadata about the browser tab source.",
          "type": "array"
        },
        "userEmail": {
          "example": "cody@example.com",
          "title": "The Code42 username used to sign in to the Code42 app on the device (for endpoint events) or the cloud service username of the person who caused the event (for cloud events).",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "git",
        "sourceDomains",
        "sourceUser",
        "tabs"
      ],
      "title": "List of other events associated with this file. This can help determine the origin of the file.",
      "type": "object"
    },
    "AcquiredFromGit": {
      "properties": {
        "repositoryEmail": {
          "title": "The email address specified by the user who performed the Git event. This is a user-defined value and may differ from the credentials used to sign in to Git.",
          "type": "string",
          "x-nullable": true
        },
        "repositoryUri": {
          "title": "Uniform Resource Identifier (URI) for the Git repository.",
          "type": "string",
          "x-nullable": true
        },
        "repositoryUser": {
          "title": "The username specified by the user who performed the Git event. This is a user-defined value and may differ from the credentials used to sign in to Git.",
          "type": "string",
          "x-nullable": true
        }
      },
      "title": "Metadata about the Git activity associated with this event.",
      "type": "object"
    },
    "AcquiredFromSourceUser": {
      "properties": {
        "email": {
          "example": [
            "first.last@example.com",
            "first_last_example_com"
          ],
          "items": {
            "example": "[\"first.last@example.com\",\"first_last_example_com\"]",
            "title": "For endpoint events where a file in cloud storage is synced to a device, the email address of the user logged in to the cloud storage provider.",
            "type": "string"
          },
          "title": "For endpoint events where a file in cloud storage is synced to a device, the email address of the user logged in to the cloud storage provider.",
          "type": "array"
        }
      },
      "required": [
        "email"
      ],
      "title": "Metadata about the source user.",
      "type": "object"
    },
    "Destination": {
      "properties": {
        "accountName": {
          "title": "For cloud sync apps installed on user devices, the name of the cloud account where the event was observed. This can help identify if the activity occurred in a business or personal account.",
          "type": "string",
          "x-nullable": true
        },
        "accountType": {
          "example": "BUSINESS",
          "title": "For cloud sync apps installed on user devices, the type of account where the event was observed. For example, 'BUSINESS' or 'PERSONAL'.",
          "type": "string",
          "x-nullable": true
        },
        "category": {
          "example": "Social Media",
          "title": "General category of where the file originated. For example: Cloud Storage, Email, Social Media.",
          "type": "string",
          "x-nullable": true
        },
        "domains": {
          "items": {
            "title": "The domain section of the URLs reported in destination.tabs.url.",
            "type": "string"
          },
          "title": "The domain section of the URLs reported in destination.tabs.url.",
          "type": "array"
        },
        "email": {
          "$ref": "#/definitions/DestinationEmail"
        },
        "ip": {
          "example": "127.0.0.1",
          "title": "The external IP address of the user's device.",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "example": "Mari's MacBook",
          "title": "The name reported by the device's operating system.  This may be different than the device name in the Code42 console.",
          "type": "string",
          "x-nullable": true
        },
        "operatingSystem": {
          "example": "Windows 10",
          "title": "The operating system of the destination device.",
          "type": "string",
          "x-nullable": true
        },
        "printJobName": {
          "example": "printer.exe",
          "title": "For print events, the name of the print job, as reported by the user's device.",
          "type": "string",
          "x-nullable": true
        },
        "printerName": {
          "example": "OfficeJet",
          "title": "For print events, the name of the printer the job was sent to.",
          "type": "string",
          "x-nullable": true
        },
        "privateIp": {
          "example": [
            "127.0.0.1",
            "127.0.0.2"
          ],
          "items": {
            "example": "[\"127.0.0.1\",\"127.0.0.2\"]",
            "title": "The IP address of the user's device on your internal network, including Network interfaces, Virtual Network Interface controllers (NICs), and Loopback/non-routable addresses.",
            "type": "string"
          },
          "title": "The IP address of the user's device on your internal network, including Network interfaces, Virtual Network Interface controllers (NICs), and Loopback/non-routable addresses.",
          "type": "array"
        },
        "remoteHostname": {
          "title": "For events where a file transfer tool was used, the destination hostname.",
          "type": "string",
          "x-nullable": true
        },
        "removableMedia": {
          "$ref": "#/definitions/RemovableMedia"
        },
        "tabs": {
          "items": {
            "$ref": "#/definitions/Tab"
          },
          "title": "Metadata about the browser tab destination.",
          "type": "array"
        },
        "user": {
          "$ref": "#/definitions/DestinationUser"
        }
      },
      "required": [
        "domains",
        "email",
        "privateIp",
        "removableMedia",
        "tabs",
        "user"
      ],
      "title": "Metadata about the destination of the file event.",
      "type": "object"
    },
    "DestinationEmail": {
      "properties": {
        "recipients": {
          "example": [
            "cody@example.com",
            "theboss@example.com"
          ],
          "items": {
            "example": "[\"cody@example.com\",\"theboss@example.com\"]",
            "title": "The email addresses of those who received the email. Includes the To, Cc, and Bcc recipients.",
            "type": "string"
          },
          "title": "The email addresses of those who received the email. Includes the To, Cc, and Bcc recipients.",
          "type": "array"
        },
        "subject": {
          "example": "Important business documents",
          "title": "The subject of the email message.",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "recipients"
      ],
      "title": "Metadata about the destination email.",
      "type": "object"
    },
    "DestinationUser": {
      "properties": {
        "email": {
          "example": [
            "first.last@example.com",
            "first_last_example_com"
          ],
          "items": {
            "example": "[\"first.last@example.com\",\"first_last_example_com\"]",
            "title": "For endpoint events where a file in cloud storage is synced to a device, the email address of the user logged in to the cloud storage provider. For cloud events, the email addresses of users added as sharing recipients. In some case, OneDrive events may return multiple values, but this is often the same username formatted in different ways.",
            "type": "string"
          },
          "title": "For endpoint events where a file in cloud storage is synced to a device, the email address of the user logged in to the cloud storage provider. For cloud events, the email addresses of users added as sharing recipients. In some case, OneDrive events may return multiple values, but this is often the same username formatted in different ways.",
          "type": "array"
        }
      },
      "required": [
        "email"
      ],
      "title": "Metadata about the destination user.",
      "type": "object"
    },
    "Event": {
      "properties": {
        "action": {
          "example": "file-downloaded",
          "title": "The type of file event observed. For example: file-modified, application-read, removable-media-created.",
          "type": "string",
          "x-nullable": true
        },
        "detectorDisplayName": {
          "title": "Indicates the name you provided when the cloud data connection was initially configured in the Code42 console.",
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "example": "0_147e9445-2f30-4a91-8b2a-9455332e880a_973435567569502913_986467523038446097_163",
          "title": "The unique identifier for the event.",
          "type": "string"
        },
        "ingested": {
          "example": "2020-10-27T15:15:05.369203Z",
          "format": "date-time",
          "title": "Date and time the event was initially received by Code42; timestamp is based on the Code42 server system clock and reported in Coordinated Universal Time (UTC).",
          "type": "string"
        },
        "inserted": {
          "example": "2020-10-27T15:16:05.369203Z",
          "format": "date-time",
          "title": "Date and time the event processing is completed by Code42; timestamp is based on the Code42 server system clock and reported in Coordinated Universal Time (UTC). Typically occurs very soon after the event.ingested time.",
          "type": "string",
          "x-nullable": true
        },
        "observer": {
          "example": "Endpoint",
          "title": "The data source that captured the file event. For example: GoogleDrive, Office365, Salesforce.",
          "type": "string",
          "x-nullable": true
        },
        "shareType": {
          "example": [
            "SharedViaLink"
          ],
          "items": {
            "example": "[\"SharedViaLink\"]",
            "title": "Sharing types added by this event.",
            "type": "string"
          },
          "title": "Sharing types added by this event.",
          "type": "array"
        },
        "vector": {
          "example": "GIT_PUSH",
          "title": "The method of file movement. For example: UPLOADED, DOWNLOADED, EMAILED.",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "id",
        "ingested",
        "shareType"
      ],
      "title": "Summary information about the event.",
      "type": "object"
    },
    "ExportRequestSearchTermV1": {
      "properties": {
        "columns": {
          "example": [
            "eventId",
            "eventType"
          ],
          "items": {
            "enum": [
              "eventId",
              "eventType",
              "eventTimestamp",
              "insertionTimestamp",
              "filePath",
              "fileName",
              "fileType",
              "fileCategory",
              "fileCategoryByBytes",
              "fileCategoryByExtension",
              "fileSize",
              "fileOwner",
              "md5Checksum",
              "sha256Checksum",
              "createTimestamp",
              "modifyTimestamp",
              "deviceUserName",
              "deviceUid",
              "userUid",
              "osHostName",
              "domainName",
              "publicIpAddress",
              "privateIpAddresses",
              "actor",
              "directoryId",
              "source",
              "url",
              "shared",
              "sharedWith",
              "sharingTypeAdded",
              "cloudDriveId",
              "detectionSourceAlias",
              "fileId",
              "exposure",
              "processOwner",
              "processName",
              "windowTitle",
              "tabUrl",
              "tabTitles",
              "tabTitleErrors",
              "tabUrls",
              "tabUrlErrors",
              "sourceTabTitles",
              "sourceTabTitleErrors",
              "sourceTabUrls",
              "sourceTabUrlErrors",
              "fileClassificationVendors",
              "fileClassificationValues",
              "removableMediaVendor",
              "removableMediaName",
              "removableMediaSerialNumber",
              "removableMediaCapacity",
              "removableMediaBusType",
              "removableMediaMediaName",
              "removableMediaVolumeName",
              "removableMediaPartitionId",
              "syncDestination",
              "syncDestinationUsername",
              "emailDlpPolicyNames",
              "emailSubject",
              "emailSender",
              "emailFrom",
              "emailRecipients",
              "outsideActiveHours",
              "mimeTypeByBytes",
              "mimeTypeByExtension",
              "mimeTypeMismatch",
              "printJobName",
              "printerName",
              "printedFilesBackupPath",
              "remoteActivity",
              "trusted",
              "trustReason",
              "operatingSystemUser",
              "destinationCategory",
              "destinationName",
              "sourceCategory",
              "sourceName",
              "riskScore",
              "riskSeverity",
              "riskIndicatorNames",
              "riskIndicatorWeights",
              "reportName",
              "reportDescription",
              "reportColumnHeaders",
              "reportRecordCount",
              "reportType",
              "reportId"
            ],
            "example": "eventId",
            "title": "Which columns to include in the output. If none is provided, all available columnswill be output in an unspecified, not-guaranteed order.",
            "type": "string"
          },
          "title": "Which columns to include in the output. If none is provided, all available columnswill be output in an unspecified, not-guaranteed order.",
          "type": "array",
          "x-nullable": true
        },
        "groupClause": {
          "default": "AND",
          "enum": [
            "AND",
            "OR"
          ],
          "example": "OR",
          "title": "Grouping clause for any specified groups.",
          "type": "string",
          "x-nullable": true
        },
        "groups": {
          "default": [],
          "items": {
            "$ref": "#/definitions/FilterGroupSearchTermV1"
          },
          "title": "One or more FilterGroups to be combined in a query.",
          "type": "array"
        },
        "srtDir": {
          "default": "desc",
          "enum": [
            "asc",
            "desc"
          ],
          "example": "asc",
          "title": "Sort direction.",
          "type": "string",
          "x-nullable": true
        },
        "srtKey": {
          "enum": [
            "eventId",
            "eventType",
            "eventTimestamp",
            "insertionTimestamp",
            "filePath",
            "fileName",
            "fileType",
            "fileCategory",
            "fileCategoryByBytes",
            "fileCategoryByExtension",
            "fileSize",
            "fileOwner",
            "md5Checksum",
            "sha256Checksum",
            "createTimestamp",
            "modifyTimestamp",
            "deviceUserName",
            "deviceUid",
            "userUid",
            "osHostName",
            "domainName",
            "publicIpAddress",
            "privateIpAddresses",
            "actor",
            "directoryId",
            "source",
            "url",
            "shared",
            "sharedWith",
            "sharingTypeAdded",
            "cloudDriveId",
            "detectionSourceAlias",
            "fileId",
            "exposure",
            "processOwner",
            "processName",
            "windowTitle",
            "tabUrl",
            "tabTitles",
            "tabTitleErrors",
            "tabUrls",
            "tabUrlErrors",
            "sourceTabTitles",
            "sourceTabTitleErrors",
            "sourceTabUrls",
            "sourceTabUrlErrors",
            "fileClassificationVendors",
            "fileClassificationValues",
            "removableMediaVendor",
            "removableMediaName",
            "removableMediaSerialNumber",
            "removableMediaCapacity",
            "removableMediaBusType",
            "removableMediaMediaName",
            "removableMediaVolumeName",
            "removableMediaPartitionId",
            "syncDestination",
            "syncDestinationUsername",
            "emailDlpPolicyNames",
            "emailSubject",
            "emailSender",
            "emailFrom",
            "emailRecipients",
            "outsideActiveHours",
            "mimeTypeByBytes",
            "mimeTypeByExtension",
            "mimeTypeMismatch",
            "printJobName",
            "printerName",
            "printedFilesBackupPath",
            "remoteActivity",
            "trusted",
            "trustReason",
            "operatingSystemUser",
            "destinationCategory",
            "destinationName",
            "sourceCategory",
            "sourceName",
            "riskScore",
            "riskSeverity",
            "riskIndicatorNames",
            "riskIndicatorWeights",
            "reportName",
            "reportDescription",
            "reportColumnHeaders",
            "reportRecordCount",
            "reportType",
            "reportId"
          ],
          "example": "eventId",
          "title": "Search term for sorting.",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "groups"
      ],
      "type": "object"
    },
    "ExportRequestSearchTermV2": {
      "properties": {
        "columns": {
          "example": [
            "@timestamp",
            "event.id"
          ],
          "items": {
            "enum": [
              "@timestamp",
              "event.id",
              "event.inserted",
              "event.ingested",
              "event.action",
              "event.shareType",
              "event.observer",
              "event.detectorDisplayName",
              "event.vector",
              "user.email",
              "user.id",
              "user.deviceUid",
              "file.name",
              "file.originalName",
              "file.directory",
              "file.originalDirectory",
              "file.category",
              "file.mimeType",
              "file.mimeTypeByBytes",
              "file.mimeTypeByExtension",
              "file.sizeInBytes",
              "file.owner",
              "file.created",
              "file.modified",
              "file.hash.md5",
              "file.hash.sha256",
              "file.hash.md5Error",
              "file.hash.sha256Error",
              "file.id",
              "file.url",
              "file.directoryId",
              "file.cloudDriveId",
              "file.classifications.value",
              "file.classifications.vendor",
              "file.changeType",
              "file.archiveId",
              "file.parentArchiveId",
              "file.passwordProtected",
              "report.id",
              "report.name",
              "report.description",
              "report.headers",
              "report.count",
              "report.type",
              "source.category",
              "source.name",
              "source.user.email",
              "source.domain",
              "source.ip",
              "source.privateIp",
              "source.operatingSystem",
              "source.email.sender",
              "source.email.from",
              "source.remoteHostname",
              "source.removableMedia.vendor",
              "source.removableMedia.mediaName",
              "source.removableMedia.serialNumber",
              "source.removableMedia.capacity",
              "source.removableMedia.busType",
              "source.removableMedia.name",
              "source.removableMedia.volumeName",
              "source.removableMedia.partitionId",
              "source.tabs.title",
              "source.tabs.titleError",
              "source.tabs.url",
              "source.tabs.urlError",
              "source.accountName",
              "source.accountType",
              "source.domains",
              "source.identifiers",
              "source.identifier.id",
              "destination.category",
              "destination.name",
              "destination.user.email",
              "destination.ip",
              "destination.privateIp",
              "destination.operatingSystem",
              "destination.printJobName",
              "destination.printerName",
              "destination.printedFilesBackupPath",
              "destination.email.recipients",
              "destination.email.subject",
              "destination.removableMedia.vendor",
              "destination.removableMedia.mediaName",
              "destination.removableMedia.serialNumber",
              "destination.removableMedia.capacity",
              "destination.removableMedia.busType",
              "destination.removableMedia.name",
              "destination.removableMedia.volumeName",
              "destination.removableMedia.partitionId",
              "destination.tabs.title",
              "destination.tabs.url",
              "destination.tabs.titleError",
              "destination.tabs.urlError",
              "destination.accountName",
              "destination.accountType",
              "destination.domains",
              "destination.remoteHostname",
              "destination.identifiers",
              "destination.identifier.id",
              "process.executable",
              "process.owner",
              "process.extension.browser",
              "process.extension.version",
              "process.extension.loggedInUser",
              "risk.score",
              "risk.severity",
              "risk.indicators.name",
              "risk.indicators.id",
              "risk.indicators.weight",
              "risk.trusted",
              "risk.trustReason",
              "risk.untrustedValues.accountNames",
              "risk.untrustedValues.domains",
              "risk.untrustedValues.gitRepositoryUris",
              "risk.untrustedValues.slackWorkspaces",
              "risk.untrustedValues.urlPaths",
              "responseControls.preventativeControl",
              "responseControls.userJustification.reason",
              "responseControls.userJustification.text",
              "file.acquiredFrom.eventId",
              "file.acquiredFrom.sourceAccountName",
              "file.acquiredFrom.sourceAccountType",
              "file.acquiredFrom.sourceCategory",
              "file.acquiredFrom.sourceName",
              "file.acquiredFrom.sourceUser.email",
              "file.acquiredFrom.agentTimestamp",
              "file.acquiredFrom.userEmail",
              "file.acquiredFrom.eventAction",
              "file.acquiredFrom.tabs.title",
              "file.acquiredFrom.tabs.titleError",
              "file.acquiredFrom.tabs.url",
              "file.acquiredFrom.tabs.urlError",
              "file.acquiredFrom.sourceDomains",
              "file.acquiredFrom.fileName",
              "file.acquiredFrom.md5",
              "file.acquiredFrom.git.repositoryEmail",
              "file.acquiredFrom.git.repositoryUri",
              "file.acquiredFrom.git.repositoryUser",
              "file.acquiredFrom.identifiers",
              "file.acquiredFrom.identifier.id",
              "git.eventId",
              "git.lastCommitHash",
              "git.repositoryUri",
              "git.repositoryUser",
              "git.repositoryEmail",
              "git.repositoryEndpointPath"
            ],
            "example": "@timestamp",
            "title": "Which columns to include in the output. If none is provided, all available columnswill be output in an unspecified, not-guaranteed order.",
            "type": "string"
          },
          "title": "Which columns to include in the output. If none is provided, all available columnswill be output in an unspecified, not-guaranteed order.",
          "type": "array",
          "x-nullable": true
        },
        "groupClause": {
          "default": "AND",
          "enum": [
            "AND",
            "OR"
          ],
          "example": "OR",
          "title": "Grouping clause for any specified groups.",
          "type": "string",
          "x-nullable": true
        },
        "groups": {
          "default": [],
          "items": {
            "$ref": "#/definitions/FilterGroupSearchTermV2"
          },
          "title": "One or more FilterGroups to be combined in a query.",
          "type": "array"
        },
        "srtDir": {
          "default": "desc",
          "enum": [
            "asc",
            "desc"
          ],
          "example": "asc",
          "title": "Sort direction.",
          "type": "string",
          "x-nullable": true
        },
        "srtKey": {
          "enum": [
            "@timestamp",
            "event.id",
            "event.inserted",
            "event.ingested",
            "event.action",
            "event.shareType",
            "event.observer",
            "event.detectorDisplayName",
            "event.vector",
            "user.email",
            "user.id",
            "user.deviceUid",
            "file.name",
            "file.originalName",
            "file.directory",
            "file.originalDirectory",
            "file.category",
            "file.mimeType",
            "file.mimeTypeByBytes",
            "file.mimeTypeByExtension",
            "file.sizeInBytes",
            "file.owner",
            "file.created",
            "file.modified",
            "file.hash.md5",
            "file.hash.sha256",
            "file.hash.md5Error",
            "file.hash.sha256Error",
            "file.id",
            "file.url",
            "file.directoryId",
            "file.cloudDriveId",
            "file.classifications.value",
            "file.classifications.vendor",
            "file.changeType",
            "file.archiveId",
            "file.parentArchiveId",
            "file.passwordProtected",
            "report.id",
            "report.name",
            "report.description",
            "report.headers",
            "report.count",
            "report.type",
            "source.category",
            "source.name",
            "source.user.email",
            "source.domain",
            "source.ip",
            "source.privateIp",
            "source.operatingSystem",
            "source.email.sender",
            "source.email.from",
            "source.remoteHostname",
            "source.removableMedia.vendor",
            "source.removableMedia.mediaName",
            "source.removableMedia.serialNumber",
            "source.removableMedia.capacity",
            "source.removableMedia.busType",
            "source.removableMedia.name",
            "source.removableMedia.volumeName",
            "source.removableMedia.partitionId",
            "source.tabs.title",
            "source.tabs.titleError",
            "source.tabs.url",
            "source.tabs.urlError",
            "source.accountName",
            "source.accountType",
            "source.domains",
            "source.identifiers",
            "source.identifier.id",
            "destination.category",
            "destination.name",
            "destination.user.email",
            "destination.ip",
            "destination.privateIp",
            "destination.operatingSystem",
            "destination.printJobName",
            "destination.printerName",
            "destination.printedFilesBackupPath",
            "destination.email.recipients",
            "destination.email.subject",
            "destination.removableMedia.vendor",
            "destination.removableMedia.mediaName",
            "destination.removableMedia.serialNumber",
            "destination.removableMedia.capacity",
            "destination.removableMedia.busType",
            "destination.removableMedia.name",
            "destination.removableMedia.volumeName",
            "destination.removableMedia.partitionId",
            "destination.tabs.title",
            "destination.tabs.url",
            "destination.tabs.titleError",
            "destination.tabs.urlError",
            "destination.accountName",
            "destination.accountType",
            "destination.domains",
            "destination.remoteHostname",
            "destination.identifiers",
            "destination.identifier.id",
            "process.executable",
            "process.owner",
            "process.extension.browser",
            "process.extension.version",
            "process.extension.loggedInUser",
            "risk.score",
            "risk.severity",
            "risk.indicators.name",
            "risk.indicators.id",
            "risk.indicators.weight",
            "risk.trusted",
            "risk.trustReason",
            "risk.untrustedValues.accountNames",
            "risk.untrustedValues.domains",
            "risk.untrustedValues.gitRepositoryUris",
            "risk.untrustedValues.slackWorkspaces",
            "risk.untrustedValues.urlPaths",
            "responseControls.preventativeControl",
            "responseControls.userJustification.reason",
            "responseControls.userJustification.text",
            "file.acquiredFrom.eventId",
            "file.acquiredFrom.sourceAccountName",
            "file.acquiredFrom.sourceAccountType",
            "file.acquiredFrom.sourceCategory",
            "file.acquiredFrom.sourceName",
            "file.acquiredFrom.sourceUser.email",
            "file.acquiredFrom.agentTimestamp",
            "file.acquiredFrom.userEmail",
            "file.acquiredFrom.eventAction",
            "file.acquiredFrom.tabs.title",
            "file.acquiredFrom.tabs.titleError",
            "file.acquiredFrom.tabs.url",
            "file.acquiredFrom.tabs.urlError",
            "file.acquiredFrom.sourceDomains",
            "file.acquiredFrom.fileName",
            "file.acquiredFrom.md5",
            "file.acquiredFrom.git.repositoryEmail",
            "file.acquiredFrom.git.repositoryUri",
            "file.acquiredFrom.git.repositoryUser",
            "file.acquiredFrom.identifiers",
            "file.acquiredFrom.identifier.id",
            "git.eventId",
            "git.lastCommitHash",
            "git.repositoryUri",
            "git.repositoryUser",
            "git.repositoryEmail",
            "git.repositoryEndpointPath"
          ],
          "example": "@timestamp",
          "title": "Search term for sorting.",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "groups"
      ],
      "type": "object"
    },
    "Extension": {
      "properties": {
        "browser": {
          "title": "The web browser in which the event occurred.",
          "type": "string",
          "x-nullable": true
        },
        "loggedInUser": {
          "title": "The user logged in to the web browser when the event occurred.",
          "type": "string",
          "x-nullable": true
        },
        "version": {
          "title": "The version of the Code42 Incydr extension installed when the event occurred.",
          "type": "string",
          "x-nullable": true
        }
      },
      "title": "Metadata about the Code42 browser extension to facilitate troubleshooting.",
      "type": "object"
    },
    "FieldError": {
      "example": [
        {
          "error": "Hash unavailable. Locked file.",
          "field": "md5Checksum"
        }
      ],
      "properties": {
        "error": {
          "example": "Hash unavailable. Locked file.",
          "title": "Error indicating why the field could not be determined.",
          "type": "string"
        },
        "field": {
          "example": "md5Checksum",
          "title": "FileEvent field that could not be determined.",
          "type": "string"
        }
      },
      "required": [
        "error",
        "field"
      ],
      "title": "List fields with errors indicating why they could not be determined.",
      "type": "object"
    },
    "FileClassification": {
      "properties": {
        "value": {
          "example": "Classified",
          "title": "The classification value applied to the file.",
          "type": "string"
        },
        "vendor": {
          "example": "MICROSOFT INFORMATION PROTECTION",
          "title": "The name of the vendor that classified the file.",
          "type": "string"
        }
      },
      "required": [
        "value",
        "vendor"
      ],
      "title": "Data provided by an external file classification vendor.",
      "type": "object"
    },
    "FileEventResponseV1": {
      "properties": {
        "fileEvents": {
          "items": {
            "$ref": "#/definitions/FileEventV1"
          },
          "title": "List of file events in the response.",
          "type": "array",
          "x-nullable": true
        },
        "nextPgToken": {
          "example": "0_147e9445-2f30-4a91-8b2a-9455332e880a_973435567569502913_986467523038446097_163",
          "title": "Use as the pgToken value in another request to indicate the starting point for additional page results. nextPgToken is null if there are no more results or if pgToken was not supplied.",
          "type": "string",
          "x-nullable": true
        },
        "problems": {
          "items": {
            "$ref": "#/definitions/QueryProblemSearchTermV1"
          },
          "title": "List of problems in the request.  A problem with a search request could be an invalid filter value, an operator that can't be used on a term, etc.",
          "type": "array",
          "x-nullable": true
        },
        "totalCount": {
          "example": 42,
          "format": "int64",
          "title": "Total number of file events in the response.",
          "type": "integer",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "FileEventResponseV2": {
      "properties": {
        "fileEvents": {
          "items": {
            "$ref": "#/definitions/FileEventV2"
          },
          "title": "List of file events in the response.",
          "type": "array",
          "x-nullable": true
        },
        "nextPgToken": {
          "example": "0_147e9445-2f30-4a91-8b2a-9455332e880a_973435567569502913_986467523038446097_163",
          "title": "Use as the pgToken value in another request to indicate the starting point for additional page results. nextPgToken is null if there are no more results or if pgToken was not supplied.",
          "type": "string",
          "x-nullable": true
        },
        "problems": {
          "items": {
            "$ref": "#/definitions/QueryProblemSearchTermV2"
          },
          "title": "List of problems in the request.  A problem with a search request could be an invalid filter value, an operator that can't be used on a term, etc.",
          "type": "array",
          "x-nullable": true
        },
        "totalCount": {
          "example": 42,
          "format": "int64",
          "title": "Total number of file events in the response.",
          "type": "integer",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "FileEventV1": {
      "properties": {
        "actor": {
          "example": "casey@example.com",
          "title": "Name of the user reported by the cloud provider for the user who performed this file activity.",
          "type": "string",
          "x-nullable": true
        },
        "cloudDriveId": {
          "example": "RvBpZ48u2m",
          "title": "Unique identifier reported by the cloud provider for the drive containing the file at the time the event occurred.",
          "type": "string",
          "x-nullable": true
        },
        "createTimestamp": {
          "example": "2020-10-27T15:16:05.369203Z",
          "format": "date-time",
          "title": "File creation timestamp as reported by the device's operating system in Coordinated Universal Time (UTC); available for Mac and Windows NTFS devices only.",
          "type": "string",
          "x-nullable": true
        },
        "destinationCategory": {
          "example": "Social Media",
          "title": "General category of where the file was sent. For example: Cloud Storage, Email, Social Media.",
          "type": "string",
          "x-nullable": true
        },
        "destinationName": {
          "example": "LinkedIn",
          "title": "Specific target of where the file was sent. For example: Google Drive, Outlook, Slack.",
          "type": "string",
          "x-nullable": true
        },
        "detectionSourceAlias": {
          "example": "R&D OneDrive",
          "title": "Name provided by a Code42 Customer Cloud Administrator when a Cloud Connector is initially configured.",
          "type": "string",
          "x-nullable": true
        },
        "deviceUid": {
          "example": "24681",
          "title": "Unique identifier for the device. Null if the file event occurred on a cloud provider.",
          "type": "string",
          "x-nullable": true
        },
        "deviceUserName": {
          "example": "cody@example.com",
          "title": "The Code42 username used to sign in to the Code42 app on the device. Null if the file event occurred on a cloud provider.",
          "type": "string",
          "x-nullable": true
        },
        "directoryId": {
          "example": [
            "1234",
            "56d78"
          ],
          "items": {
            "example": "[\"1234\",\"56d78\"]",
            "title": "Unique identifiers of the parent drives that contain the file; searching on directoryId will return events for all of the files contained in the parent drive.",
            "type": "string"
          },
          "title": "Unique identifiers of the parent drives that contain the file; searching on directoryId will return events for all of the files contained in the parent drive.",
          "type": "array",
          "x-nullable": true
        },
        "domainName": {
          "example": "localhost",
          "title": "Fully qualified domain name (FQDN) for the user's device at the time the event is recorded.  If the device is unable to resolve the domain name of the host, it reports the IP address of the host.",
          "type": "string",
          "x-nullable": true
        },
        "emailFrom": {
          "example": "ari@example.com",
          "title": "The display name of the sender, as it appears in the \"From\" field in the email. In many cases, this is the same as emailSender, but it can be different if the message is sent by a server or other mail agent on behalf of someone else.",
          "type": "string",
          "x-nullable": true
        },
        "emailRecipients": {
          "example": [
            "cody@example.com",
            "theboss@example.com"
          ],
          "items": {
            "example": "[\"cody@example.com\",\"theboss@example.com\"]",
            "title": " The email addresses of those who received the email. Includes the To, Cc, and Bcc recipients.",
            "type": "string"
          },
          "title": " The email addresses of those who received the email. Includes the To, Cc, and Bcc recipients.",
          "type": "array",
          "x-nullable": true
        },
        "emailSender": {
          "example": "ari@example.com",
          "title": "The address of the entity responsible for transmitting the message. In many cases, this is the same as emailFrom, but it can be different if the message is sent by a server or other mail agent on behalf of someone else.",
          "type": "string",
          "x-nullable": true
        },
        "emailSubject": {
          "example": "Important business documents",
          "title": "The subject of the email message.",
          "type": "string",
          "x-nullable": true
        },
        "eventId": {
          "example": "0_147e9445-2f30-4a91-8b2a-9455332e880a_973435567569502913_986467523038446097_163",
          "title": "The unique identifier for the event.",
          "type": "string"
        },
        "eventTimestamp": {
          "example": "2020-10-27T15:16:05.369203Z",
          "format": "date-time",
          "title": "Date and time that the Code42 service on the device detected an event; based on the device's system clock and reported in Coordinated Universal Time (UTC).",
          "type": "string",
          "x-nullable": true
        },
        "exposure": {
          "example": [
            "CloudStorage"
          ],
          "items": {
            "example": "[\"CloudStorage\"]",
            "title": "Lists indicators that the data may be exposed. Default is `[]`.",
            "type": "string"
          },
          "title": "Lists indicators that the data may be exposed. Default is `[]`.",
          "type": "array"
        },
        "fieldErrors": {
          "example": [
            {
              "error": "Hash unavailable. Locked file.",
              "field": "md5Checksum"
            }
          ],
          "items": {
            "$ref": "#/definitions/FieldError"
          },
          "title": "List fields with errors indicating why they could not be determined.",
          "type": "array"
        },
        "fileCategory": {
          "example": "Audio",
          "title": "A categorization of the file that is inferred from MIME type.",
          "type": "string",
          "x-nullable": true
        },
        "fileClassifications": {
          "items": {
            "$ref": "#/definitions/FileClassification"
          },
          "title": "Data provided by an external file classification vendor.",
          "type": "array"
        },
        "fileId": {
          "example": "PUL5zWLRrdudiJZ1OCWw",
          "title": "Unique identifier reported by the cloud provider for the file associated with the event.",
          "type": "string",
          "x-nullable": true
        },
        "fileName": {
          "example": "ReadMe.md",
          "title": "The name of the file, including the file extension.",
          "type": "string",
          "x-nullable": true
        },
        "fileOwner": {
          "example": "ari.example",
          "title": "The name of the user who owns the file as reported by the device's file system.",
          "type": "string",
          "x-nullable": true
        },
        "filePath": {
          "example": "/Users/alix/Documents/",
          "title": "The file location on the user's device; a forward or backslash must be included at the end of the filepath. Possibly null if the file event occurred on a cloud provider.",
          "type": "string",
          "x-nullable": true
        },
        "fileSize": {
          "example": 256,
          "format": "int64",
          "title": "Size of the file in bytes.",
          "type": "integer",
          "x-nullable": true
        },
        "fileType": {
          "enum": [
            "UNKNOWN",
            "FILE",
            "DIR",
            "WIN_NDS",
            "MAC_RSRC",
            "SYMLINK",
            "FIFO",
            "BLOCK_DEVICE",
            "CHAR_DEVICE",
            "BUNDLE"
          ],
          "example": "FILE",
          "title": "The type of file detected; only FILE types are searchable.",
          "type": "string",
          "x-nullable": true
        },
        "insertionTimestamp": {
          "example": "2020-10-27T15:16:05.369203Z",
          "format": "date-time",
          "title": "Date and time that the event was received for indexing by Code42; timestamp is based on the Code42 server system clock and reported in Coordinated Universal Time (UTC).",
          "type": "string",
          "x-nullable": true
        },
        "md5Checksum": {
          "example": "a162591e78eb2c816a28907d3ac020f9",
          "title": "The MD5 hash of the file contents.",
          "type": "string",
          "x-nullable": true
        },
        "mimeTypeByBytes": {
          "example": "text/csv",
          "title": "The MIME type of the file based on its contents.",
          "type": "string",
          "x-nullable": true
        },
        "mimeTypeByExtension": {
          "example": "audio/vorbis",
          "title": "The MIME type of the file based on its extension.",
          "type": "string",
          "x-nullable": true
        },
        "mimeTypeMismatch": {
          "example": true,
          "title": "Indicates whether or not the MIME type of the file based on its contents does not match the MIME type based on its extension and that this mismatch is unexpected.",
          "type": "boolean",
          "x-nullable": true
        },
        "modifyTimestamp": {
          "example": "2020-10-27T15:16:05.369203Z",
          "format": "date-time",
          "title": "File modification timestamp as reported by the device's operating system.  This only indicates changes to file contents.  Changes to file permissions, file owner, or other metadata are not reflected in this timestamp.  Date is reported in Coordinated Universal Time (UTC).",
          "type": "string",
          "x-nullable": true
        },
        "operatingSystemUser": {
          "example": "ari.example",
          "title": "The username logged in to the device when the file activity was observed, as reported by the device's operating system.",
          "type": "string",
          "x-nullable": true
        },
        "osHostName": {
          "example": "Mari's MacBook",
          "title": "The name reported by the device's operating system.  This may be different than the device name in the Code42 console.",
          "type": "string",
          "x-nullable": true
        },
        "printJobName": {
          "example": "printer.exe",
          "title": "For print events, the name of the print job, as reported by the user's device.",
          "type": "string",
          "x-nullable": true
        },
        "printerName": {
          "example": "OfficeJet",
          "title": "For print events, the name of the printer the job was sent to.",
          "type": "string",
          "x-nullable": true
        },
        "privateIpAddresses": {
          "example": [
            "127.0.0.1",
            "127.0.0.2"
          ],
          "items": {
            "example": "[\"127.0.0.1\",\"127.0.0.2\"]",
            "title": "The IP address of the user's device on your internal network, including Network interfaces, Virtual Network Interface controllers (NICs), and Loopback/non-routable addresses.",
            "type": "string"
          },
          "title": "The IP address of the user's device on your internal network, including Network interfaces, Virtual Network Interface controllers (NICs), and Loopback/non-routable addresses.",
          "type": "array"
        },
        "processName": {
          "example": "bash",
          "title": "The name of the process that accessed the file, as reported by the device's operating system. Depending on your Code42 product plan, this value may be null for some event types.",
          "type": "string",
          "x-nullable": true
        },
        "processOwner": {
          "example": "root",
          "title": "The username of the process owner, as reported by the device's operating system. Depending on your Code42 product plan, this value may be null for some event types.",
          "type": "string",
          "x-nullable": true
        },
        "publicIpAddress": {
          "example": "127.0.0.1",
          "title": "The external IP address of the user's device.",
          "type": "string",
          "x-nullable": true
        },
        "remoteActivity": {
          "enum": [
            "TRUE",
            "FALSE",
            "UNKNOWN"
          ],
          "example": "UNKNOWN",
          "title": "For endpoint events, compares the IP address of the file event to your defined list of addresses in the Data Preferences section of the Code42 console. If the IP address from the file event does not match, \"remote\" is true. If the IP address does match, \"remote\" is false.",
          "type": "string",
          "x-nullable": true
        },
        "removableMediaBusType": {
          "example": "USB 3.0 Bus",
          "title": "For events detected on removable media, indicates the communication system used to transfer data between the host and the removable device.",
          "type": "string",
          "x-nullable": true
        },
        "removableMediaCapacity": {
          "example": 15631122432,
          "format": "int64",
          "title": "For events detected on removable media, the capacity of the removable device in bytes.",
          "type": "integer",
          "x-nullable": true
        },
        "removableMediaMediaName": {
          "example": "Cruzer Blade",
          "title": "For events detected on removable media, the media name of the device, as reported by the vendor/device. This is usually very similar to the productName, but can vary based on the type of device. For example, if the device is a hard drive in a USB enclosure, this may be the combination of the drive model and the enclosure model.\nThis value is not provided by all devices, so it may be null in some cases.",
          "type": "string",
          "x-nullable": true
        },
        "removableMediaName": {
          "example": "JUMPDRIVE",
          "title": "For events detected on removable media, the name of the removable device.",
          "type": "string",
          "x-nullable": true
        },
        "removableMediaPartitionId": {
          "example": [
            "disk0s2",
            "disk0s3"
          ],
          "items": {
            "example": "[\"disk0s2\",\"disk0s3\"]",
            "title": "For events detected on removable media, a unique identifier assigned to the volume/partition when it was formatted. Windows devices refer to this as the VolumeGuid. On Mac devices, this is the Disk / Partition UUID, which appears when running the Terminal command diskUtil info.",
            "type": "string"
          },
          "title": "For events detected on removable media, a unique identifier assigned to the volume/partition when it was formatted. Windows devices refer to this as the VolumeGuid. On Mac devices, this is the Disk / Partition UUID, which appears when running the Terminal command diskUtil info.",
          "type": "array"
        },
        "removableMediaSerialNumber": {
          "example": "4C531001550407108465",
          "title": "For events detected on removable media, the serial number of the removable device.",
          "type": "string",
          "x-nullable": true
        },
        "removableMediaVendor": {
          "example": "SanDisk",
          "title": "For events detected on removable media, the vendor of the removable device.",
          "type": "string",
          "x-nullable": true
        },
        "removableMediaVolumeName": {
          "example": [
            "MY_FILES"
          ],
          "items": {
            "example": "[\"MY_FILES\"]",
            "title": "For events detected on removable media, the name assigned to the volume when it was formatted, as reported by the device's operating system. This is also frequently called the \"partition\" name.",
            "type": "string"
          },
          "title": "For events detected on removable media, the name assigned to the volume when it was formatted, as reported by the device's operating system. This is also frequently called the \"partition\" name.",
          "type": "array"
        },
        "reportColumnHeaders": {
          "example": [
            "USERNAME",
            "ACCOUNT_NAME",
            "TYPE",
            "DUE_DATE",
            "LAST_UPDATE",
            "ADDRESS1_STATE"
          ],
          "items": {
            "example": "[\"USERNAME\",\"ACCOUNT_NAME\",\"TYPE\",\"DUE_DATE\",\"LAST_UPDATE\",\"ADDRESS1_STATE\"]",
            "title": "The list of column headers that are in the report.",
            "type": "string"
          },
          "title": "The list of column headers that are in the report.",
          "type": "array"
        },
        "reportDescription": {
          "example": "Top 20 accounts based on annual revenue",
          "title": "The description of the report.",
          "type": "string",
          "x-nullable": true
        },
        "reportId": {
          "example": "00OB00000042FHdMAM",
          "title": "The ID of the report associated with this event.",
          "type": "string",
          "x-nullable": true
        },
        "reportName": {
          "example": "Top Accounts Report",
          "title": "The display name of the report.",
          "type": "string",
          "x-nullable": true
        },
        "reportRecordCount": {
          "example": 20,
          "format": "int32",
          "title": "The total number of rows returned in the report.",
          "type": "integer",
          "x-nullable": true
        },
        "reportType": {
          "example": "REPORT_TYPE_SAVED",
          "title": "Indicates if the report is \"REPORT_TYPE_AD_HOC\" or \"REPORT_TYPE_SAVED\".",
          "type": "string",
          "x-nullable": true
        },
        "riskIndicators": {
          "items": {
            "$ref": "#/definitions/RiskIndicator"
          },
          "title": "List of risk indicators identified for this event. If more than one risk indicator applies to this event, the sum of all indicators determines the total risk score.",
          "type": "array"
        },
        "riskScore": {
          "example": 12,
          "format": "int32",
          "title": "Sum of the weights for each risk indicator. This score is used to determine the overall risk severity of the event.",
          "type": "integer",
          "x-nullable": true
        },
        "riskSeverity": {
          "enum": [
            "NO_RISK_INDICATED",
            "LOW",
            "MODERATE",
            "HIGH",
            "CRITICAL"
          ],
          "example": "CRITICAL",
          "title": "The general risk assessment of the event, based on the numeric score.",
          "type": "string",
          "x-nullable": true
        },
        "sha256Checksum": {
          "example": "ded96d69c63754472efc4aa86fed68d4e17784b38089851cfa84e699e48b4155",
          "title": "The SHA256 hash of the file contents.",
          "type": "string",
          "x-nullable": true
        },
        "shared": {
          "enum": [
            "TRUE",
            "FALSE"
          ],
          "example": "TRUE",
          "title": "Indicates the shared status as reported by the cloud provider at the time the event occurred. A shared file indicates that one or more users have been granted explicit access to the file. It does not capture whether or not a link to the file has been shared.",
          "type": "string",
          "x-nullable": true
        },
        "sharedWith": {
          "$ref": "#/definitions/SharedWithUser"
        },
        "sharingTypeAdded": {
          "example": [
            "SharedViaLink"
          ],
          "items": {
            "example": "[\"SharedViaLink\"]",
            "title": "Public sharing types that were added by this event.",
            "type": "string"
          },
          "title": "Public sharing types that were added by this event.",
          "type": "array"
        },
        "source": {
          "example": "OneDrive",
          "title": "Data source for a file event.",
          "type": "string",
          "x-nullable": true
        },
        "sourceCategory": {
          "example": "Social Media",
          "title": "General category of where the file originated. For example: Cloud Storage, Email, Social Media.",
          "type": "string",
          "x-nullable": true
        },
        "sourceName": {
          "example": "Salesforce",
          "title": "Specific target of where the file originated. For example: Google Drive, Outlook, Slack.",
          "type": "string",
          "x-nullable": true
        },
        "sourceTabs": {
          "items": {
            "$ref": "#/definitions/Tab"
          },
          "title": "For events generated when a file is downloaded via a browser or other app, the tabs that had activity at the time of the event.",
          "type": "array"
        },
        "syncDestination": {
          "example": "Dropbox",
          "title": "For events detected within a cloud storage sync destination on a device, the name of the cloud storage vendor.",
          "type": "string",
          "x-nullable": true
        },
        "syncDestinationUsername": {
          "example": [
            "ari@example.com"
          ],
          "items": {
            "example": "[\"ari@example.com\"]",
            "title": "For events detected within a cloud storage sync destination on a device, lists the usernames logged into the cloud storage provider when the file activity was observed.",
            "type": "string"
          },
          "title": "For events detected within a cloud storage sync destination on a device, lists the usernames logged into the cloud storage provider when the file activity was observed.",
          "type": "array"
        },
        "tabUrl": {
          "example": "https://example.com",
          "title": "For events generated when a file is read in a browser or other app, the URL that had activity at the time of the event. May not contain all URLs if multiple are present. 'tabs' field is recommended for use instead.",
          "type": "string",
          "x-nullable": true
        },
        "tabs": {
          "items": {
            "$ref": "#/definitions/Tab"
          },
          "title": "For events generated when a file is uploaded via a browser or other app, the tabs that had activity at the time of the event.",
          "type": "array"
        },
        "trustReason": {
          "example": "TRUSTED_DOMAIN_BROWSER_URL",
          "title": "The reason the event is trusted. trustReason is only populated if trusted is true for this event.",
          "type": "string",
          "x-nullable": true
        },
        "trusted": {
          "example": true,
          "title": "Indicates whether or not the file activity is trusted based on your Data Preferences settings.",
          "type": "boolean",
          "x-nullable": true
        },
        "url": {
          "example": "https://example.com",
          "title": "URL reported by the cloud provider at the time the event occurred.",
          "type": "string",
          "x-nullable": true
        },
        "userUid": {
          "example": "1138",
          "title": "Unique identifier for the user of the Code42 app on the device. Null if the file event occurred on a cloud provider.",
          "type": "string",
          "x-nullable": true
        },
        "windowTitle": {
          "example": [
            "Inbox - cody@example.com"
          ],
          "items": {
            "example": "[\"Inbox - cody@example.com\"]",
            "title": "For events generated when a file is read in a browser or other app, the tab or window title(s) that had activity at the time of the event. 'tabs' field is recommended for use instead.",
            "type": "string"
          },
          "title": "For events generated when a file is read in a browser or other app, the tab or window title(s) that had activity at the time of the event. 'tabs' field is recommended for use instead.",
          "type": "array"
        }
      },
      "required": [
        "eventId",
        "exposure",
        "fieldErrors",
        "fileClassifications",
        "privateIpAddresses",
        "removableMediaPartitionId",
        "removableMediaVolumeName",
        "reportColumnHeaders",
        "riskIndicators",
        "sharedWith",
        "sharingTypeAdded",
        "sourceTabs",
        "syncDestinationUsername",
        "tabs",
        "windowTitle"
      ],
      "title": "List of file events in the response.",
      "type": "object",
      "x-nullable": true
    },
    "FileEventV2": {
      "properties": {
        "@timestamp": {
          "example": "2020-10-27T15:16:05.369203Z",
          "format": "date-time",
          "title": "Date and time that the Code42 service on the device detected an event; based on the device's system clock and reported in Coordinated Universal Time (UTC).",
          "type": "string",
          "x-nullable": true
        },
        "destination": {
          "$ref": "#/definitions/Destination"
        },
        "event": {
          "$ref": "#/definitions/Event"
        },
        "file": {
          "$ref": "#/definitions/File"
        },
        "git": {
          "$ref": "#/definitions/Git"
        },
        "process": {
          "$ref": "#/definitions/Process"
        },
        "report": {
          "$ref": "#/definitions/Report"
        },
        "responseControls": {
          "$ref": "#/definitions/ResponseControls"
        },
        "risk": {
          "$ref": "#/definitions/Risk"
        },
        "source": {
          "$ref": "#/definitions/Source"
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      },
      "required": [
        "destination",
        "event",
        "file",
        "git",
        "process",
        "report",
        "responseControls",
        "risk",
        "source",
        "user"
      ],
      "title": "List of file events in the response.",
      "type": "object",
      "x-nullable": true
    },
    "FilterGroupSearchTermV1": {
      "default": [],
      "properties": {
        "filterClause": {
          "default": "AND",
          "enum": [
            "AND",
            "OR"
          ],
          "example": "AND",
          "title": "Grouping clause for filters.",
          "type": "string",
          "x-nullable": true
        },
        "filters": {
          "default": [],
          "items": {
            "$ref": "#/definitions/SearchFilterSearchTermV1"
          },
          "title": "One or more SearchFilters to be combined in a query.",
          "type": "array"
        }
      },
      "required": [
        "filters"
      ],
      "title": "One or more FilterGroups to be combined in a query.",
      "type": "object"
    },
    "FilterGroupSearchTermV2": {
      "default": [],
      "properties": {
        "filterClause": {
          "default": "AND",
          "enum": [
            "AND",
            "OR"
          ],
          "example": "AND",
          "title": "Grouping clause for filters.",
          "type": "string",
          "x-nullable": true
        },
        "filters": {
          "default": [],
          "items": {
            "$ref": "#/definitions/SearchFilterSearchTermV2"
          },
          "title": "One or more SearchFilters to be combined in a query.",
          "type": "array"
        }
      },
      "required": [
        "filters"
      ],
      "title": "One or more FilterGroups to be combined in a query.",
      "type": "object"
    },
    "Git": {
      "properties": {
        "eventId": {
          "title": "A global unique identifier (GUID) generated by Incydr for this Git event. All files associated with this event have the same Git event ID. A single Git event can be associated with multiple file events.",
          "type": "string",
          "x-nullable": true
        },
        "lastCommitHash": {
          "title": "Hash value from the most recent commit in this Git event.",
          "type": "string",
          "x-nullable": true
        },
        "repositoryEmail": {
          "title": "The email address specified by the user who performed the Git event. This is a user-defined value and may differ from the credentials used to sign in to Git.",
          "type": "string",
          "x-nullable": true
        },
        "repositoryEndpointPath": {
          "title": "File path of the local Git repository on the user's endpoint.",
          "type": "string",
          "x-nullable": true
        },
        "repositoryUri": {
          "title": "Uniform Resource Identifier (URI) for the Git repository.",
          "type": "string",
          "x-nullable": true
        },
        "repositoryUser": {
          "title": "The username specified by the user who performed the Git event. This is a user-defined value and may differ from the credentials used to sign in to Git.",
          "type": "string",
          "x-nullable": true
        }
      },
      "title": "Metadata about the Git activity associated with this event.",
      "type": "object"
    },
    "Group": {
      "properties": {
        "docCount": {
          "example": 3,
          "format": "int64",
          "title": "The approximate count of hits matching this value for your query.",
          "type": "integer"
        },
        "value": {
          "example": "readme.md",
          "title": "The value of the term for this group.",
          "type": "string"
        }
      },
      "required": [
        "docCount",
        "value"
      ],
      "title": "The top groups based on the query and group by term.",
      "type": "object",
      "x-nullable": true
    },
    "GroupingRequestSearchTermV1": {
      "properties": {
        "groupClause": {
          "default": "AND",
          "enum": [
            "AND",
            "OR"
          ],
          "example": "AND",
          "title": "Grouping clause for any specified groups.",
          "type": "string",
          "x-nullable": true
        },
        "groupingTerm": {
          "enum": [
            "eventId",
            "eventType",
            "eventTimestamp",
            "insertionTimestamp",
            "filePath",
            "fileName",
            "fileType",
            "fileCategory",
            "fileCategoryByBytes",
            "fileCategoryByExtension",
            "fileSize",
            "fileOwner",
            "md5Checksum",
            "sha256Checksum",
            "createTimestamp",
            "modifyTimestamp",
            "deviceUserName",
            "deviceUid",
            "userUid",
            "osHostName",
            "domainName",
            "publicIpAddress",
            "privateIpAddresses",
            "actor",
            "directoryId",
            "source",
            "url",
            "shared",
            "sharedWith",
            "sharingTypeAdded",
            "cloudDriveId",
            "detectionSourceAlias",
            "fileId",
            "exposure",
            "processOwner",
            "processName",
            "windowTitle",
            "tabUrl",
            "tabTitles",
            "tabTitleErrors",
            "tabUrls",
            "tabUrlErrors",
            "sourceTabTitles",
            "sourceTabTitleErrors",
            "sourceTabUrls",
            "sourceTabUrlErrors",
            "fileClassificationVendors",
            "fileClassificationValues",
            "removableMediaVendor",
            "removableMediaName",
            "removableMediaSerialNumber",
            "removableMediaCapacity",
            "removableMediaBusType",
            "removableMediaMediaName",
            "removableMediaVolumeName",
            "removableMediaPartitionId",
            "syncDestination",
            "syncDestinationUsername",
            "emailDlpPolicyNames",
            "emailSubject",
            "emailSender",
            "emailFrom",
            "emailRecipients",
            "outsideActiveHours",
            "mimeTypeByBytes",
            "mimeTypeByExtension",
            "mimeTypeMismatch",
            "printJobName",
            "printerName",
            "printedFilesBackupPath",
            "remoteActivity",
            "trusted",
            "trustReason",
            "operatingSystemUser",
            "destinationCategory",
            "destinationName",
            "sourceCategory",
            "sourceName",
            "riskScore",
            "riskSeverity",
            "riskIndicatorNames",
            "riskIndicatorWeights",
            "reportName",
            "reportDescription",
            "reportColumnHeaders",
            "reportRecordCount",
            "reportType",
            "reportId"
          ],
          "example": "eventId",
          "title": "The search term to use to form the groups.",
          "type": "string"
        },
        "groups": {
          "default": [],
          "items": {
            "$ref": "#/definitions/FilterGroupSearchTermV1"
          },
          "title": "One or more FilterGroups to be combined in a query.",
          "type": "array"
        },
        "size": {
          "example": 1000,
          "format": "int32",
          "title": "The maximum number of groups that will be returned for this query. Default value is 1000. Maximum possible value is 10,000.",
          "type": "integer",
          "x-nullable": true
        }
      },
      "required": [
        "groupingTerm",
        "groups"
      ],
      "type": "object"
    },
    "GroupingRequestSearchTermV2": {
      "properties": {
        "groupClause": {
          "default": "AND",
          "enum": [
            "AND",
            "OR"
          ],
          "example": "AND",
          "title": "Grouping clause for any specified groups.",
          "type": "string",
          "x-nullable": true
        },
        "groupingTerm": {
          "enum": [
            "@timestamp",
            "event.id",
            "event.inserted",
            "event.ingested",
            "event.action",
            "event.shareType",
            "event.observer",
            "event.detectorDisplayName",
            "event.vector",
            "user.email",
            "user.id",
            "user.deviceUid",
            "file.name",
            "file.originalName",
            "file.directory",
            "file.originalDirectory",
            "file.category",
            "file.mimeType",
            "file.mimeTypeByBytes",
            "file.mimeTypeByExtension",
            "file.sizeInBytes",
            "file.owner",
            "file.created",
            "file.modified",
            "file.hash.md5",
            "file.hash.sha256",
            "file.hash.md5Error",
            "file.hash.sha256Error",
            "file.id",
            "file.url",
            "file.directoryId",
            "file.cloudDriveId",
            "file.classifications.value",
            "file.classifications.vendor",
            "file.changeType",
            "file.archiveId",
            "file.parentArchiveId",
            "file.passwordProtected",
            "report.id",
            "report.name",
            "report.description",
            "report.headers",
            "report.count",
            "report.type",
            "source.category",
            "source.name",
            "source.user.email",
            "source.domain",
            "source.ip",
            "source.privateIp",
            "source.operatingSystem",
            "source.email.sender",
            "source.email.from",
            "source.remoteHostname",
            "source.removableMedia.vendor",
            "source.removableMedia.mediaName",
            "source.removableMedia.serialNumber",
            "source.removableMedia.capacity",
            "source.removableMedia.busType",
            "source.removableMedia.name",
            "source.removableMedia.volumeName",
            "source.removableMedia.partitionId",
            "source.tabs.title",
            "source.tabs.titleError",
            "source.tabs.url",
            "source.tabs.urlError",
            "source.accountName",
            "source.accountType",
            "source.domains",
            "source.identifiers",
            "source.identifier.id",
            "destination.category",
            "destination.name",
            "destination.user.email",
            "destination.ip",
            "destination.privateIp",
            "destination.operatingSystem",
            "destination.printJobName",
            "destination.printerName",
            "destination.printedFilesBackupPath",
            "destination.email.recipients",
            "destination.email.subject",
            "destination.removableMedia.vendor",
            "destination.removableMedia.mediaName",
            "destination.removableMedia.serialNumber",
            "destination.removableMedia.capacity",
            "destination.removableMedia.busType",
            "destination.removableMedia.name",
            "destination.removableMedia.volumeName",
            "destination.removableMedia.partitionId",
            "destination.tabs.title",
            "destination.tabs.url",
            "destination.tabs.titleError",
            "destination.tabs.urlError",
            "destination.accountName",
            "destination.accountType",
            "destination.domains",
            "destination.remoteHostname",
            "destination.identifiers",
            "destination.identifier.id",
            "process.executable",
            "process.owner",
            "process.extension.browser",
            "process.extension.version",
            "process.extension.loggedInUser",
            "risk.score",
            "risk.severity",
            "risk.indicators.name",
            "risk.indicators.id",
            "risk.indicators.weight",
            "risk.trusted",
            "risk.trustReason",
            "risk.untrustedValues.accountNames",
            "risk.untrustedValues.domains",
            "risk.untrustedValues.gitRepositoryUris",
            "risk.untrustedValues.slackWorkspaces",
            "risk.untrustedValues.urlPaths",
            "responseControls.preventativeControl",
            "responseControls.userJustification.reason",
            "responseControls.userJustification.text",
            "file.acquiredFrom.eventId",
            "file.acquiredFrom.sourceAccountName",
            "file.acquiredFrom.sourceAccountType",
            "file.acquiredFrom.sourceCategory",
            "file.acquiredFrom.sourceName",
            "file.acquiredFrom.sourceUser.email",
            "file.acquiredFrom.agentTimestamp",
            "file.acquiredFrom.userEmail",
            "file.acquiredFrom.eventAction",
            "file.acquiredFrom.tabs.title",
            "file.acquiredFrom.tabs.titleError",
            "file.acquiredFrom.tabs.url",
            "file.acquiredFrom.tabs.urlError",
            "file.acquiredFrom.sourceDomains",
            "file.acquiredFrom.fileName",
            "file.acquiredFrom.md5",
            "file.acquiredFrom.git.repositoryEmail",
            "file.acquiredFrom.git.repositoryUri",
            "file.acquiredFrom.git.repositoryUser",
            "file.acquiredFrom.identifiers",
            "file.acquiredFrom.identifier.id",
            "git.eventId",
            "git.lastCommitHash",
            "git.repositoryUri",
            "git.repositoryUser",
            "git.repositoryEmail",
            "git.repositoryEndpointPath"
          ],
          "example": "@timestamp",
          "title": "The search term to use to form the groups.",
          "type": "string"
        },
        "groups": {
          "default": [],
          "items": {
            "$ref": "#/definitions/FilterGroupSearchTermV2"
          },
          "title": "One or more FilterGroups to be combined in a query.",
          "type": "array"
        },
        "size": {
          "example": 1000,
          "format": "int32",
          "title": "The maximum number of groups that will be returned for this query. Default value is 1000. Maximum possible value is 10,000.",
          "type": "integer",
          "x-nullable": true
        }
      },
      "required": [
        "groupingTerm",
        "groups"
      ],
      "type": "object"
    },
    "GroupingResponseSearchTermV1": {
      "properties": {
        "groups": {
          "items": {
            "$ref": "#/definitions/Group"
          },
          "title": "The top groups based on the query and group by term.",
          "type": "array",
          "x-nullable": true
        },
        "problems": {
          "items": {
            "$ref": "#/definitions/QueryProblemSearchTermV1"
          },
          "title": "List of problems in the request.  A problem with a search request could be an invalid filter value, an operator that can't be used on a term, etc.",
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "GroupingResponseSearchTermV2": {
      "properties": {
        "groups": {
          "items": {
            "$ref": "#/definitions/Group"
          },
          "title": "The top groups based on the query and group by term.",
          "type": "array",
          "x-nullable": true
        },
        "problems": {
          "items": {
            "$ref": "#/definitions/QueryProblemSearchTermV2"
          },
          "title": "List of problems in the request.  A problem with a search request could be an invalid filter value, an operator that can't be used on a term, etc.",
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "Hash": {
      "properties": {
        "md5": {
          "example": "a162591e78eb2c816a28907d3ac020f9",
          "title": "The MD5 hash of the file contents.",
          "type": "string",
          "x-nullable": true
        },
        "md5Error": {
          "title": "Reason the MD5 hash is unavailable.",
          "type": "string",
          "x-nullable": true
        },
        "sha256": {
          "example": "ded96d69c63754472efc4aa86fed68d4e17784b38089851cfa84e699e48b4155",
          "title": "The SHA-256 hash of the file contents.",
          "type": "string",
          "x-nullable": true
        },
        "sha256Error": {
          "title": "Reason the SHA-256 hash is unavailable.",
          "type": "string",
          "x-nullable": true
        }
      },
      "title": "Hash values of the file.",
      "type": "object"
    },
    "Process": {
      "properties": {
        "executable": {
          "example": "bash",
          "title": "The name of the process that accessed the file, as reported by the device's operating system. Depending on your Code42 product plan, this value may be null for some event types.",
          "type": "string",
          "x-nullable": true
        },
        "extension": {
          "$ref": "#/definitions/Extension"
        },
        "owner": {
          "example": "root",
          "title": "The username of the process owner, as reported by the device's operating system. Depending on your Code42 product plan, this value may be null for some event types.",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "extension"
      ],
      "title": "Metadata about the process associated with the event.",
      "type": "object"
    },
    "QueryProblemSearchTermV1": {
      "properties": {
        "badFilter": {
          "$ref": "#/definitions/SearchFilterSearchTermV1"
        },
        "description": {
          "example": "Request timed out.  Refine your filter criteria and try again.",
          "title": "Additional description of the problem.",
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "enum": [
            "ILLEGAL_VALUE",
            "ILLEGAL_OPERATOR",
            "MAX_LENGTH_EXCEEDED",
            "INVALID_PAGE_SIZE",
            "INVALID_PAGE_NUMBER",
            "INVALID_PAGE_TOKEN",
            "MISSING_VALUE",
            "UNEXPECTED_VALUE",
            "MISSING_GROUPS",
            "MISSING_FILTERS",
            "MAX_FILTERS_EXCEEDED",
            "MAX_VALUES_FOR_FILTER_EXCEEDED",
            "MAX_GROUPS_EXCEEDED",
            "SEARCH_FAILED",
            "QUERY_TIMEOUT",
            "ILLEGAL_SORT",
            "ILLEGAL_GROUP",
            "RESPONSE_CONTENT_TOO_LARGE"
          ],
          "example": "SEARCH_FAILED",
          "title": "The type of problem that occured.",
          "type": "string"
        }
      },
      "required": [
        "badFilter",
        "type"
      ],
      "title": "List of problems in the request.  A problem with a search request could be an invalid filter value, an operator that can't be used on a term, etc.",
      "type": "object",
      "x-nullable": true
    },
    "QueryProblemSearchTermV2": {
      "properties": {
        "badFilter": {
          "$ref": "#/definitions/SearchFilterSearchTermV2"
        },
        "description": {
          "example": "Request timed out.  Refine your filter criteria and try again.",
          "title": "Additional description of the problem.",
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "enum": [
            "ILLEGAL_VALUE",
            "ILLEGAL_OPERATOR",
            "MAX_LENGTH_EXCEEDED",
            "INVALID_PAGE_SIZE",
            "INVALID_PAGE_NUMBER",
            "INVALID_PAGE_TOKEN",
            "MISSING_VALUE",
            "UNEXPECTED_VALUE",
            "MISSING_GROUPS",
            "MISSING_FILTERS",
            "MAX_FILTERS_EXCEEDED",
            "MAX_VALUES_FOR_FILTER_EXCEEDED",
            "MAX_GROUPS_EXCEEDED",
            "SEARCH_FAILED",
            "QUERY_TIMEOUT",
            "ILLEGAL_SORT",
            "ILLEGAL_GROUP",
            "RESPONSE_CONTENT_TOO_LARGE"
          ],
          "example": "SEARCH_FAILED",
          "title": "The type of problem that occured.",
          "type": "string"
        }
      },
      "required": [
        "badFilter",
        "type"
      ],
      "title": "List of problems in the request.  A problem with a search request could be an invalid filter value, an operator that can't be used on a term, etc.",
      "type": "object",
      "x-nullable": true
    },
    "RemovableMedia": {
      "properties": {
        "busType": {
          "example": "USB 3.0 Bus",
          "title": "For events detected on removable media, indicates the communication system used to transfer data between the host and the removable device.",
          "type": "string",
          "x-nullable": true
        },
        "capacity": {
          "example": 15631122432,
          "format": "int64",
          "title": "For events detected on removable media, the capacity of the removable device in bytes.",
          "type": "integer",
          "x-nullable": true
        },
        "mediaName": {
          "example": "Cruzer Blade",
          "title": "For events detected on removable media, the media name of the device, as reported by the vendor/device. This is usually very similar to the productName, but can vary based on the type of device. For example, if the device is a hard drive in a USB enclosure, this may be the combination of the drive model and the enclosure model.\nThis value is not provided by all devices, so it may be null in some cases.",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "example": "JUMPDRIVE",
          "title": "For events detected on removable media, the name of the removable device.",
          "type": "string",
          "x-nullable": true
        },
        "partitionId": {
          "example": [
            "disk0s2",
            "disk0s3"
          ],
          "items": {
            "example": "[\"disk0s2\",\"disk0s3\"]",
            "title": "For events detected on removable media, a unique identifier assigned to the volume/partition when it was formatted. Windows devices refer to this as the VolumeGuid. On Mac devices, this is the Disk / Partition UUID, which appears when running the Terminal command diskUtil info.",
            "type": "string"
          },
          "title": "For events detected on removable media, a unique identifier assigned to the volume/partition when it was formatted. Windows devices refer to this as the VolumeGuid. On Mac devices, this is the Disk / Partition UUID, which appears when running the Terminal command diskUtil info.",
          "type": "array"
        },
        "serialNumber": {
          "example": "4C531001550407108465",
          "title": "For events detected on removable media, the serial number of the removable device.",
          "type": "string",
          "x-nullable": true
        },
        "vendor": {
          "example": "SanDisk",
          "title": "For events detected on removable media, the vendor of the removable device.",
          "type": "string",
          "x-nullable": true
        },
        "volumeName": {
          "example": [
            "MY_FILES"
          ],
          "items": {
            "example": "[\"MY_FILES\"]",
            "title": "For events detected on removable media, the name assigned to the volume when it was formatted, as reported by the device's operating system. This is also frequently called the \"partition\" name.",
            "type": "string"
          },
          "title": "For events detected on removable media, the name assigned to the volume when it was formatted, as reported by the device's operating system. This is also frequently called the \"partition\" name.",
          "type": "array"
        }
      },
      "required": [
        "partitionId",
        "volumeName"
      ],
      "title": "Metadata about the removable media destination.",
      "type": "object"
    },
    "Report": {
      "properties": {
        "count": {
          "example": 20,
          "format": "int32",
          "title": "The total number of rows returned in the report.",
          "type": "integer",
          "x-nullable": true
        },
        "description": {
          "example": "Top 20 accounts based on annual revenue",
          "title": "The description of the report.",
          "type": "string",
          "x-nullable": true
        },
        "headers": {
          "example": [
            "USERNAME",
            "ACCOUNT_NAME",
            "TYPE",
            "DUE_DATE",
            "LAST_UPDATE",
            "ADDRESS1_STATE"
          ],
          "items": {
            "example": "[\"USERNAME\",\"ACCOUNT_NAME\",\"TYPE\",\"DUE_DATE\",\"LAST_UPDATE\",\"ADDRESS1_STATE\"]",
            "title": "The list of column headers that are in the report.",
            "type": "string"
          },
          "title": "The list of column headers that are in the report.",
          "type": "array"
        },
        "id": {
          "example": "00OB00000042FHdMAM",
          "title": "The ID of the report associated with this event.",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "example": "Top Accounts Report",
          "title": "The display name of the report.",
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "example": "REPORT_TYPE_SAVED",
          "title": "Indicates if the report is \"REPORT_TYPE_AD_HOC\" or \"REPORT_TYPE_SAVED\".",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "headers"
      ],
      "title": "Metadata for reports from 3rd party sources, such Salesforce downloads.",
      "type": "object"
    },
    "ResponseControls": {
      "properties": {
        "preventativeControl": {
          "title": "The preventative action applied to this event. For example, \"ALLOWED_TRUSTED_ACTIVITY\" or \"BLOCKED\".",
          "type": "string",
          "x-nullable": true
        },
        "userJustification": {
          "$ref": "#/definitions/UserJustification"
        }
      },
      "required": [
        "userJustification"
      ],
      "title": "Metadata about preventative actions applied to file activity. Only applies to events for users on a preventative watchlist.",
      "type": "object"
    },
    "Risk": {
      "properties": {
        "indicators": {
          "items": {
            "$ref": "#/definitions/RiskIndicator"
          },
          "title": "List of risk indicators identified for this event. If more than one risk indicator applies to this event, the sum of all indicators determines the total risk score.",
          "type": "array"
        },
        "score": {
          "example": 12,
          "format": "int32",
          "title": "Sum of the weights for each risk indicator. This score is used to determine the overall risk severity of the event.",
          "type": "integer",
          "x-nullable": true
        },
        "severity": {
          "enum": [
            "NO_RISK_INDICATED",
            "LOW",
            "MODERATE",
            "HIGH",
            "CRITICAL"
          ],
          "example": "CRITICAL",
          "title": "The general risk assessment of the event, based on the numeric score.",
          "type": "string",
          "x-nullable": true
        },
        "trustReason": {
          "example": "TRUSTED_DOMAIN_BROWSER_URL",
          "title": "The reason the event is trusted. trustReason is only populated if trusted is true for this event.",
          "type": "string",
          "x-nullable": true
        },
        "trusted": {
          "example": true,
          "title": "Indicates whether or not the file activity is trusted based on your Data Preferences settings.",
          "type": "boolean"
        },
        "untrustedValues": {
          "$ref": "#/definitions/UntrustedValues"
        }
      },
      "required": [
        "indicators",
        "trusted",
        "untrustedValues"
      ],
      "title": "Risk factor metadata.",
      "type": "object"
    },
    "RiskIndicator": {
      "type": "object",
      "required": [
        "timestamp"
      ],
      "properties": {
        "indicatorId": {
          "type": "string"
        },
        "indicatorName": {
          "type": "string"
        },
        "categoryId": {
          "type": "string"
        },
        "subCategoryId": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "SavedSearchDetailSearchTermV1": {
      "properties": {
        "apiVersion": {
          "example": 1,
          "format": "int32",
          "title": "Version of the API used to create the search.",
          "type": "integer"
        },
        "columns": {
          "example": [
            "eventId",
            "eventType"
          ],
          "items": {
            "enum": [
              "eventId",
              "eventType",
              "eventTimestamp",
              "insertionTimestamp",
              "filePath",
              "fileName",
              "fileType",
              "fileCategory",
              "fileCategoryByBytes",
              "fileCategoryByExtension",
              "fileSize",
              "fileOwner",
              "md5Checksum",
              "sha256Checksum",
              "createTimestamp",
              "modifyTimestamp",
              "deviceUserName",
              "deviceUid",
              "userUid",
              "osHostName",
              "domainName",
              "publicIpAddress",
              "privateIpAddresses",
              "actor",
              "directoryId",
              "source",
              "url",
              "shared",
              "sharedWith",
              "sharingTypeAdded",
              "cloudDriveId",
              "detectionSourceAlias",
              "fileId",
              "exposure",
              "processOwner",
              "processName",
              "windowTitle",
              "tabUrl",
              "tabTitles",
              "tabTitleErrors",
              "tabUrls",
              "tabUrlErrors",
              "sourceTabTitles",
              "sourceTabTitleErrors",
              "sourceTabUrls",
              "sourceTabUrlErrors",
              "fileClassificationVendors",
              "fileClassificationValues",
              "removableMediaVendor",
              "removableMediaName",
              "removableMediaSerialNumber",
              "removableMediaCapacity",
              "removableMediaBusType",
              "removableMediaMediaName",
              "removableMediaVolumeName",
              "removableMediaPartitionId",
              "syncDestination",
              "syncDestinationUsername",
              "emailDlpPolicyNames",
              "emailSubject",
              "emailSender",
              "emailFrom",
              "emailRecipients",
              "outsideActiveHours",
              "mimeTypeByBytes",
              "mimeTypeByExtension",
              "mimeTypeMismatch",
              "printJobName",
              "printerName",
              "printedFilesBackupPath",
              "remoteActivity",
              "trusted",
              "trustReason",
              "operatingSystemUser",
              "destinationCategory",
              "destinationName",
              "sourceCategory",
              "sourceName",
              "riskScore",
              "riskSeverity",
              "riskIndicatorNames",
              "riskIndicatorWeights",
              "reportName",
              "reportDescription",
              "reportColumnHeaders",
              "reportRecordCount",
              "reportType",
              "reportId"
            ],
            "example": "eventId",
            "title": "List of columns to be displayed in the web app for the search.",
            "type": "string"
          },
          "title": "List of columns to be displayed in the web app for the search.",
          "type": "array",
          "x-nullable": true
        },
        "createdByUID": {
          "example": "806150685834341101",
          "title": "User UID of the user who created the saved search.",
          "type": "string"
        },
        "createdByUsername": {
          "example": "adrian@example.com",
          "title": "Username of the user who created the saved search.",
          "type": "string"
        },
        "creationTimestamp": {
          "example": "2020-10-27T15:16:05.369203Z",
          "format": "date-time",
          "title": "Time at which the saved search was created.",
          "type": "string"
        },
        "groupClause": {
          "enum": [
            "AND",
            "OR"
          ],
          "example": "OR",
          "title": "Grouping clause for any specified groups.",
          "type": "string",
          "x-nullable": true
        },
        "groups": {
          "items": {
            "$ref": "#/definitions/FilterGroupSearchTermV1"
          },
          "title": "One or more FilterGroups to be combined in a query.",
          "type": "array"
        },
        "id": {
          "example": "cde979fa-d551-4be9-b242-39e75b824089",
          "title": "Unique identifier for the saved search.",
          "type": "string"
        },
        "modifiedByUID": {
          "example": "421380797518239242",
          "title": "User UID of the user who last modified the saved search.",
          "type": "string"
        },
        "modifiedByUsername": {
          "example": "ari@example.com",
          "title": "Username of the user who last modified the saved search.",
          "type": "string"
        },
        "modifiedTimestamp": {
          "example": "2020-10-27T15:20:26.311894Z",
          "format": "date-time",
          "title": "Time at which the saved search was last modified.",
          "type": "string"
        },
        "name": {
          "example": "Example saved search",
          "title": "Name given to the saved search.",
          "type": "string"
        },
        "notes": {
          "example": "This search returns all events.",
          "title": "Optional notes about the search.",
          "type": "string",
          "x-nullable": true
        },
        "srtDir": {
          "enum": [
            "asc",
            "desc"
          ],
          "example": "asc",
          "title": "Sort direction.",
          "type": "string",
          "x-nullable": true
        },
        "srtKey": {
          "enum": [
            "eventId",
            "eventType",
            "eventTimestamp",
            "insertionTimestamp",
            "filePath",
            "fileName",
            "fileType",
            "fileCategory",
            "fileCategoryByBytes",
            "fileCategoryByExtension",
            "fileSize",
            "fileOwner",
            "md5Checksum",
            "sha256Checksum",
            "createTimestamp",
            "modifyTimestamp",
            "deviceUserName",
            "deviceUid",
            "userUid",
            "osHostName",
            "domainName",
            "publicIpAddress",
            "privateIpAddresses",
            "actor",
            "directoryId",
            "source",
            "url",
            "shared",
            "sharedWith",
            "sharingTypeAdded",
            "cloudDriveId",
            "detectionSourceAlias",
            "fileId",
            "exposure",
            "processOwner",
            "processName",
            "windowTitle",
            "tabUrl",
            "tabTitles",
            "tabTitleErrors",
            "tabUrls",
            "tabUrlErrors",
            "sourceTabTitles",
            "sourceTabTitleErrors",
            "sourceTabUrls",
            "sourceTabUrlErrors",
            "fileClassificationVendors",
            "fileClassificationValues",
            "removableMediaVendor",
            "removableMediaName",
            "removableMediaSerialNumber",
            "removableMediaCapacity",
            "removableMediaBusType",
            "removableMediaMediaName",
            "removableMediaVolumeName",
            "removableMediaPartitionId",
            "syncDestination",
            "syncDestinationUsername",
            "emailDlpPolicyNames",
            "emailSubject",
            "emailSender",
            "emailFrom",
            "emailRecipients",
            "outsideActiveHours",
            "mimeTypeByBytes",
            "mimeTypeByExtension",
            "mimeTypeMismatch",
            "printJobName",
            "printerName",
            "printedFilesBackupPath",
            "remoteActivity",
            "trusted",
            "trustReason",
            "operatingSystemUser",
            "destinationCategory",
            "destinationName",
            "sourceCategory",
            "sourceName",
            "riskScore",
            "riskSeverity",
            "riskIndicatorNames",
            "riskIndicatorWeights",
            "reportName",
            "reportDescription",
            "reportColumnHeaders",
            "reportRecordCount",
            "reportType",
            "reportId"
          ],
          "example": "eventId",
          "title": "Search term for sorting.",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "apiVersion",
        "createdByUID",
        "createdByUsername",
        "creationTimestamp",
        "groups",
        "id",
        "modifiedByUID",
        "modifiedByUsername",
        "modifiedTimestamp",
        "name"
      ],
      "title": "List of saved searches in the response.",
      "type": "object",
      "x-nullable": true
    },
    "SavedSearchDetailSearchTermV2": {
      "properties": {
        "apiVersion": {
          "example": 1,
          "format": "int32",
          "title": "Version of the API used to create the search.",
          "type": "integer"
        },
        "columns": {
          "example": [
            "@timestamp",
            "event.id"
          ],
          "items": {
            "enum": [
              "@timestamp",
              "event.id",
              "event.inserted",
              "event.ingested",
              "event.action",
              "event.shareType",
              "event.observer",
              "event.detectorDisplayName",
              "event.vector",
              "user.email",
              "user.id",
              "user.deviceUid",
              "file.name",
              "file.originalName",
              "file.directory",
              "file.originalDirectory",
              "file.category",
              "file.mimeType",
              "file.mimeTypeByBytes",
              "file.mimeTypeByExtension",
              "file.sizeInBytes",
              "file.owner",
              "file.created",
              "file.modified",
              "file.hash.md5",
              "file.hash.sha256",
              "file.hash.md5Error",
              "file.hash.sha256Error",
              "file.id",
              "file.url",
              "file.directoryId",
              "file.cloudDriveId",
              "file.classifications.value",
              "file.classifications.vendor",
              "file.changeType",
              "file.archiveId",
              "file.parentArchiveId",
              "file.passwordProtected",
              "report.id",
              "report.name",
              "report.description",
              "report.headers",
              "report.count",
              "report.type",
              "source.category",
              "source.name",
              "source.user.email",
              "source.domain",
              "source.ip",
              "source.privateIp",
              "source.operatingSystem",
              "source.email.sender",
              "source.email.from",
              "source.remoteHostname",
              "source.removableMedia.vendor",
              "source.removableMedia.mediaName",
              "source.removableMedia.serialNumber",
              "source.removableMedia.capacity",
              "source.removableMedia.busType",
              "source.removableMedia.name",
              "source.removableMedia.volumeName",
              "source.removableMedia.partitionId",
              "source.tabs.title",
              "source.tabs.titleError",
              "source.tabs.url",
              "source.tabs.urlError",
              "source.accountName",
              "source.accountType",
              "source.domains",
              "source.identifiers",
              "source.identifier.id",
              "destination.category",
              "destination.name",
              "destination.user.email",
              "destination.ip",
              "destination.privateIp",
              "destination.operatingSystem",
              "destination.printJobName",
              "destination.printerName",
              "destination.printedFilesBackupPath",
              "destination.email.recipients",
              "destination.email.subject",
              "destination.removableMedia.vendor",
              "destination.removableMedia.mediaName",
              "destination.removableMedia.serialNumber",
              "destination.removableMedia.capacity",
              "destination.removableMedia.busType",
              "destination.removableMedia.name",
              "destination.removableMedia.volumeName",
              "destination.removableMedia.partitionId",
              "destination.tabs.title",
              "destination.tabs.url",
              "destination.tabs.titleError",
              "destination.tabs.urlError",
              "destination.accountName",
              "destination.accountType",
              "destination.domains",
              "destination.remoteHostname",
              "destination.identifiers",
              "destination.identifier.id",
              "process.executable",
              "process.owner",
              "process.extension.browser",
              "process.extension.version",
              "process.extension.loggedInUser",
              "risk.score",
              "risk.severity",
              "risk.indicators.name",
              "risk.indicators.id",
              "risk.indicators.weight",
              "risk.trusted",
              "risk.trustReason",
              "risk.untrustedValues.accountNames",
              "risk.untrustedValues.domains",
              "risk.untrustedValues.gitRepositoryUris",
              "risk.untrustedValues.slackWorkspaces",
              "risk.untrustedValues.urlPaths",
              "responseControls.preventativeControl",
              "responseControls.userJustification.reason",
              "responseControls.userJustification.text",
              "file.acquiredFrom.eventId",
              "file.acquiredFrom.sourceAccountName",
              "file.acquiredFrom.sourceAccountType",
              "file.acquiredFrom.sourceCategory",
              "file.acquiredFrom.sourceName",
              "file.acquiredFrom.sourceUser.email",
              "file.acquiredFrom.agentTimestamp",
              "file.acquiredFrom.userEmail",
              "file.acquiredFrom.eventAction",
              "file.acquiredFrom.tabs.title",
              "file.acquiredFrom.tabs.titleError",
              "file.acquiredFrom.tabs.url",
              "file.acquiredFrom.tabs.urlError",
              "file.acquiredFrom.sourceDomains",
              "file.acquiredFrom.fileName",
              "file.acquiredFrom.md5",
              "file.acquiredFrom.git.repositoryEmail",
              "file.acquiredFrom.git.repositoryUri",
              "file.acquiredFrom.git.repositoryUser",
              "file.acquiredFrom.identifiers",
              "file.acquiredFrom.identifier.id",
              "git.eventId",
              "git.lastCommitHash",
              "git.repositoryUri",
              "git.repositoryUser",
              "git.repositoryEmail",
              "git.repositoryEndpointPath"
            ],
            "example": "@timestamp",
            "title": "List of columns to be displayed in the web app for the search.",
            "type": "string"
          },
          "title": "List of columns to be displayed in the web app for the search.",
          "type": "array",
          "x-nullable": true
        },
        "createdByUID": {
          "example": "806150685834341101",
          "title": "User UID of the user who created the saved search.",
          "type": "string"
        },
        "createdByUsername": {
          "example": "adrian@example.com",
          "title": "Username of the user who created the saved search.",
          "type": "string"
        },
        "creationTimestamp": {
          "example": "2020-10-27T15:16:05.369203Z",
          "format": "date-time",
          "title": "Time at which the saved search was created.",
          "type": "string"
        },
        "groupClause": {
          "enum": [
            "AND",
            "OR"
          ],
          "example": "OR",
          "title": "Grouping clause for any specified groups.",
          "type": "string",
          "x-nullable": true
        },
        "groups": {
          "items": {
            "$ref": "#/definitions/FilterGroupSearchTermV2"
          },
          "title": "One or more FilterGroups to be combined in a query.",
          "type": "array"
        },
        "id": {
          "example": "cde979fa-d551-4be9-b242-39e75b824089",
          "title": "Unique identifier for the saved search.",
          "type": "string"
        },
        "modifiedByUID": {
          "example": "421380797518239242",
          "title": "User UID of the user who last modified the saved search.",
          "type": "string"
        },
        "modifiedByUsername": {
          "example": "ari@example.com",
          "title": "Username of the user who last modified the saved search.",
          "type": "string"
        },
        "modifiedTimestamp": {
          "example": "2020-10-27T15:20:26.311894Z",
          "format": "date-time",
          "title": "Time at which the saved search was last modified.",
          "type": "string"
        },
        "name": {
          "example": "Example saved search",
          "title": "Name given to the saved search.",
          "type": "string"
        },
        "notes": {
          "example": "This search returns all events.",
          "title": "Optional notes about the search.",
          "type": "string",
          "x-nullable": true
        },
        "srtDir": {
          "enum": [
            "asc",
            "desc"
          ],
          "example": "asc",
          "title": "Sort direction.",
          "type": "string",
          "x-nullable": true
        },
        "srtKey": {
          "enum": [
            "@timestamp",
            "event.id",
            "event.inserted",
            "event.ingested",
            "event.action",
            "event.shareType",
            "event.observer",
            "event.detectorDisplayName",
            "event.vector",
            "user.email",
            "user.id",
            "user.deviceUid",
            "file.name",
            "file.originalName",
            "file.directory",
            "file.originalDirectory",
            "file.category",
            "file.mimeType",
            "file.mimeTypeByBytes",
            "file.mimeTypeByExtension",
            "file.sizeInBytes",
            "file.owner",
            "file.created",
            "file.modified",
            "file.hash.md5",
            "file.hash.sha256",
            "file.hash.md5Error",
            "file.hash.sha256Error",
            "file.id",
            "file.url",
            "file.directoryId",
            "file.cloudDriveId",
            "file.classifications.value",
            "file.classifications.vendor",
            "file.changeType",
            "file.archiveId",
            "file.parentArchiveId",
            "file.passwordProtected",
            "report.id",
            "report.name",
            "report.description",
            "report.headers",
            "report.count",
            "report.type",
            "source.category",
            "source.name",
            "source.user.email",
            "source.domain",
            "source.ip",
            "source.privateIp",
            "source.operatingSystem",
            "source.email.sender",
            "source.email.from",
            "source.remoteHostname",
            "source.removableMedia.vendor",
            "source.removableMedia.mediaName",
            "source.removableMedia.serialNumber",
            "source.removableMedia.capacity",
            "source.removableMedia.busType",
            "source.removableMedia.name",
            "source.removableMedia.volumeName",
            "source.removableMedia.partitionId",
            "source.tabs.title",
            "source.tabs.titleError",
            "source.tabs.url",
            "source.tabs.urlError",
            "source.accountName",
            "source.accountType",
            "source.domains",
            "source.identifiers",
            "source.identifier.id",
            "destination.category",
            "destination.name",
            "destination.user.email",
            "destination.ip",
            "destination.privateIp",
            "destination.operatingSystem",
            "destination.printJobName",
            "destination.printerName",
            "destination.printedFilesBackupPath",
            "destination.email.recipients",
            "destination.email.subject",
            "destination.removableMedia.vendor",
            "destination.removableMedia.mediaName",
            "destination.removableMedia.serialNumber",
            "destination.removableMedia.capacity",
            "destination.removableMedia.busType",
            "destination.removableMedia.name",
            "destination.removableMedia.volumeName",
            "destination.removableMedia.partitionId",
            "destination.tabs.title",
            "destination.tabs.url",
            "destination.tabs.titleError",
            "destination.tabs.urlError",
            "destination.accountName",
            "destination.accountType",
            "destination.domains",
            "destination.remoteHostname",
            "destination.identifiers",
            "destination.identifier.id",
            "process.executable",
            "process.owner",
            "process.extension.browser",
            "process.extension.version",
            "process.extension.loggedInUser",
            "risk.score",
            "risk.severity",
            "risk.indicators.name",
            "risk.indicators.id",
            "risk.indicators.weight",
            "risk.trusted",
            "risk.trustReason",
            "risk.untrustedValues.accountNames",
            "risk.untrustedValues.domains",
            "risk.untrustedValues.gitRepositoryUris",
            "risk.untrustedValues.slackWorkspaces",
            "risk.untrustedValues.urlPaths",
            "responseControls.preventativeControl",
            "responseControls.userJustification.reason",
            "responseControls.userJustification.text",
            "file.acquiredFrom.eventId",
            "file.acquiredFrom.sourceAccountName",
            "file.acquiredFrom.sourceAccountType",
            "file.acquiredFrom.sourceCategory",
            "file.acquiredFrom.sourceName",
            "file.acquiredFrom.sourceUser.email",
            "file.acquiredFrom.agentTimestamp",
            "file.acquiredFrom.userEmail",
            "file.acquiredFrom.eventAction",
            "file.acquiredFrom.tabs.title",
            "file.acquiredFrom.tabs.titleError",
            "file.acquiredFrom.tabs.url",
            "file.acquiredFrom.tabs.urlError",
            "file.acquiredFrom.sourceDomains",
            "file.acquiredFrom.fileName",
            "file.acquiredFrom.md5",
            "file.acquiredFrom.git.repositoryEmail",
            "file.acquiredFrom.git.repositoryUri",
            "file.acquiredFrom.git.repositoryUser",
            "file.acquiredFrom.identifiers",
            "file.acquiredFrom.identifier.id",
            "git.eventId",
            "git.lastCommitHash",
            "git.repositoryUri",
            "git.repositoryUser",
            "git.repositoryEmail",
            "git.repositoryEndpointPath"
          ],
          "example": "@timestamp",
          "title": "Search term for sorting.",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "apiVersion",
        "createdByUID",
        "createdByUsername",
        "creationTimestamp",
        "groups",
        "id",
        "modifiedByUID",
        "modifiedByUsername",
        "modifiedTimestamp",
        "name"
      ],
      "title": "List of saved searches in the response.",
      "type": "object",
      "x-nullable": true
    },
    "SavedSearchResponseSearchTermV1": {
      "properties": {
        "searches": {
          "items": {
            "$ref": "#/definitions/SavedSearchDetailSearchTermV1"
          },
          "title": "List of saved searches in the response.",
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "SavedSearchResponseSearchTermV2": {
      "properties": {
        "searches": {
          "items": {
            "$ref": "#/definitions/SavedSearchDetailSearchTermV2"
          },
          "title": "List of saved searches in the response.",
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "SearchFilterSearchTermV1": {
      "default": [],
      "properties": {
        "operator": {
          "default": "IS",
          "enum": [
            "IS",
            "IS_NOT",
            "IS_ANY",
            "IS_NONE",
            "ON_OR_BEFORE",
            "ON_OR_AFTER",
            "ON",
            "WITHIN_THE_LAST",
            "LESS_THAN",
            "GREATER_THAN",
            "EXISTS",
            "DOES_NOT_EXIST"
          ],
          "example": "IS_NOT",
          "title": "The type of match to perform.",
          "type": "string",
          "x-nullable": true
        },
        "term": {
          "enum": [
            "eventId",
            "eventType",
            "eventTimestamp",
            "insertionTimestamp",
            "filePath",
            "fileName",
            "fileType",
            "fileCategory",
            "fileCategoryByBytes",
            "fileCategoryByExtension",
            "fileSize",
            "fileOwner",
            "md5Checksum",
            "sha256Checksum",
            "createTimestamp",
            "modifyTimestamp",
            "deviceUserName",
            "deviceUid",
            "userUid",
            "osHostName",
            "domainName",
            "publicIpAddress",
            "privateIpAddresses",
            "actor",
            "directoryId",
            "source",
            "url",
            "shared",
            "sharedWith",
            "sharingTypeAdded",
            "cloudDriveId",
            "detectionSourceAlias",
            "fileId",
            "exposure",
            "processOwner",
            "processName",
            "windowTitle",
            "tabUrl",
            "tabTitles",
            "tabTitleErrors",
            "tabUrls",
            "tabUrlErrors",
            "sourceTabTitles",
            "sourceTabTitleErrors",
            "sourceTabUrls",
            "sourceTabUrlErrors",
            "fileClassificationVendors",
            "fileClassificationValues",
            "removableMediaVendor",
            "removableMediaName",
            "removableMediaSerialNumber",
            "removableMediaCapacity",
            "removableMediaBusType",
            "removableMediaMediaName",
            "removableMediaVolumeName",
            "removableMediaPartitionId",
            "syncDestination",
            "syncDestinationUsername",
            "emailDlpPolicyNames",
            "emailSubject",
            "emailSender",
            "emailFrom",
            "emailRecipients",
            "outsideActiveHours",
            "mimeTypeByBytes",
            "mimeTypeByExtension",
            "mimeTypeMismatch",
            "printJobName",
            "printerName",
            "printedFilesBackupPath",
            "remoteActivity",
            "trusted",
            "trustReason",
            "operatingSystemUser",
            "destinationCategory",
            "destinationName",
            "sourceCategory",
            "sourceName",
            "riskScore",
            "riskSeverity",
            "riskIndicatorNames",
            "riskIndicatorWeights",
            "reportName",
            "reportDescription",
            "reportColumnHeaders",
            "reportRecordCount",
            "reportType",
            "reportId"
          ],
          "example": "eventId",
          "title": "The field to match.",
          "type": "string",
          "x-nullable": true
        },
        "value": {
          "example": "ari@example.com",
          "title": "The input for the search. This is a string in most cases. For the IS_ANY or IS_NONE operator, use an array of strings.",
          "type": "object",
          "x-nullable": true
        }
      },
      "title": "One or more SearchFilters to be combined in a query.",
      "type": "object"
    },
    "SearchFilterSearchTermV2": {
      "default": [],
      "properties": {
        "operator": {
          "default": "IS",
          "enum": [
            "IS",
            "IS_NOT",
            "IS_ANY",
            "IS_NONE",
            "ON_OR_BEFORE",
            "ON_OR_AFTER",
            "ON",
            "WITHIN_THE_LAST",
            "LESS_THAN",
            "GREATER_THAN",
            "EXISTS",
            "DOES_NOT_EXIST"
          ],
          "example": "IS_NOT",
          "title": "The type of match to perform.",
          "type": "string",
          "x-nullable": true
        },
        "term": {
          "enum": [
            "@timestamp",
            "event.id",
            "event.inserted",
            "event.ingested",
            "event.action",
            "event.shareType",
            "event.observer",
            "event.detectorDisplayName",
            "event.vector",
            "user.email",
            "user.id",
            "user.deviceUid",
            "file.name",
            "file.originalName",
            "file.directory",
            "file.originalDirectory",
            "file.category",
            "file.mimeType",
            "file.mimeTypeByBytes",
            "file.mimeTypeByExtension",
            "file.sizeInBytes",
            "file.owner",
            "file.created",
            "file.modified",
            "file.hash.md5",
            "file.hash.sha256",
            "file.hash.md5Error",
            "file.hash.sha256Error",
            "file.id",
            "file.url",
            "file.directoryId",
            "file.cloudDriveId",
            "file.classifications.value",
            "file.classifications.vendor",
            "file.changeType",
            "file.archiveId",
            "file.parentArchiveId",
            "file.passwordProtected",
            "report.id",
            "report.name",
            "report.description",
            "report.headers",
            "report.count",
            "report.type",
            "source.category",
            "source.name",
            "source.user.email",
            "source.domain",
            "source.ip",
            "source.privateIp",
            "source.operatingSystem",
            "source.email.sender",
            "source.email.from",
            "source.remoteHostname",
            "source.removableMedia.vendor",
            "source.removableMedia.mediaName",
            "source.removableMedia.serialNumber",
            "source.removableMedia.capacity",
            "source.removableMedia.busType",
            "source.removableMedia.name",
            "source.removableMedia.volumeName",
            "source.removableMedia.partitionId",
            "source.tabs.title",
            "source.tabs.titleError",
            "source.tabs.url",
            "source.tabs.urlError",
            "source.accountName",
            "source.accountType",
            "source.domains",
            "source.identifiers",
            "source.identifier.id",
            "destination.category",
            "destination.name",
            "destination.user.email",
            "destination.ip",
            "destination.privateIp",
            "destination.operatingSystem",
            "destination.printJobName",
            "destination.printerName",
            "destination.printedFilesBackupPath",
            "destination.email.recipients",
            "destination.email.subject",
            "destination.removableMedia.vendor",
            "destination.removableMedia.mediaName",
            "destination.removableMedia.serialNumber",
            "destination.removableMedia.capacity",
            "destination.removableMedia.busType",
            "destination.removableMedia.name",
            "destination.removableMedia.volumeName",
            "destination.removableMedia.partitionId",
            "destination.tabs.title",
            "destination.tabs.url",
            "destination.tabs.titleError",
            "destination.tabs.urlError",
            "destination.accountName",
            "destination.accountType",
            "destination.domains",
            "destination.remoteHostname",
            "destination.identifiers",
            "destination.identifier.id",
            "process.executable",
            "process.owner",
            "process.extension.browser",
            "process.extension.version",
            "process.extension.loggedInUser",
            "risk.score",
            "risk.severity",
            "risk.indicators.name",
            "risk.indicators.id",
            "risk.indicators.weight",
            "risk.trusted",
            "risk.trustReason",
            "risk.untrustedValues.accountNames",
            "risk.untrustedValues.domains",
            "risk.untrustedValues.gitRepositoryUris",
            "risk.untrustedValues.slackWorkspaces",
            "risk.untrustedValues.urlPaths",
            "responseControls.preventativeControl",
            "responseControls.userJustification.reason",
            "responseControls.userJustification.text",
            "file.acquiredFrom.eventId",
            "file.acquiredFrom.sourceAccountName",
            "file.acquiredFrom.sourceAccountType",
            "file.acquiredFrom.sourceCategory",
            "file.acquiredFrom.sourceName",
            "file.acquiredFrom.sourceUser.email",
            "file.acquiredFrom.agentTimestamp",
            "file.acquiredFrom.userEmail",
            "file.acquiredFrom.eventAction",
            "file.acquiredFrom.tabs.title",
            "file.acquiredFrom.tabs.titleError",
            "file.acquiredFrom.tabs.url",
            "file.acquiredFrom.tabs.urlError",
            "file.acquiredFrom.sourceDomains",
            "file.acquiredFrom.fileName",
            "file.acquiredFrom.md5",
            "file.acquiredFrom.git.repositoryEmail",
            "file.acquiredFrom.git.repositoryUri",
            "file.acquiredFrom.git.repositoryUser",
            "file.acquiredFrom.identifiers",
            "file.acquiredFrom.identifier.id",
            "git.eventId",
            "git.lastCommitHash",
            "git.repositoryUri",
            "git.repositoryUser",
            "git.repositoryEmail",
            "git.repositoryEndpointPath"
          ],
          "example": "@timestamp",
          "title": "The field to match.",
          "type": "string",
          "x-nullable": true
        },
        "value": {
          "example": "ari@example.com",
          "title": "The input for the search. This is a string in most cases. For the IS_ANY or IS_NONE operator, use an array of strings.",
          "type": "object",
          "x-nullable": true
        }
      },
      "title": "One or more SearchFilters to be combined in a query.",
      "type": "object"
    },
    "SearchRequestSearchTermV1": {
      "properties": {
        "groupClause": {
          "default": "AND",
          "enum": [
            "AND",
            "OR"
          ],
          "example": "OR",
          "title": "Grouping clause for any specified groups.",
          "type": "string",
          "x-nullable": true
        },
        "groups": {
          "default": [],
          "items": {
            "$ref": "#/definitions/FilterGroupSearchTermV1"
          },
          "title": "One or more FilterGroups to be combined in a query.",
          "type": "array"
        },
        "pgNum": {
          "default": 1,
          "example": 1,
          "format": "int32",
          "title": "Page number for search; ignored if pgToken is included.",
          "type": "integer",
          "x-nullable": true
        },
        "pgSize": {
          "default": 100,
          "example": 100,
          "format": "int32",
          "title": "Max number of results to return for a page.",
          "type": "integer",
          "x-nullable": true
        },
        "pgToken": {
          "example": "0_147e9445-2f30-4a91-8b2a-9455332e880a_973435567569502913_986467523038446097_163",
          "title": "A token used to indicate the starting point for additional page results. Typically, you obtain the pgToken value from the nextPgToken provided in a previous request. A pgToken is the only way to page past 10,000 results. If pgToken is supplied, pgNum is ignored. Provide empty string to retrieve the 'first page of results and null to use the pgNum value.",
          "type": "string",
          "x-nullable": true
        },
        "srtDir": {
          "default": "desc",
          "enum": [
            "asc",
            "desc"
          ],
          "example": "asc",
          "title": "Sort direction.",
          "type": "string",
          "x-nullable": true
        },
        "srtKey": {
          "enum": [
            "eventId",
            "eventType",
            "eventTimestamp",
            "insertionTimestamp",
            "filePath",
            "fileName",
            "fileType",
            "fileCategory",
            "fileCategoryByBytes",
            "fileCategoryByExtension",
            "fileSize",
            "fileOwner",
            "md5Checksum",
            "sha256Checksum",
            "createTimestamp",
            "modifyTimestamp",
            "deviceUserName",
            "deviceUid",
            "userUid",
            "osHostName",
            "domainName",
            "publicIpAddress",
            "privateIpAddresses",
            "actor",
            "directoryId",
            "source",
            "url",
            "shared",
            "sharedWith",
            "sharingTypeAdded",
            "cloudDriveId",
            "detectionSourceAlias",
            "fileId",
            "exposure",
            "processOwner",
            "processName",
            "windowTitle",
            "tabUrl",
            "tabTitles",
            "tabTitleErrors",
            "tabUrls",
            "tabUrlErrors",
            "sourceTabTitles",
            "sourceTabTitleErrors",
            "sourceTabUrls",
            "sourceTabUrlErrors",
            "fileClassificationVendors",
            "fileClassificationValues",
            "removableMediaVendor",
            "removableMediaName",
            "removableMediaSerialNumber",
            "removableMediaCapacity",
            "removableMediaBusType",
            "removableMediaMediaName",
            "removableMediaVolumeName",
            "removableMediaPartitionId",
            "syncDestination",
            "syncDestinationUsername",
            "emailDlpPolicyNames",
            "emailSubject",
            "emailSender",
            "emailFrom",
            "emailRecipients",
            "outsideActiveHours",
            "mimeTypeByBytes",
            "mimeTypeByExtension",
            "mimeTypeMismatch",
            "printJobName",
            "printerName",
            "printedFilesBackupPath",
            "remoteActivity",
            "trusted",
            "trustReason",
            "operatingSystemUser",
            "destinationCategory",
            "destinationName",
            "sourceCategory",
            "sourceName",
            "riskScore",
            "riskSeverity",
            "riskIndicatorNames",
            "riskIndicatorWeights",
            "reportName",
            "reportDescription",
            "reportColumnHeaders",
            "reportRecordCount",
            "reportType",
            "reportId"
          ],
          "example": "eventId",
          "title": "Search term for sorting.",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "groups"
      ],
      "type": "object"
    },
    "SearchRequestSearchTermV2": {
      "properties": {
        "groupClause": {
          "default": "AND",
          "enum": [
            "AND",
            "OR"
          ],
          "example": "OR",
          "title": "Grouping clause for any specified groups.",
          "type": "string",
          "x-nullable": true
        },
        "groups": {
          "default": [],
          "items": {
            "$ref": "#/definitions/FilterGroupSearchTermV2"
          },
          "title": "One or more FilterGroups to be combined in a query.",
          "type": "array"
        },
        "pgNum": {
          "default": 1,
          "example": 1,
          "format": "int32",
          "title": "Page number for search; ignored if pgToken is included.",
          "type": "integer",
          "x-nullable": true
        },
        "pgSize": {
          "default": 100,
          "example": 100,
          "format": "int32",
          "title": "Max number of results to return for a page.",
          "type": "integer",
          "x-nullable": true
        },
        "pgToken": {
          "example": "0_147e9445-2f30-4a91-8b2a-9455332e880a_973435567569502913_986467523038446097_163",
          "title": "A token used to indicate the starting point for additional page results. Typically, you obtain the pgToken value from the nextPgToken provided in a previous request. A pgToken is the only way to page past 10,000 results. If pgToken is supplied, pgNum is ignored. Provide empty string to retrieve the 'first page of results and null to use the pgNum value.",
          "type": "string",
          "x-nullable": true
        },
        "srtDir": {
          "default": "desc",
          "enum": [
            "asc",
            "desc"
          ],
          "example": "asc",
          "title": "Sort direction.",
          "type": "string",
          "x-nullable": true
        },
        "srtKey": {
          "enum": [
            "@timestamp",
            "event.id",
            "event.inserted",
            "event.ingested",
            "event.action",
            "event.shareType",
            "event.observer",
            "event.detectorDisplayName",
            "event.vector",
            "user.email",
            "user.id",
            "user.deviceUid",
            "file.name",
            "file.originalName",
            "file.directory",
            "file.originalDirectory",
            "file.category",
            "file.mimeType",
            "file.mimeTypeByBytes",
            "file.mimeTypeByExtension",
            "file.sizeInBytes",
            "file.owner",
            "file.created",
            "file.modified",
            "file.hash.md5",
            "file.hash.sha256",
            "file.hash.md5Error",
            "file.hash.sha256Error",
            "file.id",
            "file.url",
            "file.directoryId",
            "file.cloudDriveId",
            "file.classifications.value",
            "file.classifications.vendor",
            "file.changeType",
            "file.archiveId",
            "file.parentArchiveId",
            "file.passwordProtected",
            "report.id",
            "report.name",
            "report.description",
            "report.headers",
            "report.count",
            "report.type",
            "source.category",
            "source.name",
            "source.user.email",
            "source.domain",
            "source.ip",
            "source.privateIp",
            "source.operatingSystem",
            "source.email.sender",
            "source.email.from",
            "source.remoteHostname",
            "source.removableMedia.vendor",
            "source.removableMedia.mediaName",
            "source.removableMedia.serialNumber",
            "source.removableMedia.capacity",
            "source.removableMedia.busType",
            "source.removableMedia.name",
            "source.removableMedia.volumeName",
            "source.removableMedia.partitionId",
            "source.tabs.title",
            "source.tabs.titleError",
            "source.tabs.url",
            "source.tabs.urlError",
            "source.accountName",
            "source.accountType",
            "source.domains",
            "source.identifiers",
            "source.identifier.id",
            "destination.category",
            "destination.name",
            "destination.user.email",
            "destination.ip",
            "destination.privateIp",
            "destination.operatingSystem",
            "destination.printJobName",
            "destination.printerName",
            "destination.printedFilesBackupPath",
            "destination.email.recipients",
            "destination.email.subject",
            "destination.removableMedia.vendor",
            "destination.removableMedia.mediaName",
            "destination.removableMedia.serialNumber",
            "destination.removableMedia.capacity",
            "destination.removableMedia.busType",
            "destination.removableMedia.name",
            "destination.removableMedia.volumeName",
            "destination.removableMedia.partitionId",
            "destination.tabs.title",
            "destination.tabs.url",
            "destination.tabs.titleError",
            "destination.tabs.urlError",
            "destination.accountName",
            "destination.accountType",
            "destination.domains",
            "destination.remoteHostname",
            "destination.identifiers",
            "destination.identifier.id",
            "process.executable",
            "process.owner",
            "process.extension.browser",
            "process.extension.version",
            "process.extension.loggedInUser",
            "risk.score",
            "risk.severity",
            "risk.indicators.name",
            "risk.indicators.id",
            "risk.indicators.weight",
            "risk.trusted",
            "risk.trustReason",
            "risk.untrustedValues.accountNames",
            "risk.untrustedValues.domains",
            "risk.untrustedValues.gitRepositoryUris",
            "risk.untrustedValues.slackWorkspaces",
            "risk.untrustedValues.urlPaths",
            "responseControls.preventativeControl",
            "responseControls.userJustification.reason",
            "responseControls.userJustification.text",
            "file.acquiredFrom.eventId",
            "file.acquiredFrom.sourceAccountName",
            "file.acquiredFrom.sourceAccountType",
            "file.acquiredFrom.sourceCategory",
            "file.acquiredFrom.sourceName",
            "file.acquiredFrom.sourceUser.email",
            "file.acquiredFrom.agentTimestamp",
            "file.acquiredFrom.userEmail",
            "file.acquiredFrom.eventAction",
            "file.acquiredFrom.tabs.title",
            "file.acquiredFrom.tabs.titleError",
            "file.acquiredFrom.tabs.url",
            "file.acquiredFrom.tabs.urlError",
            "file.acquiredFrom.sourceDomains",
            "file.acquiredFrom.fileName",
            "file.acquiredFrom.md5",
            "file.acquiredFrom.git.repositoryEmail",
            "file.acquiredFrom.git.repositoryUri",
            "file.acquiredFrom.git.repositoryUser",
            "file.acquiredFrom.identifiers",
            "file.acquiredFrom.identifier.id",
            "git.eventId",
            "git.lastCommitHash",
            "git.repositoryUri",
            "git.repositoryUser",
            "git.repositoryEmail",
            "git.repositoryEndpointPath"
          ],
          "example": "@timestamp",
          "title": "Search term for sorting.",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "groups"
      ],
      "type": "object"
    },
    "SharedWithUser": {
      "example": [
        {
          "cloudUsername": "alix@example.com"
        }
      ],
      "properties": {
        "cloudUsername": {
          "example": "alix@example.com",
          "title": "Name of the user reported by the cloud provider with whom the file was shared.",
          "type": "string"
        }
      },
      "required": [
        "cloudUsername"
      ],
      "title": "A list of users who have been granted explicit rights to the file at the time the event occurred.",
      "type": "object"
    },
    "Source": {
      "properties": {
        "accountName": {
          "title": "For cloud sync apps installed on user devices, the name of the cloud account where the event was observed. This can help identify if the activity occurred in a business or personal account.",
          "type": "string",
          "x-nullable": true
        },
        "accountType": {
          "title": "For cloud sync apps installed on user devices, the type of account where the event was observed. For example, 'BUSINESS' or 'PERSONAL'.",
          "type": "string",
          "x-nullable": true
        },
        "category": {
          "example": "Social Media",
          "title": "General category of where the file originated. For example: Cloud Storage, Email, Social Media.",
          "type": "string",
          "x-nullable": true
        },
        "domain": {
          "example": "localhost",
          "title": "Fully qualified domain name (FQDN) for the user's device at the time the event is recorded.  If the device is unable to resolve the domain name of the host, it reports the IP address of the host.",
          "type": "string",
          "x-nullable": true
        },
        "domains": {
          "items": {
            "title": "The domain section of the URLs reported in source.tabs.url. (Note: Although similar in name, this field has no relation to source.domain, which reports the FQDN or IP address of the user's device.)",
            "type": "string"
          },
          "title": "The domain section of the URLs reported in source.tabs.url. (Note: Although similar in name, this field has no relation to source.domain, which reports the FQDN or IP address of the user's device.)",
          "type": "array"
        },
        "email": {
          "$ref": "#/definitions/SourceEmail"
        },
        "ip": {
          "example": "127.0.0.1",
          "title": "The external IP address of the user's device.",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "example": "Mari's MacBook",
          "title": "The name reported by the device's operating system.  This may be different than the device name in the Code42 console.",
          "type": "string",
          "x-nullable": true
        },
        "operatingSystem": {
          "example": "Windows 10",
          "title": "The operating system of the source device.",
          "type": "string",
          "x-nullable": true
        },
        "privateIp": {
          "example": [
            "127.0.0.1",
            "127.0.0.2"
          ],
          "items": {
            "example": "[\"127.0.0.1\",\"127.0.0.2\"]",
            "title": "The IP address of the user's device on your internal network, including Network interfaces, Virtual Network Interface controllers (NICs), and Loopback/non-routable addresses.",
            "type": "string"
          },
          "title": "The IP address of the user's device on your internal network, including Network interfaces, Virtual Network Interface controllers (NICs), and Loopback/non-routable addresses.",
          "type": "array"
        },
        "remoteHostname": {
          "title": "For events where a file transfer tool was used, the source hostname.",
          "type": "string",
          "x-nullable": true
        },
        "removableMedia": {
          "$ref": "#/definitions/RemovableMedia"
        },
        "tabs": {
          "items": {
            "$ref": "#/definitions/Tab"
          },
          "title": "Metadata about the browser tab source.",
          "type": "array"
        },
        "user": {
          "$ref": "#/definitions/SourceUser"
        }
      },
      "required": [
        "domains",
        "email",
        "privateIp",
        "removableMedia",
        "tabs",
        "user"
      ],
      "title": "Metadata about the source of the file event.",
      "type": "object"
    },
    "SourceEmail": {
      "properties": {
        "from": {
          "example": "ari@example.com",
          "title": "The display name of the sender, as it appears in the \"From\" field in the email. In many cases, this is the same as source.email.sender, but it can be different if the message is sent by a server or other mail agent on behalf of someone else.",
          "type": "string",
          "x-nullable": true
        },
        "sender": {
          "example": "ari@example.com",
          "title": "The address of the entity responsible for transmitting the message. In many cases, this is the same as source.email.from, but it can be different if the message is sent by a server or other mail agent on behalf of someone else.",
          "type": "string",
          "x-nullable": true
        }
      },
      "title": "Metadata about the email source.",
      "type": "object"
    },
    "SourceUser": {
      "properties": {
        "email": {
          "example": [
            "first.last@example.com",
            "first_last_example_com"
          ],
          "items": {
            "example": "[\"first.last@example.com\",\"first_last_example_com\"]",
            "title": "For endpoint events where a file in cloud storage is synced to a device, the email address of the user logged in to the cloud storage provider.",
            "type": "string"
          },
          "title": "For endpoint events where a file in cloud storage is synced to a device, the email address of the user logged in to the cloud storage provider.",
          "type": "array"
        }
      },
      "required": [
        "email"
      ],
      "title": "Metadata about the source user.",
      "type": "object"
    },
    "StreamingResponseBody": {
      "type": "object"
    },
    "Tab": {
      "properties": {
        "title": {
          "example": "Example Domain",
          "title": "The title of this app or browser tab.",
          "type": "string",
          "x-nullable": true
        },
        "titleError": {
          "example": "InsufficientPermissions",
          "title": "Reason the title of this app or browser tab is unavailable.",
          "type": "string",
          "x-nullable": true
        },
        "url": {
          "example": "https://example.com/",
          "title": "The URL of this browser tab.",
          "type": "string",
          "x-nullable": true
        },
        "urlError": {
          "example": "InsufficientPermissions",
          "title": "Reason the URL of this browser tab is unavailable.",
          "type": "string",
          "x-nullable": true
        }
      },
      "title": "Metadata about the browser tab destination.",
      "type": "object"
    },
    "UntrustedValues": {
      "properties": {
        "accountNames": {
          "items": {
            "title": "Account names that do not match an entry in your list of Trusted activity. Values are obtained from the account name metadata for the event. Only applies to event types that are evaluated for trust.",
            "type": "string"
          },
          "title": "Account names that do not match an entry in your list of Trusted activity. Values are obtained from the account name metadata for the event. Only applies to event types that are evaluated for trust.",
          "type": "array"
        },
        "domains": {
          "items": {
            "title": "Domains that do not match an entry in your list of Trusted activity. Values are obtained from the domain section of related metadata for the event. Only applies to event types that are evaluated for trust.",
            "type": "string"
          },
          "title": "Domains that do not match an entry in your list of Trusted activity. Values are obtained from the domain section of related metadata for the event. Only applies to event types that are evaluated for trust.",
          "type": "array"
        },
        "gitRepositoryUris": {
          "items": {
            "title": "Git URIs that do not match an entry in your list of Trusted activity. Values are obtained from the Git URI metadata for the event. Only applies to event types that are evaluated for trust.",
            "type": "string"
          },
          "title": "Git URIs that do not match an entry in your list of Trusted activity. Values are obtained from the Git URI metadata for the event. Only applies to event types that are evaluated for trust.",
          "type": "array"
        },
        "slackWorkspaces": {
          "items": {
            "title": "Slack workspaces that do not match an entry in your list of Trusted activity. Values are obtained from the Slack metadata for the event. Only applies to event types that are evaluated for trust.",
            "type": "string"
          },
          "title": "Slack workspaces that do not match an entry in your list of Trusted activity. Values are obtained from the Slack metadata for the event. Only applies to event types that are evaluated for trust.",
          "type": "array"
        },
        "urlPaths": {
          "items": {
            "title": "URL paths that do not match an entry in your list of Trusted activity. Values are obtained from the URL metadata for the event. Only applies to event types that are evaluated for trust.",
            "type": "string"
          },
          "title": "URL paths that do not match an entry in your list of Trusted activity. Values are obtained from the URL metadata for the event. Only applies to event types that are evaluated for trust.",
          "type": "array"
        }
      },
      "required": [
        "accountNames",
        "domains",
        "gitRepositoryUris",
        "slackWorkspaces",
        "urlPaths"
      ],
      "title": "Values that do not match an entry in your list of Trusted activity.",
      "type": "object"
    },
    "UserJustification": {
      "properties": {
        "reason": {
          "example": "Other",
          "title": "User-selected justification for temporarily allowing this action.",
          "type": "string",
          "x-nullable": true
        },
        "text": {
          "example": "POV data for client",
          "title": "User-entered justification for temporarily allowing this action. Only applies when reason is \"Other\".",
          "type": "string",
          "x-nullable": true
        }
      },
      "title": "Metadata about the user-selected reason for allowing the file activity.",
      "type": "object"
    },
    "ActivityAction": {
      "description": "A list of activity actions associated with the action group.",
      "properties": {
        "providers": {
          "description": "A list of enabled providers for the specified activity action.",
          "items": {
            "$ref": "#/definitions/ActivityActionProvider"
          },
          "type": "array",
          "uniqueItems": true
        },
        "type": {
          "description": "\nBelow you will find specific activity actions supported for each trusted activity type.\n\n|  Action / Type  | `ACCOUNT_NAME` | `DOMAIN` | `GIT_REPOSITORY_URI` | `SLACK` | `URL_PATH` |\n|:---------------:|:--------------:|:--------:|:--------------------:|:-------:|------------|\n| `CLOUD_SHARE`   |                |     ✓    |                      |         |            |\n| `CLOUD_SYNC`    |        ✓       |     ✓    |                      |         |            |\n| `EMAIL`         |                |     ✓    |                      |         |            |\n| `FILE_TRANSFER` |                |     ✓    |                      |         |            |\n| `FILE_UPLOAD`   |                |     ✓    |                      |         |            |\n| `GIT_PUSH`      |                |     ✓    |           ✓          |         |            |\n\nNote: Trusted activity types `SLACK` and `URL_PATH` do not support any activity action defintion. \nFor these trusted activity types, simply pass an empty array for activityActions.\n",
          "enum": [
            "CLOUD_SHARE",
            "CLOUD_SYNC",
            "EMAIL",
            "FILE_TRANSFER",
            "FILE_UPLOAD",
            "GIT_PUSH"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "ActivityActionGroup": {
      "description": "An Activity Action Group associated with a Trusted Activity.",
      "properties": {
        "activityActions": {
          "description": "A list of activity actions associated with the action group.",
          "items": {
            "$ref": "#/definitions/ActivityAction"
          },
          "type": "array",
          "uniqueItems": true
        },
        "name": {
          "description": "The name of the activity action group.",
          "enum": [
            "DEFAULT"
          ],
          "type": "string"
        }
      },
      "required": [
        "activityActions",
        "name"
      ],
      "type": "object"
    },
    "ActivityActionProvider": {
      "description": "An Activity Action Provider associated with an activity action.",
      "properties": {
        "name": {
          "description": "\nThe only two Trusted Activity Types that support specific providers are `DOMAIN` and `ACCOUNT_NAME`.\n\nBelow you will find specific providers for each action supported by the `DOMAIN` and `ACCOUNT_NAME` types. \nIf no providers are listed for a particular action, it means that no specific providers are required for that action type. \nPass an empty array for providers. \n\nProviders for each action supported by the `DOMAIN` type:\n\n| Provider / Action | `CLOUD_SHARE` | `CLOUD_SYNC` | `EMAIL` | `FILE_UPLOAD` | `GIT_PUSH` |\n|:-----------------:|:-------------:|:------------:|:-------:|:-------------:|:----------:|\n|       `BOX`       |       ✓       |       ✓      |         |               |            |\n|     `DROPBOX`     |               |              |         |               |            |\n|   `GOOGLE_DRIVE`  |       ✓       |       ✓      |         |               |            |\n|      `GMAIL`      |               |              |    ✓    |               |            |\n|      `ICLOUD`     |               |       ✓      |         |               |            |\n|    `OFFICE_365`   |               |              |    ✓    |               |            |\n|    `ONE_DRIVE`    |       ✓       |       ✓      |         |               |            |\n\nProviders for each action supported by the `ACCOUNT_NAME` type:\n\n| Provider / Action | `CLOUD_SYNC` |\n|:-----------------:|:------------:|\n|      `ICLOUD`     |              |\n|       `BOX`       |              |\n|     `DROPBOX`     |       ✓      |\n|   `GOOGLE_DRIVE`  |              |\n|      `GMAIL`      |              |\n|    `OFFICE_365`   |              |\n|    `ONE_DRIVE`    |       ✓      |\n",
          "enum": [
            "BOX",
            "DROPBOX",
            "GOOGLE_DRIVE",
            "GMAIL",
            "ICLOUD",
            "OFFICE_365",
            "ONE_DRIVE"
          ],
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "ErrorResponse": {
      "description": "A generic error response",
      "properties": {
        "msg": {
          "description": "The message associated with the error.",
          "nullable": false,
          "type": "string"
        }
      },
      "required": [
        "msg"
      ],
      "type": "object"
    },
    "TrustedActivitiesListResponse": {
      "properties": {
        "totalCount": {
          "description": "The total count of TrustedActivityResponse objects returned.",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "trustedActivities": {
          "description": "A list of TrustedActivityResponse objects.",
          "items": {
            "$ref": "#/definitions/TrustedActivityResponse"
          },
          "type": "array"
        }
      },
      "required": [
        "totalCount",
        "trustedActivities"
      ],
      "type": "object"
    },
    "TrustedActivityRequest": {
      "properties": {
        "activityActionGroups": {
          "description": "The collection of activity action groups the associated trusted activity applies to. \nBelow you will find specific requirements for each trusted activity type.\n- `DOMAIN` - If no activity action group is provided, the default will be assigned implicitly. Else; the supplied groups will be applied, and override any existing configuration. \n- `ACCOUNT_NAME` - At least one activity action group is required. On update, The supplied groups will be applied, and override any existing configuration.\n- `GIT_REPOSITORY_URI` - At least one activity action group is required. On update, The supplied groups will be applied, and override any existing configuration.\n- `SLACK` - No activity action groups are allowed - array must be empty.\n- `URL_PATH` - No activity action groups are allowed - array must be empty.",
          "items": {
            "$ref": "#/definitions/ActivityActionGroup"
          },
          "type": "array",
          "uniqueItems": true
        },
        "description": {
          "description": "A description of the trusted activity.",
          "example": "description text",
          "type": "string"
        },
        "isHighValueSource": {
          "description": "Indicates if the resource is a high value source of company information. If true, a source risk indicator is \napplied to events for files downloaded from this location and later uploaded to an untrusted destination.\n### Supported trusted activity types\n\n- `DOMAIN`\n- `SLACK`\n- `URL_PATH`\n- `ACCOUNT_NAME`\n- `GIT_REPOSITORY_URI`\n\nNote: When updating a resource, if the `isHighValueSource` property is not explicitly set, the existing value\nof the property remains unchanged.",
          "example": true,
          "type": "boolean"
        },
        "type": {
          "description": "The type of the trusted activity.",
          "enum": [
            "ACCOUNT_NAME",
            "DOMAIN",
            "GIT_REPOSITORY_URI",
            "SLACK",
            "URL_PATH"
          ],
          "example": "DOMAIN",
          "type": "string"
        },
        "value": {
          "description": "The value of the trusted activity.",
          "example": "example.com",
          "type": "string"
        }
      },
      "required": [
        "activityActionGroups",
        "type",
        "value"
      ],
      "type": "object"
    },
    "TrustedActivityResponse": {
      "properties": {
        "activityActionGroups": {
          "description": "The list of activity action groups for the trusted activity.",
          "items": {
            "$ref": "#/definitions/ActivityActionGroup"
          },
          "type": "array",
          "uniqueItems": true
        },
        "activityId": {
          "description": "The unique identifier of the trusted activity.",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "description": {
          "description": "A description of the trusted activity.",
          "example": "description text",
          "type": "string"
        },
        "isHighValueSource": {
          "description": "Indicates if the resource is a high value source of company information. If true, a source risk indicator is applied to events for files downloaded from this location and later uploaded to an untrusted destination.",
          "example": true,
          "type": "boolean"
        },
        "principalType": {
          "description": "The type of the principal that last updated the resource.",
          "enum": [
            "USER",
            "API_KEY",
            "DEVICE",
            "SERVICE"
          ],
          "example": "USER",
          "type": "string"
        },
        "type": {
          "description": "The type of the trusted activity.",
          "enum": [
            "ACCOUNT_NAME",
            "DOMAIN",
            "GIT_REPOSITORY_URI",
            "SLACK",
            "URL_PATH"
          ],
          "example": "DOMAIN",
          "type": "string"
        },
        "updateTime": {
          "description": "The time at which the trust activity was last created or modified.",
          "example": "2019-05-28T09:15:00Z",
          "format": "date-time",
          "type": "string"
        },
        "updatedByPrincipalId": {
          "description": "The unique identifier of the user who last updated the trust activity.",
          "example": "123456789",
          "type": "string"
        },
        "updatedByPrincipalName": {
          "description": "The username of the user who last updated the trusted activity.",
          "example": "user@example.com",
          "type": "string"
        },
        "value": {
          "description": "The value of the trusted activity.",
          "example": "example.com",
          "type": "string"
        }
      },
      "required": [
        "activityActionGroups",
        "activityId",
        "principalType",
        "type",
        "updateTime",
        "updatedByPrincipalId",
        "updatedByPrincipalName",
        "value"
      ],
      "type": "object"
    },
    "DateRange": {
      "description": "Finds events whose timestamp is within the given range, inclusive of endpoints.",
      "properties": {
        "endTime": {
          "format": "date-time",
          "type": "string"
        },
        "startTime": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ExportRequest": {
      "properties": {
        "actorIds": {
          "description": "Finds events whose actor_id is one of the given ids. An actor may be a human user or a service.",
          "example": "user@example.com",
          "items": {
            "description": "Finds events whose actor_id is one of the given ids. An actor may be a human user or a service.",
            "example": "user@example.com",
            "type": "string"
          },
          "type": "array"
        },
        "actorIpAddresses": {
          "description": "Finds events whose actor_ip_address is one of the given IP addresses.",
          "example": "127.0.0.1",
          "items": {
            "description": "Finds events whose actor_ip_address is one of the given IP addresses.",
            "example": "127.0.0.1",
            "type": "string"
          },
          "type": "array"
        },
        "actorNames": {
          "description": "Finds events whose actor_name is one of the given names. An actor may be a human user or a service.",
          "example": "ExampleName",
          "items": {
            "description": "Finds events whose actor_name is one of the given names. An actor may be a human user or a service.",
            "example": "ExampleName",
            "type": "string"
          },
          "type": "array"
        },
        "dateRange": {
          "$ref": "#/definitions/DateRange"
        },
        "eventTypes": {
          "description": "Finds events whose type is one of the given types.",
          "example": "support_user_access_disabled",
          "items": {
            "description": "Finds events whose type is one of the given types.",
            "example": "support_user_access_disabled",
            "title": "Some examples: support_user_access_disabled, alert_note_edited, api_client_created, logged_in, case_archived, account_name_added, file_download, search_issued, federation_created, user_activated, risk_profile_cloud_alias_added",
            "type": "string"
          },
          "title": "Some examples: support_user_access_disabled, alert_note_edited, api_client_created, logged_in, case_archived, account_name_added, file_download, search_issued, federation_created, user_activated, risk_profile_cloud_alias_added",
          "type": "array"
        },
        "resourceIds": {
          "description": "Filters events that match resource_id",
          "example": 1523,
          "items": {
            "description": "Filters events that match resource_id",
            "example": "1523",
            "type": "string"
          },
          "type": "array"
        },
        "userTypes": {
          "description": "Filters events that match actor type",
          "enum": [
            "User",
            "Support_User",
            "Api_Client",
            "System",
            "Unknown"
          ],
          "example": "User",
          "items": {
            "description": "Filters events that match actor type",
            "enum": [
              "User",
              "Support_User",
              "Api_Client",
              "System",
              "Unknown"
            ],
            "example": "User",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "RpcExportResponse": {
      "properties": {
        "downloadToken": {
          "description": "Download token to execute an export, acquired from the export api.",
          "example": "abc",
          "type": "string"
        }
      },
      "required": [
        "downloadToken"
      ],
      "type": "object"
    },
    "RpcSearchResponse": {
      "properties": {
        "events": {
          "description": "A list of zero or more events matching the given criteria.",
          "items": {
            "additionalProperties": {
              "description": "A list of zero or more events matching the given criteria.",
              "type": "object"
            },
            "description": "A list of zero or more events matching the given criteria.",
            "type": "object"
          },
          "type": "array"
        },
        "paginationRangeEndIndex": {
          "description": "The index of the last result returned, in relation to total results found",
          "example": 62,
          "format": "int64",
          "type": "integer"
        },
        "paginationRangeStartIndex": {
          "description": "The index of the first result returned, in relation to total results found",
          "example": 0,
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "events",
        "paginationRangeEndIndex",
        "paginationRangeStartIndex"
      ],
      "type": "object"
    },
    "RpcSearchResultsCountResponse": {
      "properties": {
        "totalResultCount": {
          "description": "The total number of results found by this search",
          "example": 104,
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "totalResultCount"
      ],
      "type": "object"
    },
    "SearchAuditLogBody": {
      "properties": {
        "actorIds": {
          "description": "Finds events whose actor_id is one of the given ids. An actor may be a human user or a service.",
          "example": "user@example.com",
          "items": {
            "description": "Finds events whose actor_id is one of the given ids. An actor may be a human user or a service.",
            "example": "user@example.com",
            "type": "string"
          },
          "type": "array"
        },
        "actorIpAddresses": {
          "description": "Finds events whose actor_ip_address is one of the given IP addresses.",
          "example": "127.0.0.1",
          "items": {
            "description": "Finds events whose actor_ip_address is one of the given IP addresses.",
            "example": "127.0.0.1",
            "type": "string"
          },
          "type": "array"
        },
        "actorNames": {
          "description": "Finds events whose actor_name is one of the given names. An actor may be a human user or a service.",
          "example": "ExampleName",
          "items": {
            "description": "Finds events whose actor_name is one of the given names. An actor may be a human user or a service.",
            "example": "ExampleName",
            "type": "string"
          },
          "type": "array"
        },
        "dateRange": {
          "$ref": "#/definitions/DateRange"
        },
        "eventTypes": {
          "description": "Finds events whose type is one of the given types.",
          "example": "support_user_access_disabled",
          "items": {
            "description": "Finds events whose type is one of the given types.",
            "example": "support_user_access_disabled",
            "title": "Some examples: support_user_access_disabled, alert_note_edited, api_client_created, logged_in, case_archived, account_name_added, file_download, search_issued, federation_created, user_activated, risk_profile_cloud_alias_added",
            "type": "string"
          },
          "title": "Some examples: support_user_access_disabled, alert_note_edited, api_client_created, logged_in, case_archived, account_name_added, file_download, search_issued, federation_created, user_activated, risk_profile_cloud_alias_added",
          "type": "array"
        },
        "page": {
          "default": 0,
          "description": "Which page of events to view.",
          "format": "int32",
          "type": "integer"
        },
        "pageSize": {
          "default": 100,
          "description": "How many elements to return on each page.",
          "format": "int32",
          "type": "integer"
        },
        "resourceIds": {
          "description": "Filters events that match resource_id.",
          "example": 1523,
          "items": {
            "description": "Filters events that match resource_id.",
            "example": "1523",
            "type": "string"
          },
          "type": "array"
        },
        "userTypes": {
          "description": "Filters events that match actor type.",
          "enum": [
            "USER",
            "SUPPORT_USER",
            "API_CLIENT",
            "SYSTEM",
            "UNKNOWN"
          ],
          "example": "User",
          "items": {
            "description": "Filters events that match actor type.",
            "enum": [
              "USER",
              "SUPPORT_USER",
              "API_CLIENT",
              "SYSTEM",
              "UNKNOWN"
            ],
            "example": "User",
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "page",
        "pageSize"
      ],
      "type": "object"
    },
    "ActorFamilyResponse": {
      "properties": {
        "children": {
          "description": "The child actors in the family.",
          "items": {
            "$ref": "#/definitions/ActorResponse"
          },
          "type": "array"
        },
        "parent": {
          "$ref": "#/definitions/ActorResponse"
        }
      },
      "required": [
        "children",
        "parent"
      ],
      "type": "object"
    },
    "ActorNotFoundError": {
      "properties": {
        "reason": {
          "description": "Details about the error.",
          "type": "string"
        }
      },
      "required": [
        "reason"
      ],
      "type": "object"
    },
    "ActorResponse": {
      "description": "The child actors in the family.",
      "properties": {
        "active": {
          "description": "The actor's active state.",
          "type": "boolean"
        },
        "actorId": {
          "description": "The actor's identifier.",
          "type": "string"
        },
        "alternateNames": {
          "description": "Other names the actor may have.",
          "items": {
            "description": "Other names the actor may have.",
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "country": {
          "description": "The actor's country.",
          "type": "string"
        },
        "department": {
          "description": "The actor's job department.",
          "type": "string"
        },
        "division": {
          "description": "The actor's job division.",
          "type": "string"
        },
        "employeeType": {
          "description": "The actor's employee type, such as if they are a contractor.",
          "type": "string"
        },
        "endDate": {
          "description": "The actor's end date.",
          "format": "date",
          "type": "string"
        },
        "firstName": {
          "description": "The actor's first/given name.",
          "type": "string"
        },
        "inScope": {
          "description": "The actor's scope state. An actor is considered \"in scope\" if their activity is monitored in at least one data source.",
          "type": "boolean"
        },
        "lastName": {
          "description": "The actor's last name.",
          "type": "string"
        },
        "locality": {
          "description": "The actor's city.",
          "type": "string"
        },
        "managerActorId": {
          "description": "The actorId of this actor's manager.",
          "type": "string"
        },
        "name": {
          "description": "The actor's identifying name. This is usually a username/email.",
          "type": "string"
        },
        "notes": {
          "description": "Notes about the actor.",
          "type": "string"
        },
        "parentActorId": {
          "description": "The actorId of this actor's parent.",
          "type": "string"
        },
        "region": {
          "description": "The actor's state.",
          "type": "string"
        },
        "startDate": {
          "description": "The actor's start date.",
          "format": "date",
          "type": "string"
        },
        "title": {
          "description": "The actor's job title.",
          "type": "string"
        }
      },
      "required": [
        "active",
        "actorId",
        "alternateNames",
        "inScope",
        "name"
      ],
      "type": "object"
    },
    "ActorSearchProblemResponse": {
      "properties": {
        "problem": {
          "description": "An reason why the search failed.",
          "enum": [
            "PAGE_SIZE_TOO_SMALL",
            "PAGE_SIZE_TOO_LARGE",
            "PAGE_TOO_SMALL"
          ],
          "type": "string"
        }
      },
      "required": [
        "problem"
      ],
      "type": "object"
    },
    "ActorSearchResponse": {
      "description": "The matching actors.",
      "properties": {
        "active": {
          "description": "The actor's active state.",
          "type": "boolean"
        },
        "actorId": {
          "description": "The actor's actorId.",
          "type": "string"
        },
        "name": {
          "description": "The actor's name.",
          "type": "string"
        },
        "parentActorId": {
          "description": "The actor's parent actorId.",
          "type": "string"
        }
      },
      "required": [
        "active",
        "actorId",
        "name"
      ],
      "type": "object"
    },
    "ActorsSearchResponse": {
      "properties": {
        "actors": {
          "description": "The matching actors.",
          "items": {
            "$ref": "#/definitions/ActorSearchResponse"
          },
          "type": "array"
        }
      },
      "required": [
        "actors"
      ],
      "type": "object"
    },
    "AdoptionCreationRequest": {
      "description": "Requests that two actors be joined into a family.",
      "properties": {
        "childActorId": {
          "description": "actorId of the actor to be a child in the family.",
          "type": "string"
        },
        "parentActorId": {
          "description": "actorId of the actor to be the parent in the family.",
          "type": "string"
        }
      },
      "required": [
        "childActorId",
        "parentActorId"
      ],
      "type": "object"
    },
    "AdoptionError": {
      "properties": {
        "reason": {
          "description": "Details about the error.",
          "type": "string"
        }
      },
      "required": [
        "reason"
      ],
      "type": "object"
    },
    "AdoptionResponse": {
      "properties": {
        "childActorIds": {
          "description": "The actorIds of any child actors in the family.",
          "items": {
            "description": "The actorIds of any child actors in the family.",
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "parentActorId": {
          "description": "The actorId of the parent actor in the family.",
          "type": "string"
        }
      },
      "required": [
        "childActorIds",
        "parentActorId"
      ],
      "type": "object"
    },
    "WatchlistSdk.Model.ListDepartmentsResponse": {
      "additionalProperties": false,
      "description": "ListDepartmentsResponse",
      "properties": {
        "departments": {
          "description": "Gets or Sets Departments",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "totalCount": {
          "description": "The total count of all departments.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "UpdateIsEnabledCommand": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "isEnabled",
            "tenantId",
            "ruleIds"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 100,
              "example": "MyExampleTenant"
            },
            "ruleIds": {
              "type": "array",
              "description": "The unique identifiers representing the rules you want to act upon.",
              "maxLength": 100,
              "example": [
                "ExampleRuleId1",
                "ExampleRuleId2"
              ],
              "items": {
                "type": "string"
              }
            },
            "isEnabled": {
              "type": "boolean",
              "description": "What to set the rule's enabled activity to.  Either TRUE or FALSE.",
              "example": "TRUE"
            }
          }
        }
      ]
    },
    "DomainValue": {
      "type": "object",
      "x-abstract": true
    },
    "AddUsersToRuleCommand": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "ruleId",
            "userList"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 100,
              "example": "MyExampleTenant"
            },
            "ruleId": {
              "type": "string",
              "description": "The unique identifier representing the rule you want to act upon.",
              "maxLength": 40,
              "example": "ExampleRuleId"
            },
            "userList": {
              "type": "array",
              "description": "List of users to add to the rule.",
              "items": {
                "$ref": "#/definitions/UserBag"
              }
            }
          }
        }
      ]
    },
    "UserBag": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "userIdFromAuthority",
            "userAliasList"
          ],
          "properties": {
            "userIdFromAuthority": {
              "type": "string",
              "description": "User ID from authority.",
              "example": "userIdFromAuthority"
            },
            "userAliasList": {
              "type": "array",
              "description": "List of user aliases corresponding to the user ID from the authority.",
              "example": [
                "userAlias1",
                "userAlias2"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "RemoveUsersFromRuleCommand": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "ruleId",
            "userIdList"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 100,
              "example": "MyExampleTenant"
            },
            "ruleId": {
              "type": "string",
              "description": "The unique identifier representing the rule you want to act upon.",
              "maxLength": 40,
              "example": "ExampleRuleId"
            },
            "userIdList": {
              "type": "array",
              "description": "List of user id (from authority) to remove from the rule.  Will remove all associated aliases",
              "example": [
                "userIdFromAuthority"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "RemoveUserAliasesFromRuleCommand": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "ruleId",
            "userList"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 100,
              "example": "MyExampleTenant"
            },
            "ruleId": {
              "type": "string",
              "description": "The unique identifier representing the rule you want to act upon.",
              "maxLength": 40,
              "example": "ExampleRuleId"
            },
            "userList": {
              "type": "array",
              "description": "List of users to remove from the rule.",
              "items": {
                "$ref": "#/definitions/UserBag"
              }
            }
          }
        }
      ]
    },
    "RemoveAllUsersFromRuleCommand": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "ruleId"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 100,
              "example": "MyExampleTenant"
            },
            "ruleId": {
              "type": "string",
              "description": "The unique identifier representing the rule you want to act upon.",
              "maxLength": 40,
              "example": "ExampleRuleId"
            }
          }
        }
      ]
    },
    "UsersInRuleResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "usersToAlertOn"
          ],
          "properties": {
            "users": {
              "type": "array",
              "description": "List of users to being watched in the rule.\nNote that a userIdFromAuthority value of \"Null UserIdFromAuthority.  These usernames must be edited in the web app.\"indicates that the user alias must be edited via the Code42 console or the Code42 CLI.",
              "items": {
                "$ref": "#/definitions/UserBag"
              }
            },
            "usersToAlertOn": {
              "$ref": "#/definitions/UsersToAlertOn"
            }
          }
        }
      ]
    },
    "UsersToAlertOn": {
      "type": "integer",
      "description": "Possible users list config values for a rule.",
      "example": "ALL_USERS",
      "x-enumNames": [
        "AllUsers",
        "SpecifiedUsers",
        "AllUsersNotSpecified"
      ],
      "enum": [
        "ALL_USERS",
        "ALL_USERS_NOT_SPECIFIED",
        "SPECIFIED_USERS"
      ]
    },
    "GetUsersInRuleQuery": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "ruleId"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 100,
              "example": "MyExampleTenant"
            },
            "ruleId": {
              "type": "string",
              "description": "The unique identifier representing the rule you want to act upon.",
              "maxLength": 40,
              "example": "ExampleRuleId"
            }
          }
        }
      ]
    },
    "CloudSharePermissionsRuleDetailsResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "properties": {
            "rules": {
              "type": "array",
              "description": "List of rule details returned from the query.",
              "items": {
                "$ref": "#/definitions/CloudSharePermissionsRuleDetails"
              }
            }
          }
        }
      ]
    },
    "CloudSharePermissionsRuleDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/CloudSharePermissionsRule"
        },
        {
          "type": "object",
          "required": [
            "createdAt",
            "modifiedAt",
            "isSystem"
          ],
          "properties": {
            "createdAt": {
              "type": "string",
              "description": "The timestamp when the rule was created.",
              "format": "date-time",
              "example": "2020-02-18T01:00:45.0066830Z"
            },
            "createdBy": {
              "type": "string",
              "description": "Username of the individual who created the rule.",
              "example": "UserWhoCreatedTheRule"
            },
            "modifiedAt": {
              "type": "string",
              "description": "Timestamp of when the rule was last modified.",
              "format": "date-time",
              "example": "2020-02-19T01:57:45.0066830Z"
            },
            "modifiedBy": {
              "type": "string",
              "description": "Username of the individual who last modified the rule.",
              "example": "UserWhoMostRecentlyModifiedTheRule"
            },
            "isSystem": {
              "type": "boolean",
              "description": "Boolean indicator of if the rule is a system rule.",
              "example": "FALSE"
            }
          }
        }
      ]
    },
    "CloudSharePermissionsRule": {
      "allOf": [
        {
          "$ref": "#/definitions/CloudSharePermissionsCriteria"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique id of the rule.",
              "example": "RuleId"
            }
          }
        }
      ]
    },
    "CloudSharePermissionsCriteria": {
      "allOf": [
        {
          "$ref": "#/definitions/ExfiltrationRule"
        },
        {
          "type": "object",
          "properties": {
            "watchGoogleDrive": {
              "description": "Watch configuration for google.",
              "$ref": "#/definitions/WatchGoogleDrive"
            },
            "watchMicrosoftOneDrive": {
              "description": "Watch configuration for microsoft one drive.",
              "$ref": "#/definitions/WatchMicrosoftOneDrive"
            },
            "watchBox": {
              "description": "Watch configuration for box.",
              "$ref": "#/definitions/WatchBox"
            }
          }
        }
      ]
    },
    "WatchGoogleDrive": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "publicOnTheWeb",
            "publicViaLink"
          ],
          "properties": {
            "publicOnTheWeb": {
              "type": "boolean",
              "description": "Boolean indicating whether to alert on public on the web shares.",
              "example": "TRUE"
            },
            "publicViaLink": {
              "type": "boolean",
              "description": "Boolean indicating whether to alert on public via link shares.",
              "example": "FALSE"
            },
            "outsideTrustedDomains": {
              "type": "boolean",
              "description": "Boolean indicating whether to alert on outside trusted domains shares.",
              "example": "TRUE"
            }
          }
        }
      ]
    },
    "WatchMicrosoftOneDrive": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "publicViaLink"
          ],
          "properties": {
            "publicViaLink": {
              "type": "boolean",
              "description": "Boolean indicating whether to alert on public via link shares.",
              "example": "FALSE"
            },
            "outsideTrustedDomains": {
              "type": "boolean",
              "description": "Boolean indicating whether to alert on outside trusted domains shares.",
              "example": "TRUE"
            }
          }
        }
      ]
    },
    "WatchBox": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "publicViaLink"
          ],
          "properties": {
            "publicViaLink": {
              "type": "boolean",
              "description": "Boolean indicating whether to alert on public via link shares.",
              "example": "FALSE"
            },
            "outsideTrustedDomains": {
              "type": "boolean",
              "description": "Boolean indicating whether to alert on outside trusted domains shares.",
              "example": "TRUE"
            }
          }
        }
      ]
    },
    "ExfiltrationRule": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "x-abstract": true,
          "required": [
            "isEnabled",
            "tenantId"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 100,
              "example": "MyExampleTenant"
            },
            "name": {
              "type": "string",
              "description": "The name of the rule.",
              "example": "Removable Media Exfiltration Rule"
            },
            "description": {
              "type": "string",
              "description": "The description of the rule.",
              "example": "Alert me on all removable media exfiltration."
            },
            "severity": {
              "description": "Indicates severity of the rule.",
              "$ref": "#/definitions/SeverityRating"
            },
            "isEnabled": {
              "type": "boolean",
              "description": "Boolean indicating if the rule is currently enabled.",
              "example": "TRUE"
            },
            "fileBelongsTo": {
              "$ref": "#/definitions/FileBelongsTo"
            },
            "notificationConfig": {
              "$ref": "#/definitions/NotificationConfig"
            },
            "fileCategoryWatch": {
              "$ref": "#/definitions/FileCategoryWatch"
            },
            "ruleSource": {
              "type": "string",
              "description": "Indicates source of rule creation.  Either alerting or lens application name.",
              "example": "Departing Employee"
            }
          }
        }
      ]
    },
    "SeverityRating": {
      "type": "string",
      "description": "Possible severity values for an alert.",
      "example": "LOW",
      "x-enumNames": [
        "Low",
        "Medium",
        "High"
      ],
      "enum": [
        "LOW",
        "MEDIUM",
        "HIGH"
      ]
    },
    "FileBelongsTo": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "usersToAlertOn"
          ],
          "properties": {
            "usersToAlertOn": {
              "description": "Indicates setting of how to interact with user list.",
              "$ref": "#/definitions/UsersToAlertOn"
            },
            "userList": {
              "type": "array",
              "description": "List of users who's activity is specified as either watching or excluding from watching.",
              "example": [
                "user1",
                "user2"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "NotificationConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "enabled"
          ],
          "properties": {
            "enabled": {
              "type": "boolean",
              "description": "Boolean indicating if the notifications are turned on.",
              "example": "TRUE"
            },
            "notificationInfo": {
              "type": "array",
              "description": "Config information for notifications.",
              "items": {
                "$ref": "#/definitions/NotificationInfo"
              }
            }
          }
        }
      ]
    },
    "NotificationInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "notificationType"
          ],
          "properties": {
            "notificationType": {
              "description": "Type of notification.",
              "$ref": "#/definitions/NotificationType"
            },
            "notificationAddress": {
              "type": "string",
              "description": "Address notification was sent to.",
              "example": "myUsername@company.com"
            }
          }
        }
      ]
    },
    "NotificationType": {
      "type": "string",
      "description": "Type of notification.",
      "example": "EMAIL",
      "x-enumNames": [
        "Email"
      ],
      "enum": [
        "EMAIL"
      ]
    },
    "FileCategoryWatch": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "watchAllFiles"
          ],
          "properties": {
            "watchAllFiles": {
              "type": "boolean",
              "description": "Boolean indicating if rule is watching all file categories.",
              "example": "FALSE"
            },
            "fileCategoryList": {
              "type": "array",
              "description": "List of file categories to watch.",
              "items": {
                "$ref": "#/definitions/FileCategory"
              }
            }
          }
        }
      ]
    },
    "FileCategory": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "fileCount",
            "totalFileSize"
          ],
          "properties": {
            "category": {
              "type": "string"
            },
            "fileCount": {
              "type": "integer",
              "format": "int64"
            },
            "totalFileSize": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      ]
    },
    "GetCloudSharePermissionsRuleDetailsQuery": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "ruleIds"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 100,
              "example": "MyExampleTenant"
            },
            "ruleIds": {
              "type": "array",
              "description": "The unique identifiers representing the rules you want to act upon.",
              "maxLength": 100,
              "example": [
                "ExampleRuleId1",
                "ExampleRuleId2"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "EndpointExfiltrationRuleDetailsResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "properties": {
            "rules": {
              "type": "array",
              "description": "List of rule details returned from the query.",
              "items": {
                "$ref": "#/definitions/EndpointExfiltrationRuleDetails"
              }
            }
          }
        }
      ]
    },
    "EndpointExfiltrationRuleDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/EndpointExfiltrationRule"
        },
        {
          "type": "object",
          "required": [
            "createdAt",
            "modifiedAt",
            "isSystem"
          ],
          "properties": {
            "createdAt": {
              "type": "string",
              "description": "The timestamp when the rule was created.",
              "format": "date-time",
              "example": "2020-02-18T01:00:45.0066830Z"
            },
            "createdBy": {
              "type": "string",
              "description": "Username of the individual who created the rule.",
              "example": "UserWhoCreatedTheRule"
            },
            "modifiedAt": {
              "type": "string",
              "description": "Timestamp of when the rule was last modified.",
              "format": "date-time",
              "example": "2020-02-19T01:57:45.0066830Z"
            },
            "modifiedBy": {
              "type": "string",
              "description": "Username of the individual who last modified the rule.",
              "example": "UserWhoMostRecentlyModifiedTheRule"
            },
            "isSystem": {
              "type": "boolean",
              "description": "Boolean indicator of if the rule is a system rule.",
              "example": "FALSE"
            }
          }
        }
      ]
    },
    "EndpointExfiltrationRule": {
      "allOf": [
        {
          "$ref": "#/definitions/EndpointExfiltrationCriteria"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique id of the rule.",
              "example": "RuleId"
            }
          }
        }
      ]
    },
    "EndpointExfiltrationCriteria": {
      "allOf": [
        {
          "$ref": "#/definitions/ExfiltrationRule"
        },
        {
          "type": "object",
          "required": [
            "timeWindow"
          ],
          "properties": {
            "fileSizeAndCount": {
              "description": "File size and count watch configuration.",
              "$ref": "#/definitions/FileSizeAndCount"
            },
            "fileActivityIs": {
              "description": "Type of file activity the rule is watching.",
              "$ref": "#/definitions/FileActivity"
            },
            "timeWindow": {
              "type": "integer",
              "description": "How long of a period for the activity to aggregate to hit the specified file size and count thresholds.",
              "format": "int32",
              "example": "60"
            }
          }
        }
      ]
    },
    "FileSizeAndCount": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "properties": {
            "fileCountGreaterThan": {
              "type": "integer",
              "description": "Number of files exfiltrated within time window for alert to trigger.",
              "format": "int64",
              "example": "15"
            },
            "totalSizeGreaterThanInBytes": {
              "type": "integer",
              "description": "Size of total files exfiltrated within time window for alert to trigger.",
              "format": "int64",
              "example": "5000"
            },
            "operator": {
              "description": "Operator to use to combine size and count threshold.",
              "$ref": "#/definitions/Operator"
            }
          }
        }
      ]
    },
    "Operator": {
      "type": "integer",
      "description": "Operators to use in file size and count configuration.",
      "x-enumNames": [
        "And",
        "Or"
      ],
      "enum": [
        "AND",
        "OR"
      ]
    },
    "FileActivity": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "uploadedOnRemovableMedia",
            "readByBrowserOrOther"
          ],
          "properties": {
            "syncedToCloudService": {
              "description": "Cloud services to watch for alerts.",
              "$ref": "#/definitions/SyncedToCloudService"
            },
            "uploadedOnRemovableMedia": {
              "type": "boolean",
              "description": "Boolean indicating if we are watching removable media uploads.",
              "example": "TRUE"
            },
            "readByBrowserOrOther": {
              "type": "boolean",
              "description": "Boolean indicating if we are watching browser read activity.",
              "example": "FALSE"
            }
          }
        }
      ]
    },
    "SyncedToCloudService": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "watchBox",
            "watchBoxDrive",
            "watchDropBox",
            "watchGoogleBackupAndSync",
            "watchAppleIcLoud",
            "watchMicrosoftOneDrive"
          ],
          "properties": {
            "watchBox": {
              "type": "boolean",
              "description": "Boolean indicating if we are watching for box cloud sync activity.",
              "example": "TRUE"
            },
            "watchBoxDrive": {
              "type": "boolean",
              "description": "Boolean indicating if we are watching for box drive cloud sync activity.",
              "example": "FALSE"
            },
            "watchDropBox": {
              "type": "boolean",
              "description": "Boolean indicating if we are watching for drop box cloud sync activity.",
              "example": "TRUE"
            },
            "watchGoogleBackupAndSync": {
              "type": "boolean",
              "description": "Boolean indicating if we are watching for google backup and sync cloud sync activity.",
              "example": "FALSE"
            },
            "watchAppleIcLoud": {
              "type": "boolean",
              "description": "Boolean indicating if we are watching for apple iCloud sync activity.",
              "example": "TRUE"
            },
            "watchMicrosoftOneDrive": {
              "type": "boolean",
              "description": "Boolean indicating if we are watching for microsoft one drive cloud sync activity.",
              "example": "TRUE"
            }
          }
        }
      ]
    },
    "GetEndpointExfiltrationRuleDetailsQuery": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "ruleIds"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 100,
              "example": "MyExampleTenant"
            },
            "ruleIds": {
              "type": "array",
              "description": "The unique identifiers representing the rules you want to act upon.",
              "maxLength": 100,
              "example": [
                "ExampleRuleId1",
                "ExampleRuleId2"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "FileTypeMismatchRuleDetailsResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "properties": {
            "rules": {
              "type": "array",
              "description": "List of rule details returned from the query.",
              "items": {
                "$ref": "#/definitions/FileTypeMismatchRuleDetails"
              }
            }
          }
        }
      ]
    },
    "FileTypeMismatchRuleDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/FileTypeMismatchRule"
        },
        {
          "type": "object",
          "required": [
            "createdAt",
            "modifiedAt",
            "isSystem"
          ],
          "properties": {
            "createdAt": {
              "type": "string",
              "description": "The timestamp when the rule was created.",
              "format": "date-time",
              "example": "2020-02-18T01:00:45.0066830Z"
            },
            "createdBy": {
              "type": "string",
              "description": "Username of the individual who created the rule.",
              "example": "UserWhoCreatedTheRule"
            },
            "modifiedAt": {
              "type": "string",
              "description": "Timestamp of when the rule was last modified.",
              "format": "date-time",
              "example": "2020-02-19T01:57:45.0066830Z"
            },
            "modifiedBy": {
              "type": "string",
              "description": "Username of the individual who last modified the rule.",
              "example": "UserWhoMostRecentlyModifiedTheRule"
            },
            "isSystem": {
              "type": "boolean",
              "description": "Boolean indicator of if the rule is a system rule.",
              "example": "FALSE"
            }
          }
        }
      ]
    },
    "FileTypeMismatchRule": {
      "allOf": [
        {
          "$ref": "#/definitions/FileTypeMismatchCriteria"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique id of the rule.",
              "example": "RuleId"
            }
          }
        }
      ]
    },
    "FileTypeMismatchCriteria": {
      "allOf": [
        {
          "$ref": "#/definitions/ExfiltrationRule"
        },
        {
          "type": "object"
        }
      ]
    },
    "GetFileTypeMismatchRuleDetailsQuery": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "ruleIds"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 100,
              "example": "MyExampleTenant"
            },
            "ruleIds": {
              "type": "array",
              "description": "The unique identifiers representing the rules you want to act upon.",
              "maxLength": 100,
              "example": [
                "ExampleRuleId1",
                "ExampleRuleId2"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "FileNameRuleDetailsResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "properties": {
            "rules": {
              "type": "array",
              "description": "List of rule details returned from the query.",
              "items": {
                "$ref": "#/definitions/FileNameRuleDetails"
              }
            }
          }
        }
      ]
    },
    "FileNameRuleDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/FileNameRule"
        },
        {
          "type": "object",
          "required": [
            "createdAt",
            "modifiedAt",
            "isSystem"
          ],
          "properties": {
            "createdAt": {
              "type": "string",
              "description": "The timestamp when the rule was created.",
              "format": "date-time",
              "example": "2020-02-18T01:00:45.0066830Z"
            },
            "createdBy": {
              "type": "string",
              "description": "Username of the individual who created the rule.",
              "example": "UserWhoCreatedTheRule"
            },
            "modifiedAt": {
              "type": "string",
              "description": "Timestamp of when the rule was last modified.",
              "format": "date-time",
              "example": "2020-02-19T01:57:45.0066830Z"
            },
            "modifiedBy": {
              "type": "string",
              "description": "Username of the individual who last modified the rule.",
              "example": "UserWhoMostRecentlyModifiedTheRule"
            },
            "isSystem": {
              "type": "boolean",
              "description": "Boolean indicator of if the rule is a system rule.",
              "example": "FALSE"
            }
          }
        }
      ]
    },
    "FileNameRule": {
      "allOf": [
        {
          "$ref": "#/definitions/FileNameCriteria"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique id of the rule.",
              "example": "RuleId"
            }
          }
        }
      ]
    },
    "FileNameCriteria": {
      "allOf": [
        {
          "$ref": "#/definitions/ExfiltrationRule"
        },
        {
          "type": "object",
          "properties": {
            "fileNamePatterns": {
              "type": "array",
              "description": "List of file name patterns being watched by the rule.",
              "example": [
                "Q?ProductPlan.*",
                "*.cs"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "GetFileNameRuleDetailsQuery": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "ruleIds"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 100,
              "example": "MyExampleTenant"
            },
            "ruleIds": {
              "type": "array",
              "description": "The unique identifiers representing the rules you want to act upon.",
              "maxLength": 100,
              "example": [
                "ExampleRuleId1",
                "ExampleRuleId2"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "CaseProblemResponse": {
      "properties": {
        "description": {
          "example": "subject validation failed",
          "title": "Additional description of the problem",
          "type": "string"
        },
        "problem": {
          "enum": [
            "NAME_EMPTY",
            "NAME_EXISTS",
            "NAME_TOO_LONG",
            "NO_EDITS_ONCE_CLOSED",
            "NO_EDITS_ONCE_ARCHIVED",
            "DESCRIPTION_TOO_LONG",
            "FINDINGS_TOO_LONG",
            "INVALID_CHAR_IN_REQUEST",
            "INVALID_PAGE_NUMBER",
            "INVALID_PAGE_SIZE",
            "INVALID_TIME_INTERVAL",
            "INVALID_USER",
            "USER_VALIDATION_UNAVAILABLE",
            "USER_VALIDATION_FORBIDDEN"
          ],
          "example": "INVALID_USER",
          "title": "The type of problem that occured",
          "type": "string"
        }
      },
      "required": [
        "problem"
      ],
      "type": "object"
    },
    "CreateCaseRequest": {
      "properties": {
        "assignee": {
          "example": "273411254592236331",
          "title": "The user UID of the administrator assigned to investigate the case.",
          "type": "string"
        },
        "description": {
          "example": "Sample description",
          "title": "Brief description providing context for a case.",
          "type": "string"
        },
        "findings": {
          "example": "Sample findings",
          "title": "Markdown formatted text summarizing the findings for a case.",
          "type": "string"
        },
        "name": {
          "example": "Sample case name",
          "title": "The unique name given to the case.",
          "type": "string"
        },
        "subject": {
          "example": "421380797518239242",
          "title": "The actor ID of the subject being investigated in this case.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "EventProblemResponse": {
      "properties": {
        "problem": {
          "title": "The type of problem that occured.",
          "type": "string"
        }
      },
      "required": [
        "problem"
      ],
      "type": "object"
    },
    "EventResponse": {
      "properties": {
        "eventId": {
          "example": "0_147e9445-2f30-4a91-8b2a-9455332e880a_973435567569502913_986467523038446097_163",
          "title": "The unique identifier for the event.",
          "type": "string"
        },
        "eventTimestamp": {
          "example": "2020-12-23T14:24:44.593Z",
          "format": "date-time",
          "title": "Date and time that the Code42 service on the device detected an event; based on the device’s system clock and reported in Coordinated Universal Time (UTC).",
          "type": "string"
        },
        "exposure": {
          "example": [
            "OutsideTrustedDomains",
            "IsPublic"
          ],
          "items": {
            "example": "[\"OutsideTrustedDomains\",\"IsPublic\"]",
            "title": "Lists indicators that the data may be exposed.",
            "type": "string"
          },
          "title": "Lists indicators that the data may be exposed.",
          "type": "array"
        },
        "fileAvailability": {
          "enum": [
            "EXACT_FILE_AVAILABLE",
            "RECENT_FILE_AVAILABLE",
            "PENDING",
            "NO_FILE_AVAILABLE",
            "ERROR"
          ],
          "example": "EXACT_FILE_AVAILABLE",
          "title": "The download availability status of the file associated with the event.",
          "type": "string"
        },
        "fileName": {
          "example": "example.docx",
          "title": "The name of the file, including the file extension.",
          "type": "string"
        },
        "filePath": {
          "example": "/Users/casey/Documents/",
          "title": "The file location on the user's device; a path forward or backslash should be included at the end of the filepath. Possibly null if the file event occurred on a cloud provider.",
          "type": "string"
        },
        "riskIndicators": {
          "items": {
            "$ref": "#/definitions/RiskIndicator"
          },
          "title": "List of risk indicators identified for this event. If more than one risk indicator applies to this event, the sum of all indicators determines the total risk score.",
          "type": "array"
        },
        "riskScore": {
          "example": 12,
          "format": "int32",
          "title": "Sum of the weights for each risk indicator. This score is used to determine the overall risk severity of the event.",
          "type": "integer"
        },
        "riskSeverity": {
          "example": "CRITICAL",
          "title": "The general risk assessment of the event, based on the numeric score.",
          "type": "string"
        }
      },
      "required": [
        "eventId",
        "exposure",
        "fileAvailability",
        "riskIndicators"
      ],
      "title": "List of events in the response.",
      "type": "object"
    },
    "MultiCaseResponse": {
      "properties": {
        "cases": {
          "items": {
            "$ref": "#/definitions/SingleSlimCaseResponse"
          },
          "title": "List of cases in the response",
          "type": "array"
        },
        "totalCount": {
          "example": 42,
          "format": "int64",
          "title": "Total number of cases matching the provided filters",
          "type": "integer"
        }
      },
      "required": [
        "cases",
        "totalCount"
      ],
      "type": "object"
    },
    "MultiEventRequest": {
      "properties": {
        "events": {
          "example": [
            "0_147e9445-2f30-4a91-8b2a-9455332e880a_973435567569502913_986467523038446097_163",
            "0_147e9445-2f30-4a91-8b2a-9455332e880a_973435567569502913_986467523038446097_164"
          ],
          "items": {
            "example": "[\"0_147e9445-2f30-4a91-8b2a-9455332e880a_973435567569502913_986467523038446097_163\",\"0_147e9445-2f30-4a91-8b2a-9455332e880a_973435567569502913_986467523038446097_164\"]",
            "title": "List of event IDs corresponding to events to be added to the case.",
            "type": "string"
          },
          "title": "List of event IDs corresponding to events to be added to the case.",
          "type": "array"
        }
      },
      "required": [
        "events"
      ],
      "type": "object"
    },
    "MultipleEventsResponse": {
      "properties": {
        "events": {
          "items": {
            "$ref": "#/definitions/EventResponse"
          },
          "title": "List of events in the response.",
          "type": "array"
        },
        "totalCount": {
          "example": 42,
          "format": "int64",
          "title": "Total number of events associated with the case.",
          "type": "integer"
        }
      },
      "required": [
        "events",
        "totalCount"
      ],
      "type": "object"
    },
    "SingleCaseResponse": {
      "properties": {
        "assignee": {
          "example": "273411254592236331",
          "title": "The user UID of the administrator assigned to investigate the case.",
          "type": "string"
        },
        "assigneeUsername": {
          "example": "admin@example.com",
          "title": "The username of the administrator assigned to investigate the case.",
          "type": "string"
        },
        "createdAt": {
          "example": "2020-10-27T15:16:05.369203Z",
          "format": "date-time",
          "title": "Time at which the case was created.",
          "type": "string"
        },
        "createdByUserUid": {
          "example": "806150685834341101",
          "title": "User UID of the user who created the case.",
          "type": "string"
        },
        "createdByUsername": {
          "example": "adrian@example.com",
          "title": "Username of the user who created the case.",
          "type": "string"
        },
        "description": {
          "example": "Sample description",
          "title": "Brief description providing context for a case.",
          "type": "string"
        },
        "findings": {
          "example": "Sample findings",
          "title": "Markdown formatted text summarizing the findings for a case.",
          "type": "string"
        },
        "lastModifiedByUserUid": {
          "example": "806150685834341101",
          "title": "User UID of the user who last modified the case.",
          "type": "string"
        },
        "lastModifiedByUsername": {
          "example": "adrian@example.com",
          "title": "Username of the user who last modified the case.",
          "type": "string"
        },
        "name": {
          "example": "Sample case name",
          "title": "The unique name given to the case.",
          "type": "string"
        },
        "number": {
          "example": 1,
          "format": "int64",
          "title": "Unique numeric identifier for the case.",
          "type": "integer"
        },
        "status": {
          "enum": [
            "OPEN",
            "CLOSED",
            "ARCHIVED"
          ],
          "example": "OPEN",
          "title": "Indicates the status of the case.\nOPEN: The case is active and all aspects of the case are editable.\nCLOSED: The case is resolved. Closed cases cannot be re-opened or modified. Case data for closed cases is retained indefinitely.\nARCHIVED: The case is no longer active. File events and file contents are permanently deleted and no longer accessible. Archived cases cannot be un-archived or modified.",
          "type": "string"
        },
        "subject": {
          "example": "421380797518239242",
          "title": "The actor ID of the subject being investigated in this case.",
          "type": "string"
        },
        "subjectUsername": {
          "example": "casey@example.com",
          "title": "The username of the subject being investigated in this case.",
          "type": "string"
        },
        "updatedAt": {
          "example": "2020-10-27T15:20:26.311894Z",
          "format": "date-time",
          "title": "Time at which the case was last updated.",
          "type": "string"
        }
      },
      "required": [
        "createdAt",
        "name",
        "number",
        "status",
        "updatedAt"
      ],
      "type": "object"
    },
    "SingleSlimCaseResponse": {
      "properties": {
        "assignee": {
          "example": "273411254592236331",
          "title": "The user UID of the administrator assigned to investigate the case.",
          "type": "string"
        },
        "assigneeUsername": {
          "example": "admin@example.com",
          "title": "The username of the administrator assigned to investigate the case.",
          "type": "string"
        },
        "createdAt": {
          "example": "2020-10-27T15:16:05.369203Z",
          "format": "date-time",
          "title": "Time at which the case was created.",
          "type": "string"
        },
        "createdByUserUid": {
          "example": "806150685834341101",
          "title": "User UID of the user who created the case.",
          "type": "string"
        },
        "createdByUsername": {
          "example": "adrian@example.com",
          "title": "Username of the user who created the case.",
          "type": "string"
        },
        "lastModifiedByUserUid": {
          "example": "806150685834341101",
          "title": "User UID of the user who last modified the case.",
          "type": "string"
        },
        "lastModifiedByUsername": {
          "example": "adrian@example.com",
          "title": "Username of the user who last modified the case.",
          "type": "string"
        },
        "name": {
          "example": "Sample case name",
          "title": "The unique name given to the case.",
          "type": "string"
        },
        "number": {
          "example": 1,
          "format": "int64",
          "title": "Unique numeric identifier for the case.",
          "type": "integer"
        },
        "status": {
          "enum": [
            "OPEN",
            "CLOSED",
            "ARCHIVED"
          ],
          "example": "OPEN",
          "title": "Indicates the status of the case.\nOPEN: The case is active and all aspects of the case are editable.\nCLOSED: The case is resolved. Closed cases cannot be re-opened or modified. Case data for closed cases is retained indefinitely.\nARCHIVED: The case is no longer active. File events and file contents are permanently deleted and no longer accessible. Archived cases cannot be un-archived or modified.",
          "type": "string"
        },
        "subject": {
          "example": "421380797518239242",
          "title": "The actor ID of the subject being investigated in this case.",
          "type": "string"
        },
        "subjectUsername": {
          "example": "casey@example.com",
          "title": "The username of the subject being investigated in this case.",
          "type": "string"
        },
        "updatedAt": {
          "example": "2020-10-27T15:20:26.311894Z",
          "format": "date-time",
          "title": "Time at which the case was last updated.",
          "type": "string"
        }
      },
      "required": [
        "createdAt",
        "name",
        "number",
        "status",
        "updatedAt"
      ],
      "title": "List of cases in the response",
      "type": "object"
    },
    "UpdateCaseRequest": {
      "properties": {
        "assignee": {
          "example": "273411254592236331",
          "title": "The user UID of the administrator assigned to investigate the case.",
          "type": "string"
        },
        "description": {
          "example": "Sample description",
          "title": "Brief description providing context for a case.",
          "type": "string"
        },
        "findings": {
          "example": "Sample findings",
          "title": "Markdown formatted text summarizing the findings for a case.",
          "type": "string"
        },
        "name": {
          "example": "Sample case name",
          "title": "The unique name given to the case.",
          "type": "string"
        },
        "status": {
          "enum": [
            "OPEN",
            "CLOSED",
            "ARCHIVED"
          ],
          "example": "OPEN",
          "title": "Indicates the status of the case.\nOPEN: The case is active and all aspects of the case are editable.\nCLOSED: The case is resolved. Closed cases cannot be re-opened or modified. Case data for closed cases is retained indefinitely.\nARCHIVED: The case is no longer active. File events and file contents are permanently deleted and no longer accessible. Archived cases cannot be un-archived or modified.",
          "type": "string"
        },
        "subject": {
          "example": "421380797518239242",
          "title": "The actor ID of the subject being investigated in this case.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "status"
      ],
      "type": "object"
    },
    "WatchlistSdk.Model.DirectoryGroup": {
      "additionalProperties": false,
      "description": "DirectoryGroup",
      "properties": {
        "groupId": {
          "description": "A unique group ID.",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "description": "Gets or Sets Name",
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "WatchlistSdk.Model.ListDirectoryGroupsResponse": {
      "additionalProperties": false,
      "description": "ListDirectoryGroupsResponse",
      "properties": {
        "directoryGroups": {
          "description": "Gets or Sets DirectoryGroups",
          "items": {
            "$ref": "#/definitions/WatchlistSdk.Model.DirectoryGroup"
          },
          "type": "array",
          "x-nullable": true
        },
        "totalCount": {
          "description": "The total count of all directory groups.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "WatchlistDeprecatedSdk.Model.Date": {
      "additionalProperties": false,
      "description": "Date",
      "properties": {
        "day": {
          "description": "Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a year by itself or a year and month where the day is not significant.",
          "format": "int32",
          "type": "integer"
        },
        "month": {
          "description": "Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day.",
          "format": "int32",
          "type": "integer"
        },
        "year": {
          "description": "Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "WatchlistDeprecatedSdk.Model.ListUserRiskProfilesResponse": {
      "additionalProperties": false,
      "description": "ListUserRiskProfilesResponse",
      "properties": {
        "totalCount": {
          "description": "The total count of all user risk profiles.",
          "format": "int64",
          "type": "integer"
        },
        "userRiskProfiles": {
          "description": "Gets or Sets UserRiskProfiles",
          "items": {
            "$ref": "#/definitions/WatchlistDeprecatedSdk.Model.UserRiskProfile"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "WatchlistDeprecatedSdk.Model.UpdatedUserRiskProfile": {
      "additionalProperties": false,
      "description": "UpdatedUserRiskProfile",
      "properties": {
        "endDate": {
          "allOf": [
            {
              "$ref": "#/definitions/WatchlistDeprecatedSdk.Model.Date"
            }
          ],
          "description": "Gets or Sets EndDate",
          "x-nullable": true
        },
        "notes": {
          "description": "Notes to add to the user risk profile.",
          "type": "string",
          "x-nullable": true
        },
        "startDate": {
          "allOf": [
            {
              "$ref": "#/definitions/WatchlistDeprecatedSdk.Model.Date"
            }
          ],
          "description": "Gets or Sets StartDate",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "WatchlistDeprecatedSdk.Model.UserRiskProfile": {
      "additionalProperties": false,
      "description": "UserRiskProfile",
      "properties": {
        "active": {
          "description": "Whether the user is active.",
          "type": "boolean"
        },
        "cloudAliases": {
          "description": "A list of cloud aliases for the user.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "country": {
          "description": "The user's country.",
          "type": "string",
          "x-nullable": true
        },
        "deleted": {
          "description": "Whether the user is deleted.",
          "type": "boolean"
        },
        "department": {
          "description": "The user's department.",
          "type": "string",
          "x-nullable": true
        },
        "displayName": {
          "description": "The user's friendly display name.",
          "type": "string",
          "x-nullable": true
        },
        "division": {
          "description": "The user's division.",
          "type": "string",
          "x-nullable": true
        },
        "employmentType": {
          "description": "The user's employment type.",
          "type": "string",
          "x-nullable": true
        },
        "endDate": {
          "allOf": [
            {
              "$ref": "#/definitions/WatchlistDeprecatedSdk.Model.Date"
            }
          ],
          "description": "Gets or Sets EndDate",
          "x-nullable": true
        },
        "locality": {
          "description": "The user's locality (city).",
          "type": "string",
          "x-nullable": true
        },
        "managerDisplayName": {
          "description": "The user's manager's friendly display name.",
          "type": "string",
          "x-nullable": true
        },
        "managerId": {
          "description": "The Code42 user ID of the user's manager.",
          "type": "string",
          "x-nullable": true
        },
        "managerUsername": {
          "description": "The Code42 username of the user's manager.",
          "type": "string",
          "x-nullable": true
        },
        "notes": {
          "description": "Notes about the user.",
          "type": "string",
          "x-nullable": true
        },
        "region": {
          "description": "The user's region (state).",
          "type": "string",
          "x-nullable": true
        },
        "startDate": {
          "allOf": [
            {
              "$ref": "#/definitions/WatchlistDeprecatedSdk.Model.Date"
            }
          ],
          "description": "Gets or Sets StartDate",
          "x-nullable": true
        },
        "supportUser": {
          "description": "Whether the user is a support user.",
          "type": "boolean"
        },
        "tenantId": {
          "description": "A unique tenant ID.",
          "type": "string",
          "x-nullable": true
        },
        "title": {
          "description": "The user's job title.",
          "type": "string",
          "x-nullable": true
        },
        "userId": {
          "description": "A unique user ID.",
          "type": "string",
          "x-nullable": true
        },
        "username": {
          "description": "The user's Code42 username.",
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "WatchlistSdk.Model.ActorRiskProfile": {
      "additionalProperties": false,
      "description": "ActorRiskProfile",
      "properties": {
        "active": {
          "description": "Whether the actor is active.",
          "type": "boolean"
        },
        "actorId": {
          "description": "A unique actor ID.",
          "type": "string",
          "x-nullable": true
        },
        "actorname": {
          "description": "The actor's Code42 actorname.",
          "type": "string",
          "x-nullable": true
        },
        "country": {
          "description": "The actor's country.",
          "type": "string",
          "x-nullable": true
        },
        "department": {
          "description": "The actor's department.",
          "type": "string",
          "x-nullable": true
        },
        "displayName": {
          "description": "The actor's friendly display name.",
          "type": "string",
          "x-nullable": true
        },
        "division": {
          "description": "The actor's division.",
          "type": "string",
          "x-nullable": true
        },
        "employmentType": {
          "description": "The actor's employment type.",
          "type": "string",
          "x-nullable": true
        },
        "endDate": {
          "allOf": [
            {
              "$ref": "#/definitions/WatchlistSdk.Model.Date"
            }
          ],
          "description": "Gets or Sets EndDate",
          "x-nullable": true
        },
        "locality": {
          "description": "The actor's locality (city).",
          "type": "string",
          "x-nullable": true
        },
        "managerActorname": {
          "description": "The Code42 actorname of the actor's manager.",
          "type": "string",
          "x-nullable": true
        },
        "managerDisplayName": {
          "description": "The actor's manager's friendly display name.",
          "type": "string",
          "x-nullable": true
        },
        "managerId": {
          "description": "The Code42 actor ID of the actor's manager.",
          "type": "string",
          "x-nullable": true
        },
        "notes": {
          "description": "Notes about the actor.",
          "type": "string",
          "x-nullable": true
        },
        "region": {
          "description": "The actor's region (state).",
          "type": "string",
          "x-nullable": true
        },
        "startDate": {
          "allOf": [
            {
              "$ref": "#/definitions/WatchlistSdk.Model.Date"
            }
          ],
          "description": "Gets or Sets StartDate",
          "x-nullable": true
        },
        "tenantId": {
          "description": "A unique tenant ID.",
          "type": "string",
          "x-nullable": true
        },
        "title": {
          "description": "The actor's job title.",
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "WatchlistSdk.Model.Date": {
      "additionalProperties": false,
      "description": "Date",
      "properties": {
        "day": {
          "description": "Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a year by itself or a year and month where the day is not significant.",
          "format": "int32",
          "type": "integer"
        },
        "month": {
          "description": "Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day.",
          "format": "int32",
          "type": "integer"
        },
        "year": {
          "description": "Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "WatchlistSdk.Model.ListActorRiskProfilesResponse": {
      "additionalProperties": false,
      "description": "ListActorRiskProfilesResponse",
      "properties": {
        "actorRiskProfiles": {
          "description": "Gets or Sets ActorRiskProfiles",
          "items": {
            "$ref": "#/definitions/WatchlistSdk.Model.ActorRiskProfile"
          },
          "type": "array",
          "x-nullable": true
        },
        "totalCount": {
          "description": "The total count of all actor risk profiles.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "WatchlistSdk.Model.UpdatedActorRiskProfile": {
      "additionalProperties": false,
      "description": "UpdatedActorRiskProfile",
      "properties": {
        "endDate": {
          "allOf": [
            {
              "$ref": "#/definitions/WatchlistSdk.Model.Date"
            }
          ],
          "description": "Gets or Sets EndDate",
          "x-nullable": true
        },
        "notes": {
          "description": "Notes to add to the actor risk profile.",
          "type": "string",
          "x-nullable": true
        },
        "startDate": {
          "allOf": [
            {
              "$ref": "#/definitions/WatchlistSdk.Model.Date"
            }
          ],
          "description": "Gets or Sets StartDate",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "AddNoteRequest": {
      "description": "Request body to add a note to a session.",
      "properties": {
        "noteContent": {
          "description": "The content of the note to add.",
          "maxLength": 2000,
          "type": "string"
        }
      },
      "required": [
        "noteContent"
      ],
      "type": "object"
    },
    "ChangeStateByIdsRequest": {
      "description": "Request body to request a change in state for a session.",
      "properties": {
        "ids": {
          "description": "List of session ids to assign state.",
          "items": {
            "maximum": 100,
            "type": "string"
          },
          "maximum": 100,
          "minimum": 1,
          "type": "array"
        },
        "newState": {
          "$ref": "#/definitions/SessionState",
          "description": "The new state to assign the session(s)."
        }
      },
      "required": [
        "newState",
        "ids"
      ],
      "type": "object"
    },
    "ChangeStateRequest": {
      "description": "Request body to request a change in state for a session.",
      "properties": {
        "newState": {
          "$ref": "#/definitions/SessionState",
          "description": "The new state to assign the session."
        }
      },
      "required": [
        "newState"
      ],
      "type": "object"
    },
    "ChangeStatesRequest": {
      "description": "Request body to request a change in state for a session.",
      "properties": {
        "continuationToken": {
          "maxLength": 100,
          "type": "string"
        },
        "newState": {
          "$ref": "#/definitions/SessionState",
          "description": "The new state to assign the sessions."
        }
      },
      "required": [
        "newState"
      ],
      "type": "object"
    },
    "ContentInspectionEventResults": {
      "description": "The results of content inspection",
      "properties": {
        "eventId": {
          "description": "The id of the event that this result pertains to.",
          "type": "string"
        },
        "piiType": {
          "description": "The type of PII found.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "status": {
          "$ref": "#/definitions/ContentInspectionStatus",
          "description": "The status of content inspection."
        }
      },
      "type": "object"
    },
    "ContentInspectionResults": {
      "description": "The results of content inspection",
      "properties": {
        "eventResults": {
          "description": "The list of all content inspection events that have occurred.",
          "items": {
            "$ref": "#/definitions/ContentInspectionEventResults"
          },
          "type": "array"
        },
        "status": {
          "$ref": "#/definitions/ContentInspectionStatus",
          "description": "The status of content inspection."
        }
      },
      "type": "object"
    },
    "ContentInspectionStatus": {
      "enum": [
        "PENDING",
        "PII_NOT_FOUND",
        "PII_FOUND",
        "UNPROCESSED"
      ],
      "type": "string"
    },
    "Note": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "lastModifiedAt"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique id of the note.",
              "example": "noteId"
            },
            "lastModifiedAt": {
              "type": "string",
              "description": "Timestamp of when the note was last modified.",
              "format": "date-time",
              "example": "2020-02-19T01:57:45.0066830Z"
            },
            "lastModifiedBy": {
              "type": "string",
              "description": "User who last modified the note.",
              "example": "exampleUsername"
            },
            "message": {
              "type": "string",
              "description": "The note itself.",
              "example": "This is a note."
            }
          }
        }
      ]
    },
    "Score": {
      "description": "A record of a risk score that was assigned to a session.",
      "properties": {
        "score": {
          "description": "The risk score that was assigned.",
          "type": "integer"
        },
        "severity": {
          "description": "The high-level \"severity\" assigned from the risk score.",
          "type": "integer"
        },
        "sourceTimestamp": {
          "description": "The instant at which this risk score was assigned.",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "score",
        "severity",
        "sourceTimestamp"
      ],
      "type": "object"
    },
    "SessionContainer": {
      "description": "Results for a session query.",
      "properties": {
        "items": {
          "description": "List of sessions that matched the query criteria.",
          "items": {
            "$ref": "#/definitions/SessionDetail"
          },
          "type": "array"
        },
        "totalCount": {
          "description": "The total number of matching results across all pages.",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "items",
        "totalCount"
      ],
      "type": "object"
    },
    "SessionDetail": {
      "properties": {
        "actorId": {
          "description": "The id of the actor that generated the session.",
          "type": "string"
        },
        "beginTime": {
          "description": "The unix time in milliseconds of when this session began.",
          "format": "int64",
          "type": "integer"
        },
        "contentInspectionResults": {
          "$ref": "#/definitions/ContentInspectionResults",
          "description": "The results of content inspection, if applicable"
        },
        "contextSummary": {
          "description": "An English summary of the contextual aspects of this session is any were identified.",
          "type": "string"
        },
        "criticalEvents": {
          "default": 0,
          "description": "The number of events in the session with a critical risk severity.",
          "type": "integer"
        },
        "endTime": {
          "description": "The unix time in milliseconds of when this session ended.",
          "format": "int64",
          "type": "integer"
        },
        "exfiltrationSummary": {
          "description": "An English summary of the exfiltration (if any) in this session.",
          "type": "string"
        },
        "firstObserved": {
          "description": "The unix time in milliseconds at which this session was first observed.",
          "format": "int64",
          "type": "integer"
        },
        "highEvents": {
          "default": 0,
          "description": "The number of events in the session with a high risk severity.",
          "type": "integer"
        },
        "lastUpdated": {
          "description": "The unix time in milliseconds at which this session was last updated.",
          "format": "int64",
          "type": "integer"
        },
        "lowEvents": {
          "default": 0,
          "description": "The number of events in the session with a low risk severity.",
          "type": "integer"
        },
        "moderateEvents": {
          "default": 0,
          "description": "The number of events in the session with a moderate risk severity.",
          "type": "integer"
        },
        "noRiskEvents": {
          "default": 0,
          "description": "The number of events in the session with a no risk severity.",
          "type": "integer"
        },
        "notes": {
          "description": "The set of notes associated with this session.",
          "items": {
            "$ref": "#/definitions/Note"
          },
          "type": "array"
        },
        "riskIndicators": {
          "description": "The list of risk indicator/weight combinations observed in this session.",
          "items": {
            "$ref": "#/definitions/RiskIndicator"
          },
          "type": "array"
        },
        "scores": {
          "description": "The history of all score assignments for this session.",
          "items": {
            "$ref": "#/definitions/Score"
          },
          "type": "array"
        },
        "sessionId": {
          "description": "The session id.",
          "type": "string"
        },
        "states": {
          "description": "The history of states this session has been in.",
          "items": {
            "$ref": "#/definitions/State"
          },
          "type": "array"
        },
        "tenantId": {
          "description": "The tenant id.",
          "type": "string"
        },
        "triggeredAlerts": {
          "description": "The list of all alerts that were triggered by activity in this session.",
          "items": {
            "$ref": "#/definitions/TriggeredAlert"
          },
          "type": "array"
        }
      },
      "required": [
        "sessionId",
        "tenantId",
        "actorId",
        "beginTime",
        "endTime",
        "firstObserved",
        "lastUpdated",
        "noRiskEvents",
        "lowEvents",
        "moderateEvents",
        "highEvents",
        "criticalEvents",
        "notes",
        "riskIndicators",
        "scores",
        "triggeredAlerts",
        "states"
      ],
      "type": "object"
    },
    "SessionState": {
      "enum": [
        "OPEN",
        "IN_PROGRESS",
        "CLOSED",
        "CLOSED_TP",
        "CLOSED_FP",
        "OPEN_NEW_DATA"
      ],
      "type": "string"
    },
    "State": {
      "description": "A record of a state transition for a session.",
      "properties": {
        "sourceTimestamp": {
          "description": "The instant at which the state transition took place.",
          "format": "int64",
          "type": "integer"
        },
        "state": {
          "$ref": "#/definitions/SessionState",
          "description": "The new state to assign the session."
        },
        "userId": {
          "description": "The user id of the user that triggered this state change.  If this was triggered in response to some other action, it is possible for no user id to be available.",
          "type": "string"
        }
      },
      "required": [
        "state",
        "sourceTimestamp"
      ],
      "type": "object"
    },
    "TriggeredAlert": {
      "properties": {
        "alertId": {
          "description": "The id of the alert that was triggered.",
          "type": "string"
        },
        "lessonId": {
          "description": "The id of the lesson triggered by the alert rule.",
          "type": "string"
        },
        "ruleId": {
          "description": "The id of the alert rule for the alert that was triggered.",
          "type": "string"
        }
      },
      "required": [
        "alertId",
        "ruleId"
      ],
      "type": "object"
    },
    "RuleDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/Rule"
        },
        {
          "type": "object",
          "required": [
            "createdAt",
            "modifiedAt",
            "isSystemRule"
          ],
          "properties": {
            "createdAt": {
              "type": "string",
              "description": "Time when the rule was created.",
              "format": "date-time",
              "example": "2024-09-04T12:07:17.8935732Z"
            },
            "createdBy": {
              "type": "string",
              "description": "Individual or service who created the rule.",
              "example": "my-username@company.com"
            },
            "modifiedAt": {
              "type": "string",
              "description": "Time when the rule was last modified.",
              "format": "date-time",
              "example": "2024-09-04T12:07:17.893621Z"
            },
            "modifiedBy": {
              "type": "string",
              "description": "Individual or service who last modified the rule.",
              "example": "my-username@company.com"
            },
            "isSystemRule": {
              "type": "boolean",
              "description": "Boolean indicator of whether or not the rule is connected to a lens.",
              "example": true
            },
            "systemRemovedRiskIndicators": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RiskIndicator"
              }
            }
          }
        }
      ]
    },
    "Rule": {
      "allOf": [
        {
          "$ref": "#/definitions/RuleCriteria"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the rule.",
              "example": "9e1dcb4b-0d6a-46b5-9083-a74c367d2182"
            }
          }
        }
      ]
    },
    "RuleCriteria": {
      "type": "object",
      "required": [
        "isEnabled",
        "alertOnBlockedBrowserActivity"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Unique name of the rule.",
          "example": "Suspicious File Mismatch Rule"
        },
        "description": {
          "type": "string",
          "description": "Description of the rule.",
          "example": "A rule created to trigger alerts on suspicious file mismatch exfiltration"
        },
        "severity": {
          "description": "[Deprecated field] Indicates severity of rule.",
          "deprecated": true,
          "deprecatedMessage": "Severity rating is no longer important since risk severity is being used",
          "example": "",
          "allOf": [
            {
              "$ref": "#/definitions/Severity"
            }
          ]
        },
        "isEnabled": {
          "type": "boolean",
          "description": "Indicates whether the rule is enabled or not.",
          "example": true
        },
        "source": {
          "type": "string",
          "description": "[Deprecated field] Indicates source of rule creation.",
          "example": ""
        },
        "notifications": {
          "description": "Notifications configuration settings for this rule.",
          "$ref": "#/definitions/NotificationSettings"
        },
        "education": {
          "$ref": "#/definitions/EducateUsersSettings"
        },
        "vectors": {
          "description": "The exfiltration vectors to be watched.",
          "$ref": "#/definitions/RuleVectors"
        },
        "filters": {
          "description": "The filters to limit the scope of activity to alert on.",
          "$ref": "#/definitions/RuleFilters"
        },
        "alertOnBlockedBrowserActivity": {
          "type": "boolean"
        }
      }
    },
    "Severity": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Low",
        "Medium",
        "High"
      ],
      "enum": [
        "Low",
        "Medium",
        "High"
      ]
    },
    "NotificationSettings": {
      "type": "object",
      "required": [
        "isEnabled"
      ],
      "properties": {
        "isEnabled": {
          "type": "boolean",
          "description": "Indicates whether notifications are enabled.",
          "example": true
        },
        "contacts": {
          "type": "array",
          "description": "List of notifications configured.",
          "items": {
            "$ref": "#/definitions/NotificationContact"
          }
        }
      }
    },
    "NotificationContact": {
      "type": "object",
      "required": [
        "isEnabled",
        "type"
      ],
      "properties": {
        "isEnabled": {
          "type": "boolean",
          "description": "Indicates whether the notifications for this contact are enabled.",
          "example": true
        },
        "type": {
          "description": "Type of notification.",
          "$ref": "#/definitions/NotificationType"
        },
        "address": {
          "type": "string",
          "description": "Address notifications are configured to send to.",
          "example": "myUsername@company.com"
        }
      }
    },
    "EducateUsersSettings": {
      "type": "object",
      "required": [
        "messagingMethod",
        "isAutoDismissAlertEnabled"
      ],
      "properties": {
        "lessonId": {
          "type": "string"
        },
        "messagingMethod": {
          "$ref": "#/definitions/MessagingMethod"
        },
        "isAutoDismissAlertEnabled": {
          "type": "boolean"
        }
      }
    },
    "MessagingMethod": {
      "type": "string",
      "description": "Type of messaging method.",
      "example": "EMAIL",
      "x-enumNames": [
        "Email",
        "Slack",
        "Teams"
      ],
      "enum": [
        "EMAIL",
        "SLACK",
        "TEAMS"
      ]
    },
    "RuleVectors": {
      "type": "object",
      "properties": {
        "cloudSharing": {
          "description": "Configuration for cloud sharing vectors to monitor.",
          "$ref": "#/definitions/CloudSharingVector"
        },
        "download": {
          "$ref": "#/definitions/DownloadVector"
        },
        "email": {
          "$ref": "#/definitions/EmailVector"
        },
        "fileUpload": {
          "description": "Configuration for what file upload vectors to monitor.",
          "$ref": "#/definitions/FileUploadVector"
        },
        "removableMedia": {
          "description": "Configuration for what removable media vectors to monitor.",
          "$ref": "#/definitions/RemovableMediaVector"
        }
      }
    },
    "CloudSharingVector": {
      "type": "object",
      "required": [
        "criteriaOrder"
      ],
      "properties": {
        "observeAll": {
          "type": "boolean",
          "description": "Indicates whether to watch all cloud sharing connectors.",
          "example": false
        },
        "box": {
          "description": "Configuration for specific cloud sharing monitoring using the Box connector.",
          "$ref": "#/definitions/CloudSharingMechanisms"
        },
        "googleDrive": {
          "description": "Configuration for specific cloud sharing monitoring using the Google Drive connector.",
          "$ref": "#/definitions/CloudSharingMechanisms"
        },
        "oneDrive": {
          "description": "Configuration for specific cloud sharing monitoring using the Microsoft OneDrive connector.",
          "$ref": "#/definitions/CloudSharingMechanisms"
        },
        "criteriaOrder": {
          "type": "integer",
          "description": "Order in which this vector was added to the rule.",
          "format": "int32",
          "example": 3
        }
      }
    },
    "CloudSharingMechanisms": {
      "type": "object",
      "required": [
        "observeAll",
        "publicLinkShare",
        "directShare"
      ],
      "properties": {
        "observeAll": {
          "type": "boolean",
          "description": "Indicates whether we are watching the cloud sharing connector or not.",
          "example": true
        },
        "publicLinkShare": {
          "type": "boolean"
        },
        "directShare": {
          "type": "boolean"
        }
      }
    },
    "DownloadVector": {
      "type": "object",
      "required": [
        "criteriaOrder"
      ],
      "properties": {
        "observeAll": {
          "type": "boolean"
        },
        "salesforce": {
          "type": "boolean"
        },
        "box": {
          "type": "boolean"
        },
        "googleDrive": {
          "type": "boolean"
        },
        "microsoftOneDrive": {
          "type": "boolean"
        },
        "criteriaOrder": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "EmailVector": {
      "type": "object",
      "required": [
        "criteriaOrder"
      ],
      "properties": {
        "observeAll": {
          "type": "boolean"
        },
        "gmail": {
          "type": "boolean"
        },
        "microsoft365": {
          "type": "boolean"
        },
        "criteriaOrder": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "FileUploadVector": {
      "type": "object",
      "required": [
        "criteriaOrder"
      ],
      "properties": {
        "cloudStorage": {
          "description": "Configuration for which cloud storage destinations to monitor.",
          "$ref": "#/definitions/FileUploadCategory"
        },
        "email": {
          "description": "Configuration for which email destinations to monitor.",
          "$ref": "#/definitions/FileUploadCategory"
        },
        "fileConversionTool": {
          "description": "Configuration for which file conversion tool destinations to monitor.",
          "$ref": "#/definitions/FileUploadCategory"
        },
        "messaging": {
          "description": "Configuration for which messaging destinations to monitor.",
          "$ref": "#/definitions/FileUploadCategory"
        },
        "pdfManager": {
          "description": "Configuration for which PDF manager destinations to monitor.",
          "$ref": "#/definitions/FileUploadCategory"
        },
        "productivityTool": {
          "description": "Configuration for which productivity tool destinations to monitor.",
          "$ref": "#/definitions/FileUploadCategory"
        },
        "socialMedia": {
          "description": "Configuration for which social media destinations to monitor.",
          "$ref": "#/definitions/FileUploadCategory"
        },
        "sourceCodeRepository": {
          "description": "Configuration for which source code repository destinations to monitor.",
          "$ref": "#/definitions/FileUploadCategory"
        },
        "webHosting": {
          "description": "Configuration for which web hosting destinations to monitor.",
          "$ref": "#/definitions/FileUploadCategory"
        },
        "advancedSettings": {
          "description": "Advanced settings around alerting off of unknown destinations.",
          "$ref": "#/definitions/AdvancedSettings"
        },
        "criteriaOrder": {
          "type": "integer",
          "description": "Order in which this vector was added to the rule.",
          "format": "int32",
          "example": 3
        }
      }
    },
    "FileUploadCategory": {
      "type": "object",
      "required": [
        "observeAll"
      ],
      "properties": {
        "observeAll": {
          "type": "boolean",
          "description": "Indicates whether we are watching all of the destinations in the category.",
          "example": true
        },
        "destinations": {
          "type": "array",
          "description": "A list of specific destinations to watch within the category.",
          "example": [],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AdvancedSettings": {
      "type": "object",
      "required": [
        "observeUncategorized"
      ],
      "properties": {
        "observeUncategorized": {
          "type": "boolean"
        }
      }
    },
    "RemovableMediaVector": {
      "type": "object",
      "required": [
        "isEnabled",
        "criteriaOrder"
      ],
      "properties": {
        "isEnabled": {
          "type": "boolean",
          "description": "Indicates whether to watch removable media destinations or not.",
          "example": true
        },
        "criteriaOrder": {
          "type": "integer",
          "description": "Order in which this vector was added to the rule.",
          "format": "int32",
          "example": 3
        }
      }
    },
    "RuleFilters": {
      "type": "object",
      "properties": {
        "fileCategory": {
          "description": "Configuration for what file categories to monitor.",
          "$ref": "#/definitions/FileCategoryFilter"
        },
        "fileName": {
          "description": "Configuration for what file names to monitor.",
          "$ref": "#/definitions/FileNameFilter"
        },
        "fileTypeMismatch": {
          "description": "Configuration for whether to only alert on file mismatches.",
          "$ref": "#/definitions/FileTypeMismatchFilter"
        },
        "fileVolume": {
          "description": "Activity thresholds to exceed for an alert to be generated.",
          "$ref": "#/definitions/FileVolumeFilter"
        },
        "riskIndicator": {
          "$ref": "#/definitions/RiskIndicatorFilter"
        },
        "riskIndicatorExcludes": {
          "$ref": "#/definitions/RiskIndicatorFilter"
        },
        "riskSeverity": {
          "$ref": "#/definitions/RiskSeverityFilter"
        },
        "username": {
          "description": "Configuration for which users to monitor.",
          "$ref": "#/definitions/UsernameFilter"
        },
        "watchlist": {
          "$ref": "#/definitions/WatchlistFilter"
        }
      }
    },
    "FileCategoryFilter": {
      "type": "object",
      "required": [
        "criteriaOrder"
      ],
      "properties": {
        "categories": {
          "type": "array",
          "description": "List of file categories to alert on.",
          "example": [
            "Archive",
            "Pdf",
            "SourceCode"
          ],
          "items": {
            "type": "string"
          }
        },
        "criteriaOrder": {
          "type": "integer",
          "description": "Order in which this vector was added to the rule.",
          "format": "int32",
          "example": 3
        }
      }
    },
    "FileNameFilter": {
      "type": "object",
      "required": [
        "criteriaOrder"
      ],
      "properties": {
        "patterns": {
          "type": "array",
          "description": "List of file name patterns to alert on.",
          "example": [
            "*.cs",
            "*.sh"
          ],
          "items": {
            "type": "string"
          }
        },
        "criteriaOrder": {
          "type": "integer",
          "description": "Order in which this vector was added to the rule.",
          "format": "int32",
          "example": 3
        }
      }
    },
    "FileTypeMismatchFilter": {
      "type": "object",
      "required": [
        "isEnabled",
        "criteriaOrder"
      ],
      "properties": {
        "isEnabled": {
          "type": "boolean",
          "description": "Indicates whether or not to alert on file type mismatches only.",
          "example": true
        },
        "criteriaOrder": {
          "type": "integer",
          "description": "Order in which this vector was added to the rule.",
          "format": "int32",
          "example": 3
        }
      }
    },
    "FileVolumeFilter": {
      "type": "object",
      "required": [
        "countGreaterThan",
        "operator",
        "sizeGreaterThanInBytes",
        "criteriaOrder"
      ],
      "properties": {
        "countGreaterThan": {
          "type": "integer",
          "description": "File count threshold that must be exceeded to trigger an alert.",
          "format": "int64",
          "example": 125
        },
        "operator": {
          "description": "Operator to use to combine size and count threshold.",
          "$ref": "#/definitions/FileVolumeOperator"
        },
        "sizeGreaterThanInBytes": {
          "type": "integer",
          "description": "File size threshold that must be exceeded to trigger an alert.",
          "format": "int64",
          "example": 1024
        },
        "criteriaOrder": {
          "type": "integer",
          "description": "Order in which this vector was added to the rule.",
          "format": "int32",
          "example": 3
        }
      }
    },
    "FileVolumeOperator": {
      "type": "string",
      "description": "Operators to use in file size and count configuration.",
      "example": "AND",
      "x-enumNames": [
        "And",
        "Or"
      ],
      "enum": [
        "AND",
        "OR"
      ]
    },
    "RiskIndicatorFilter": {
      "type": "object",
      "required": [
        "criteriaOrder"
      ],
      "properties": {
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "indicators": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "criteriaOrder": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "RiskSeverityFilter": {
      "type": "object",
      "required": [
        "low",
        "moderate",
        "high",
        "critical",
        "criteriaOrder"
      ],
      "properties": {
        "low": {
          "type": "boolean"
        },
        "moderate": {
          "type": "boolean"
        },
        "high": {
          "type": "boolean"
        },
        "critical": {
          "type": "boolean"
        },
        "criteriaOrder": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "UsernameFilter": {
      "type": "object",
      "required": [
        "mode",
        "criteriaOrder"
      ],
      "properties": {
        "mode": {
          "description": "Indicates how to filter on the user list.",
          "$ref": "#/definitions/UsernameFilterMode"
        },
        "usernames": {
          "type": "array",
          "description": "List of usernames.  Will either alert only on these users or on any user not in list.",
          "example": [
            "myUsername@company.com",
            "anotherUsername@company.com"
          ],
          "items": {
            "type": "string"
          }
        },
        "criteriaOrder": {
          "type": "integer",
          "description": "Order in which this vector was added to the rule.",
          "format": "int32",
          "example": 3
        }
      }
    },
    "UsernameFilterMode": {
      "type": "string",
      "description": "Indicates how to filter on the user list.",
      "example": "INCLUDE",
      "x-enumNames": [
        "Include",
        "Exclude"
      ],
      "enum": [
        "INCLUDE",
        "EXCLUDE"
      ]
    },
    "WatchlistFilter": {
      "type": "object",
      "required": [
        "criteriaOrder"
      ],
      "properties": {
        "watchlists": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Watchlist"
          }
        },
        "criteriaOrder": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Watchlist": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "type",
            "isSignificant"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique id of this watchlist.",
              "example": "guid"
            },
            "name": {
              "type": "string",
              "description": "Name of the watchlist.",
              "example": "Development Department"
            },
            "type": {
              "description": "Type of watchlist.",
              "example": "DEPARTING_EMPLOYEE",
              "$ref": "#/definitions/WatchlistType"
            },
            "isSignificant": {
              "type": "boolean",
              "description": "Indicates whether the watchlist was part of the triggering rule's criteria.",
              "example": "true"
            }
          }
        }
      ]
    },
    "UserAliases": {
      "type": "object",
      "properties": {
        "userIdFromAuthority": {
          "type": "string",
          "description": "User id that matches internal user identifier for our product.",
          "example": "aa53029b-0bd4-4ecc-bf87-ad232a0099d6"
        },
        "aliases": {
          "type": "array",
          "description": "A list of known aliases for the authority user id.",
          "example": [
            "myUsername@company.com",
            "anotherUsername@company.com"
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "RuleUsersResponse": {
      "type": "object",
      "required": [
        "mode"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the rule.",
          "example": "ebacb098-c50f-459b-aa36-af71d23df859"
        },
        "users": {
          "type": "array",
          "description": "A list of users in the rule's username filter.",
          "items": {
            "$ref": "#/definitions/UserAliases"
          }
        },
        "mode": {
          "description": "Indicates how to filter on the user list.",
          "$ref": "#/definitions/UsernameFilterMode2"
        }
      }
    },
    "UsernameFilterMode2": {
      "type": "integer",
      "description": "Indicates how the rule is set to filter on the user list.",
      "example": "INCLUDE",
      "x-enumNames": [
        "Include",
        "Exclude"
      ],
      "enum": [
        "INCLUDE",
        "EXCLUDE"
      ]
    },
    "UpdateStateCommand": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "state",
            "tenantId",
            "alertIds"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 40,
              "example": "MyExampleTenant"
            },
            "alertIds": {
              "type": "array",
              "description": "The unique identifiers representing the alerts you want to act upon.",
              "maxItems": 100,
              "example": [
                "ExampleAlertId1",
                "ExampleAlertId2"
              ],
              "items": {
                "type": "string"
              }
            },
            "state": {
              "description": "The state to update the given alerts to.",
              "$ref": "#/definitions/AlertState"
            },
            "note": {
              "type": "string",
              "description": "An optional note to attach to the alert",
              "maxLength": 2000,
              "example": "This is an example note."
            }
          }
        }
      ]
    },
    "AlertState": {
      "type": "string",
      "description": "Enum indicating possible alert states.",
      "example": "RESOLVED",
      "x-enumNames": [
        "Open",
        "Resolved",
        "InProgress",
        "Pending",
        "ResolvedTp",
        "ResolvedFp"
      ],
      "enum": [
        "OPEN",
        "RESOLVED",
        "IN_PROGRESS",
        "PENDING",
        "RESOLVED_TP",
        "RESOLVED_FP"
      ]
    },
    "UpdateAllStateResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "properties": {
            "continuationToken": {
              "type": "string",
              "description": "The continuation token to be used if there are more alerts to update.  Provide this in the next request in the 'continuationToken' field.  This will be null if all alerts matching the given filters have been updated.",
              "example": "362bb430-4a16-4450-a853-b961421d4132"
            }
          }
        }
      ]
    },
    "UpdateAllStateCommand": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "state",
            "tenantId",
            "groupClause"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 40,
              "example": "MyExampleTenant"
            },
            "groups": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FilterGroup"
              }
            },
            "groupClause": {
              "type": "string",
              "description": "The clause to use when combining group filters.  Must be AND/OR.",
              "example": "OR"
            },
            "state": {
              "description": "The state to update the given alerts to.",
              "$ref": "#/definitions/AlertState"
            },
            "continuationToken": {
              "type": "string",
              "description": "The continuation token provided by the prior update all request.  This should be a guid id. If it is your first call, this can be null.",
              "example": "362bb430-4a16-4450-a853-b961421d4132"
            }
          }
        }
      ]
    },
    "FilterGroup": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "filterClause",
            "filters"
          ],
          "properties": {
            "filters": {
              "type": "array",
              "description": "The list of search filters to query on.",
              "items": {
                "$ref": "#/definitions/SearchFilter"
              }
            },
            "filterClause": {
              "$ref": "#/definitions/SearchClause"
            }
          }
        }
      ]
    },
    "SearchFilter": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "operator",
            "term",
            "value"
          ],
          "properties": {
            "term": {
              "type": "string",
              "description": "The alert or rule metadata attribute to search on.\n\nFor alert queries, value must be one of: AlertId, TenantId, Type, Name, Description, Actor, ActorId, Target, RiskSeverity, RuleSource, CreatedAt, Observations, Notes, Watchlists, HasAuthSignificantWatchlist, State, StateLastModifiedAt, StateLastModifiedBy, LastModifiedTime, LastModifiedBy, RuleId, Education, Severity.\n\nFor rule queries, value must be one of RuleMetadataId, TenantId, ObserverRuleId, Type, Name, Description, IsEnabled, ModifiedAt, ModifiedBy, CreatedAt, CreatedBy, RuleWarning, LogString. ",
              "example": "State"
            },
            "operator": {
              "example": "IS",
              "$ref": "#/definitions/FilterOperator"
            },
            "value": {
              "type": "string",
              "description": "The value you want to use in the filter.",
              "example": "OPEN"
            }
          }
        }
      ]
    },
    "FilterOperator": {
      "type": "string",
      "description": "The filter operator to use.",
      "example": "IS",
      "x-enumNames": [
        "Is",
        "IsNot",
        "OnOrBefore",
        "OnOrAfter",
        "On",
        "LessThan",
        "GreaterThan",
        "Contains",
        "DoesNotContain"
      ],
      "enum": [
        "IS",
        "IS_NOT",
        "ON_OR_BEFORE",
        "ON_OR_AFTER",
        "ON",
        "LESS_THAN",
        "GREATER_THAN",
        "CONTAINS",
        "DOES_NOT_CONTAIN"
      ]
    },
    "SearchClause": {
      "type": "string",
      "description": "The filter clause to use when combining the search filters.  Must be AND/OR.s",
      "example": "AND",
      "x-enumNames": [
        "And",
        "Or"
      ],
      "enum": [
        "AND",
        "OR"
      ]
    },
    "AddNoteCommand": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "alertId",
            "note"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 40,
              "example": "MyExampleTenant"
            },
            "alertId": {
              "type": "string",
              "description": "The unique identifier representing the alert you want to act upon.",
              "maxLength": 40,
              "example": "ExampleAlertId"
            },
            "note": {
              "type": "string",
              "description": "The note to attach to the alert.",
              "maxLength": 2000,
              "example": "This is an example note."
            }
          }
        }
      ]
    },
    "AlertQueryResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "totalCount"
          ],
          "properties": {
            "alerts": {
              "type": "array",
              "description": "List of alerts that are returned.",
              "items": {
                "$ref": "#/definitions/AlertSummary"
              }
            },
            "totalCount": {
              "type": "integer",
              "description": "The number of alerts that match the given query.",
              "format": "int64",
              "example": "3"
            },
            "problems": {
              "type": "array",
              "description": "Potential issues that were hit while trying to run the query.",
              "example": [],
              "items": {
                "$ref": "#/definitions/QueryProblem"
              }
            }
          }
        }
      ]
    },
    "AlertSummary": {
      "allOf": [
        {
          "$ref": "#/definitions/AlertEssentials"
        },
        {
          "type": "object",
          "required": [
            "createdAt",
            "state"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique id of the alert.",
              "example": "alertId"
            },
            "createdAt": {
              "type": "string",
              "description": "The timestamp when the alert was created.",
              "format": "date-time",
              "example": "2020-02-19T01:57:45.0066830Z"
            },
            "state": {
              "description": "The current state of the alert.",
              "$ref": "#/definitions/AlertState"
            },
            "stateLastModifiedBy": {
              "type": "string"
            },
            "stateLastModifiedAt": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      ]
    },
    "AlertEssentials": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "type",
            "tenantId"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 40,
              "example": "MyExampleTenant"
            },
            "type": {
              "description": "Rule type that generated the alert.",
              "$ref": "#/definitions/RuleType"
            },
            "name": {
              "type": "string",
              "description": "The name of the alert.  Same as the name of the rule that triggered it.",
              "example": "Removable Media Exfiltration Rule"
            },
            "description": {
              "type": "string",
              "description": "The description of the alert.  Same as the description of the rule that triggered it.",
              "example": "Alert me on all removable media exfiltration."
            },
            "actor": {
              "type": "string",
              "description": "The user who triggered the alert.",
              "example": "exampleUser@mycompany.com"
            },
            "actorId": {
              "type": "string",
              "description": "The authority user id who triggered the alert, if it is available.",
              "example": "authorityUserId"
            },
            "target": {
              "type": "string"
            },
            "severity": {
              "description": "Indicates static rule severity of the alert.",
              "$ref": "#/definitions/SeverityRating"
            },
            "riskSeverity": {
              "description": "Indicates event risk severity of the alert.",
              "example": "MODERATE",
              "$ref": "#/definitions/RiskSeverityRating"
            },
            "notificationInfo": {
              "type": "array",
              "description": "Notification information of the alert.  Not queried/returned.",
              "example": [],
              "items": {
                "$ref": "#/definitions/NotificationInfo"
              }
            },
            "ruleId": {
              "type": "string",
              "description": "The unique id corresponding to the rule which triggered the alert.",
              "example": "uniqueRuleId"
            },
            "ruleSource": {
              "type": "string",
              "description": "Indicates source of rule creation.  Either alerting or lens application name.",
              "example": "Departing Employee"
            },
            "watchlists": {
              "type": "array",
              "description": "Watchlists the actor is on at the time of the alert.",
              "example": [],
              "items": {
                "$ref": "#/definitions/Watchlist"
              }
            },
            "userEducation": {
              "description": "User education will be populated if the alert is configured to send a response.",
              "$ref": "#/definitions/Education"
            }
          }
        }
      ]
    },
    "RuleType": {
      "type": "string",
      "description": "Rule type that generates alerts.",
      "example": "FED_ENDPOINT_EXFILTRATION",
      "x-enumNames": [
        "FedEndpointExfiltration",
        "FedCloudSharePermissions",
        "FedFileTypeMismatch",
        "FedFileNameMatch",
        "FedComposite"
      ],
      "enum": [
        "FED_ENDPOINT_EXFILTRATION",
        "FED_CLOUD_SHARE_PERMISSIONS",
        "FED_FILE_TYPE_MISMATCH",
        "FED_FILE_NAME_MATCH",
        "FED_COMPOSITE"
      ]
    },
    "RiskSeverityRating": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Unknown",
        "NoRiskIndicated",
        "Low",
        "Moderate",
        "High",
        "Critical"
      ],
      "enum": [
        "UNKNOWN",
        "NO_RISK_INDICATED",
        "LOW",
        "MODERATE",
        "HIGH",
        "CRITICAL"
      ]
    },
    "WatchlistType": {
      "type": "string",
      "description": "Type of watchlist.",
      "example": "DEPARTING_EMPLOYEE",
      "x-enumNames": [
        "WatchlistTypeUnspecified",
        "ContractEmployee",
        "DepartingEmployee",
        "ElevatedAccessPrivileges",
        "FlightRisk",
        "HighImpactEmployee",
        "NewEmployee",
        "PerformanceConcerns",
        "PoorSecurityPractices",
        "SuspiciousSystemActivity"
      ],
      "enum": [
        "CONTRACT_EMPLOYEE",
        "DEPARTING_EMPLOYEE",
        "ELEVATED_ACCESS_PRIVILEGES",
        "FLIGHT_RISK",
        "HIGH_IMPACT_EMPLOYEE",
        "NEW_EMPLOYEE",
        "PERFORMANCE_CONCERNS",
        "POOR_SECURITY_PRACTICES",
        "SUSPICIOUS_SYSTEM_ACTIVITY",
        "WATCHLIST_TYPE_UNSPECIFIED"
      ]
    },
    "Education": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "messagingMethod",
            "isAutoDismissAlertEnabled"
          ],
          "properties": {
            "lessonId": {
              "type": "string",
              "description": "Unique id of this response lesson.",
              "example": "guid"
            },
            "messagingMethod": {
              "description": "Type of messaging method.",
              "example": "EMAIL",
              "$ref": "#/definitions/MessagingMethod"
            },
            "isAutoDismissAlertEnabled": {
              "type": "boolean",
              "description": "True if the alert is configured to auto-dismiss upon response.",
              "example": "true"
            }
          }
        }
      ]
    },
    "QueryProblem": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "badFilter": {
              "type": "string",
              "description": "The filter that caused the issue."
            },
            "type": {
              "description": "The type of query problem.",
              "$ref": "#/definitions/ProblemType"
            }
          }
        }
      ]
    },
    "ProblemType": {
      "type": "string",
      "description": "Potential issues when running a query on alerts.",
      "example": "SearchFailed",
      "x-enumNames": [
        "IllegalValue",
        "IllegalOperator",
        "MustBeEmailAddress",
        "MaxLengthExceeded",
        "InvalidPageSize",
        "InvalidPageNumber",
        "MissingValue",
        "MissingGroups",
        "MissingFilters",
        "MaxFiltersExceeded",
        "SearchFailed"
      ],
      "enum": [
        "IllegalValue",
        "IllegalOperator",
        "MustBeEmailAddress",
        "MaxLengthExceeded",
        "InvalidPageSize",
        "InvalidPageNumber",
        "MissingValue",
        "MissingGroups",
        "MissingFilters",
        "MaxFiltersExceeded",
        "SearchFailed"
      ]
    },
    "SearchQuery": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "pgSize",
            "pgNum",
            "tenantId",
            "groupClause",
            "srtKey"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 40,
              "example": "MyExampleTenant"
            },
            "groups": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FilterGroup"
              }
            },
            "groupClause": {
              "type": "string",
              "description": "The clause to use when combining group filters.  Must be AND/OR.",
              "example": "OR"
            },
            "pgSize": {
              "type": "integer",
              "description": "The number of items to return in one request.  Value must be between 0 and 100.",
              "format": "int32",
              "maximum": 500,
              "example": "20"
            },
            "pgNum": {
              "type": "integer",
              "description": "The page number to return. Page 0 is the first page of results.",
              "format": "int32",
              "example": "0"
            },
            "srtKey": {
              "type": "string",
              "description": "The alert attribute to sort by.  Value must be one of: AlertId, TenantId, Type, Name, Description, Actor, ActorId, Target, RiskSeverity, RuleSource, CreatedAt, Observations, Notes, Watchlists, HasAuthSignificantWatchlist, State, StateLastModifiedAt, StateLastModifiedBy, LastModifiedTime, LastModifiedBy, RuleId, Education, Severity",
              "example": "CreatedAt"
            },
            "srtDirection": {
              "$ref": "#/definitions/SortDirection"
            }
          }
        }
      ]
    },
    "SortDirection": {
      "type": "string",
      "description": "The sort direction applied to the returned page of alerts.",
      "default": "ASC",
      "example": "DESC",
      "x-enumNames": [
        "Asc",
        "Desc"
      ],
      "enum": [
        "ASC",
        "DESC"
      ]
    },
    "AlertDetailsResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "properties": {
            "alerts": {
              "type": "array",
              "description": "The alerts returned by the details query.",
              "items": {
                "$ref": "#/definitions/AlertDetails"
              }
            }
          }
        }
      ]
    },
    "AlertDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/AlertSummary"
        },
        {
          "type": "object",
          "properties": {
            "observations": {
              "type": "array",
              "description": "Observation list included on the alert.",
              "items": {
                "$ref": "#/definitions/Observation"
              }
            },
            "note": {
              "description": "Most recent note added to the alert.",
              "$ref": "#/definitions/Note"
            }
          }
        }
      ]
    },
    "Observation": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "observedAt"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "Id of given observation.",
              "example": "uniqueObservationId"
            },
            "observedAt": {
              "type": "string",
              "description": "Timestamp when the activity was first observed.",
              "format": "date-time",
              "example": "2020-02-19T01:57:45.0066830Z"
            },
            "lastObservedAt": {
              "type": "string",
              "description": "Timestamp when the activity was last observed.",
              "format": "date-time",
              "example": "2020-02-19T01:57:45.0066830Z"
            },
            "type": {
              "type": "string",
              "description": "The type of observation data recorded.",
              "example": "FedCloudSharePermissions"
            },
            "data": {
              "type": "string",
              "description": "The JSON formatted observation data rolled into one aggregation.",
              "example": "{\"type$\":\"OBSERVED_CLOUD_SHARE_ACTIVITY\",\"id\":\"exampleId\",\"sources\":[\"OneDrive\"],\"exposureTypes\":[\"PublicLinkShare\"],\"firstActivityAt\":\"2020-02-19T01:50:00.0000000Z\",\"lastActivityAt\":\"2020-02-19T01:55:00.0000000Z\",\"fileCount\":2,\"totalFileSize\":200,\"fileCategories\":[{\"type$\":\"OBSERVED_FILE_CATEGORY\",\"category\":\"Document\",\"fileCount\":2,\"totalFileSize\":53,\"isSignificant\":false}],\"outsideTrustedDomainsEmailsCount\":0,\"outsideTrustedDomainsTotalDomainCount\":0,\"outsideTrustedDomainsTotalDomainCountTruncated\":false}"
            }
          }
        }
      ]
    },
    "DetailsQuery": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "alertIds"
          ],
          "properties": {
            "alertIds": {
              "type": "array",
              "description": "The unique identifiers representing the alerts you want to act upon.",
              "maxItems": 100,
              "example": [
                "ExampleAlertId1",
                "ExampleAlertId2"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "AlertDetailsInAggregateV2Response": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "properties": {
            "alert": {
              "description": "The alerts returned by the details query.",
              "$ref": "#/definitions/AlertDetailsAggregateV2"
            }
          }
        }
      ]
    },
    "AlertDetailsAggregateV2": {
      "allOf": [
        {
          "$ref": "#/definitions/AlertSummary"
        },
        {
          "type": "object",
          "required": [
            "firstObservationAt",
            "lastObservationAt",
            "fileCount",
            "totalFileSize"
          ],
          "properties": {
            "observations": {
              "type": "array",
              "description": "Observation aggregate of the alert.",
              "items": {
                "$ref": "#/definitions/ObservationAggregate"
              }
            },
            "firstObservationAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastObservationAt": {
              "type": "string",
              "format": "date-time"
            },
            "fileCount": {
              "type": "integer",
              "format": "int64"
            },
            "totalFileSize": {
              "type": "integer",
              "format": "int64"
            },
            "fileCategories": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FileCategory"
              }
            },
            "note": {
              "description": "Most recent note added to the alert.",
              "$ref": "#/definitions/Note"
            },
            "riskSeveritySummary": {
              "type": "array",
              "description": "Risk severity summary of the alert.",
              "items": {
                "$ref": "#/definitions/RiskSeveritySummary"
              }
            },
            "ffsUrlEndpoint": {
              "type": "string",
              "description": "Link to the alert's endpoint events in forensic search.",
              "example": "https://example-forensic-search-endpoint-url.com"
            },
            "ffsUrlCloud": {
              "type": "string",
              "description": "Link to the alert's cloud sharing events in forensic search.",
              "example": "https://example-forensic-search-cloud-url.com"
            },
            "alertUrl": {
              "type": "string",
              "description": "Link to the alert's details in the alerting application.",
              "example": "https://example-alert-url.com"
            }
          }
        }
      ]
    },
    "ObservationAggregate": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "observedAt"
          ],
          "properties": {
            "observedAt": {
              "type": "string",
              "description": "Timestamp when the activity was first observed.",
              "format": "date-time",
              "example": "2020-02-19T01:57:45.0066830Z"
            },
            "lastObservedAt": {
              "type": "string",
              "description": "Timestamp when the activity was last observed.",
              "format": "date-time",
              "example": "2020-02-19T01:57:45.0066830Z"
            },
            "type": {
              "type": "string",
              "description": "The type of observation data recorded.",
              "example": "FedCloudSharePermissions"
            },
            "data": {
              "type": "string",
              "description": "The JSON formatted observation data rolled into one aggregation.",
              "example": "{\"type$\":\"OBSERVED_CLOUD_SHARE_ACTIVITY\",\"id\":\"exampleId\",\"sources\":[\"OneDrive\"],\"exposureTypes\":[\"PublicLinkShare\"],\"firstActivityAt\":\"2020-02-19T01:50:00.0000000Z\",\"lastActivityAt\":\"2020-02-19T01:55:00.0000000Z\",\"fileCount\":2,\"totalFileSize\":200,\"fileCategories\":[{\"type$\":\"OBSERVED_FILE_CATEGORY\",\"category\":\"Document\",\"fileCount\":2,\"totalFileSize\":53,\"isSignificant\":false}],\"outsideTrustedDomainsEmailsCount\":0,\"outsideTrustedDomainsTotalDomainCount\":0,\"outsideTrustedDomainsTotalDomainCountTruncated\":false}"
            }
          }
        }
      ]
    },
    "RiskSeveritySummary": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "severity",
            "numEvents"
          ],
          "properties": {
            "severity": {
              "description": "Risk severity associated with the event",
              "example": "LOW",
              "$ref": "#/definitions/RiskSeverity"
            },
            "numEvents": {
              "type": "integer",
              "description": "Number of events with this severity level.",
              "format": "int32",
              "example": 2
            },
            "summarizedRiskIndicators": {
              "type": "array",
              "description": "Each risk indicator that matched the events in this grouping",
              "items": {
                "$ref": "#/definitions/SummarizedRiskIndicator"
              }
            }
          }
        }
      ]
    },
    "RiskSeverity": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "NoRiskIndicated",
        "Low",
        "Moderate",
        "High",
        "Critical"
      ],
      "enum": [
        "NO_RISK_INDICATED",
        "LOW",
        "MODERATE",
        "HIGH",
        "CRITICAL"
      ]
    },
    "SummarizedRiskIndicator": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "numEvents"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string",
              "description": "Name of the risk indicator",
              "example": "uniqueName"
            },
            "numEvents": {
              "type": "integer",
              "description": "The number of events with this risk indicator",
              "format": "int32",
              "example": 5
            }
          }
        }
      ]
    },
    "DetailsInAggregateV2Query": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "alertId"
          ],
          "properties": {
            "alertId": {
              "type": "string",
              "description": "The unique identifier representing the alert you want to act upon.",
              "maxLength": 40,
              "example": "ExampleAlertId"
            }
          }
        }
      ]
    },
    "AlertDetailsInAggregateV3Response": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "properties": {
            "alert": {
              "description": "The alerts returned by the details query.",
              "$ref": "#/definitions/AlertDetailsAggregateV3"
            }
          }
        }
      ]
    },
    "AlertDetailsAggregateV3": {
      "allOf": [
        {
          "$ref": "#/definitions/AlertSummary"
        },
        {
          "type": "object",
          "required": [
            "firstObservationAt",
            "lastObservationAt",
            "fileCount",
            "totalFileSize"
          ],
          "properties": {
            "observations": {
              "type": "array",
              "description": "Observation aggregate of the alert.",
              "items": {
                "$ref": "#/definitions/ObservationAggregate"
              }
            },
            "firstObservationAt": {
              "type": "string",
              "description": "Timestamp of the first observation or activity.",
              "format": "date-time"
            },
            "lastObservationAt": {
              "type": "string",
              "description": "Timestamp of the last observation or activity.",
              "format": "date-time"
            },
            "fileCount": {
              "type": "integer",
              "description": "Total number of files in the observations.",
              "format": "int64"
            },
            "totalFileSize": {
              "type": "integer",
              "description": "Sum of all file sizes in bytes.",
              "format": "int64"
            },
            "note": {
              "description": "Most recent note added to the alert.",
              "$ref": "#/definitions/Note"
            },
            "riskSeveritySummary": {
              "type": "array",
              "description": "Risk severity summary of the alert.",
              "items": {
                "$ref": "#/definitions/RiskSeveritySummary"
              }
            },
            "ffsUrls": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FfsUrl"
              }
            },
            "alertUrl": {
              "type": "string",
              "description": "Link to the alert's details in the alerting application.",
              "example": "https://example-alert-url.com"
            },
            "observedEvents": {
              "$ref": "#/definitions/ObservedEventDetails"
            }
          }
        }
      ]
    },
    "FfsUrl": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ObservedEventDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "eventsIsTruncated"
          ],
          "properties": {
            "events": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ObservedFileEvent"
              }
            },
            "eventsIsTruncated": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "ObservedFileEvent": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "observedAt"
          ],
          "properties": {
            "eventId": {
              "type": "string"
            },
            "path": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "url": {
              "type": "string"
            },
            "size": {
              "type": "integer",
              "format": "int64"
            },
            "origin": {
              "type": "string"
            },
            "action": {
              "$ref": "#/definitions/ObservedAction"
            },
            "observedAt": {
              "type": "string",
              "format": "date-time"
            },
            "riskSeverity": {
              "$ref": "#/definitions/ObservedEventRiskSeverity"
            }
          }
        }
      ]
    },
    "ObservedAction": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "x-abstract": true,
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "description": "The type of action.",
              "$ref": "#/definitions/ObservedActionType"
            }
          }
        }
      ]
    },
    "ObservedActionType": {
      "type": "string",
      "description": "Enum indicating the type of action.",
      "example": "DOWNLOAD",
      "x-enumNames": [
        "Unknown",
        "None",
        "Upload",
        "UploadViaCloudSync",
        "Download",
        "Email",
        "Share",
        "TransferViaExternalDevice",
        "GitPush"
      ],
      "enum": [
        "DOWNLOAD",
        "EMAIL",
        "NONE",
        "SHARE",
        "TRANSFER_VIA_EXTERNAL_DEVICE",
        "UNKNOWN",
        "UPLOAD",
        "UPLOAD_VIA_CLOUD_SYNC",
        "GIT_PUSH"
      ]
    },
    "ObservedEventRiskSeverity": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "score",
            "severity"
          ],
          "properties": {
            "score": {
              "type": "integer",
              "format": "int32"
            },
            "severity": {
              "$ref": "#/definitions/RiskSeverityRating"
            },
            "matchedRiskIndicators": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ObservedEventRiskIndicator"
              }
            }
          }
        }
      ]
    },
    "ObservedEventRiskIndicator": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "weight"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "weight": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      ]
    },
    "DetailsInAggregateV3Query": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "alertId"
          ],
          "properties": {
            "alertId": {
              "type": "string",
              "description": "The unique identifier representing the alert you want to act upon.",
              "maxLength": 40,
              "example": "ExampleAlertId"
            }
          }
        }
      ]
    },
    "RuleMetadataSearchResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "totalCount"
          ],
          "properties": {
            "ruleMetadata": {
              "type": "array",
              "description": "List of rules that are returned.",
              "items": {
                "$ref": "#/definitions/RuleMetadata"
              }
            },
            "totalCount": {
              "type": "integer",
              "description": "The number of rules that match the given query.",
              "format": "int64",
              "example": "3"
            },
            "problems": {
              "type": "array",
              "description": "Potential issues that were hit while trying to run the query.",
              "example": [],
              "items": {
                "$ref": "#/definitions/QueryProblem"
              }
            }
          }
        }
      ]
    },
    "RuleMetadata": {
      "allOf": [
        {
          "$ref": "#/definitions/ObserverRuleMetadataEssentials"
        },
        {
          "type": "object",
          "required": [
            "createdAt"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "Id of the rule.",
              "example": "UniqueRuleId"
            },
            "createdBy": {
              "type": "string",
              "description": "Username of the individual who created the rule.",
              "example": "UserWhoCreatedTheRule"
            },
            "createdAt": {
              "type": "string",
              "description": "Timestamp of when the rule was created.",
              "format": "date-time",
              "example": "2020-02-19T01:57:45.0066830Z"
            }
          }
        }
      ]
    },
    "ObserverRuleMetadataEssentials": {
      "allOf": [
        {
          "$ref": "#/definitions/ObserverRuleMetadata"
        },
        {
          "type": "object",
          "required": [
            "type",
            "tenantId"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 40,
              "example": "MyExampleTenant"
            },
            "observerRuleId": {
              "type": "string",
              "description": "Id of the rule in the observer.",
              "example": "UniqueRuleId"
            },
            "type": {
              "description": "Rule type of the rule.",
              "$ref": "#/definitions/RuleType"
            }
          }
        }
      ]
    },
    "ObserverRuleMetadata": {
      "allOf": [
        {
          "$ref": "#/definitions/AuditInfo"
        },
        {
          "type": "object",
          "required": [
            "isEnabled"
          ],
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the rule.",
              "example": "My Removable Media Exfiltration Rule"
            },
            "description": {
              "type": "string",
              "description": "The description of the rule.",
              "example": "Will generate alerts when files moved to USB."
            },
            "severity": {
              "description": "The static severity of the rule (deprecated).",
              "$ref": "#/definitions/SeverityRating"
            },
            "isSystem": {
              "type": "boolean",
              "description": "Boolean indicating if the rule was created from another Code42 Application.",
              "example": "FALSE"
            },
            "isEnabled": {
              "type": "boolean",
              "description": "Boolean indicating if the rule is enabled to trigger alerts.",
              "example": "TRUE"
            },
            "ruleSource": {
              "type": "string",
              "description": "The source of the rule.  Will be one of [DepartingEmployee, Alerting, HighRiskEmployee]",
              "example": "Alerting"
            },
            "ruleWarning": {
              "description": "Enum flag indicating there is a warning associated with the given rule.",
              "$ref": "#/definitions/RuleWarning"
            }
          }
        }
      ]
    },
    "RuleWarning": {
      "type": "string",
      "description": "Enum flag indicating there is a warning associated with the given rule.",
      "example": "DISABLED_DUE_TO_LAST_INDICATOR_REMOVED",
      "x-enumNames": [
        "DisabledDueToLastIndicatorRemoved"
      ],
      "enum": [
        "DISABLED_DUE_TO_LAST_INDICATOR_REMOVED"
      ]
    },
    "AuditInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "modifiedAt"
          ],
          "properties": {
            "modifiedBy": {
              "type": "string",
              "description": "Username of the individual who last modified the rule.",
              "example": "UserWhoMostRecentlyModifiedTheRule"
            },
            "modifiedAt": {
              "type": "string",
              "description": "Timestamp of when the rule was last modified.",
              "format": "date-time",
              "example": "2020-02-19T01:57:45.0066830Z"
            }
          }
        }
      ]
    },
    "RuleMetadataSearchQuery": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue"
        },
        {
          "type": "object",
          "required": [
            "pgSize",
            "pgNum",
            "tenantId",
            "groupClause",
            "srtKey"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 40,
              "example": "MyExampleTenant"
            },
            "groups": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FilterGroup"
              }
            },
            "groupClause": {
              "type": "string",
              "description": "The clause to use when combining group filters.  Must be AND/OR.",
              "example": "AND"
            },
            "pgSize": {
              "type": "integer",
              "description": "The number of items to return in one request.  Value must be between 0 and 100.",
              "format": "int32",
              "maximum": 500,
              "example": "20"
            },
            "pgNum": {
              "type": "integer",
              "description": "The page number to return. Page 0 is the first page of results.",
              "format": "int32",
              "example": "0"
            },
            "srtKey": {
              "type": "string",
              "description": "The rule metadata attribute to sort by.  Value must be one of: RuleMetadataId, TenantId, ObserverRuleId, Type, Name, Description, IsEnabled, ModifiedAt, ModifiedBy, CreatedAt, CreatedBy, RuleWarning, LogString",
              "example": "CreatedAt"
            },
            "srtDirection": {
              "$ref": "#/definitions/SortDirection"
            }
          }
        }
      ]
    },
    "ObservedGitPushAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ObservedAction"
        },
        {
          "type": "object",
          "properties": {
            "repositoryUrl": {
              "type": "string"
            },
            "repositoryUser": {
              "type": "string"
            },
            "repositoryEmail": {
              "type": "string"
            },
            "commitHash": {
              "type": "string"
            },
            "gitPushEventId": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ObservedExternalDeviceAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ObservedAction"
        },
        {
          "type": "object",
          "properties": {
            "vendor": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ObservedRecipientsAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ObservedAction"
        },
        {
          "type": "object",
          "required": [
            "recipientIsTruncated"
          ],
          "properties": {
            "recipients": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "recipientIsTruncated": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "ObservedDestinationAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ObservedAction"
        },
        {
          "type": "object",
          "properties": {
            "category": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ObservedNoDetailsAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ObservedAction"
        },
        {
          "type": "object"
        }
      ]
    }
  }
}
