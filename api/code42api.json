{
  "swagger": "2.0",
  "info": {
    "title": "Code42 API Documentation",
    "version": "v1",
    "description": {
      "$ref": "./user_guides.rmd"
    }
  },
  "tags": [
    {
      "name": "Agents",
      "description": {
        "$ref": "./api-descriptions/agents.rmd"
      }
    },
    {
      "name": "Alerts",
      "description": {
        "$ref": "./api-descriptions/alerts.rmd"
      }
    },
    {
      "name": "Audit Log",
      "description": {
        "$ref": "./api-descriptions/audit_log.rmd"
      }
    },
    {
      "name": "Authentication",
      "description": {
        "$ref": "./api-descriptions/auth.rmd"
      }
    },
    {
      "name": "Cases",
      "description": {
        "$ref": "./api-descriptions/cases.rmd"
      }
    },
    {
      "name": "Customer",
      "description": {
        "$ref": "./api-descriptions/customer.rmd"
      }
    },
    {
      "name": "Departments",
      "description": {
        "$ref": "./api-descriptions/departments.rmd"
      }
    },
    {
      "name": "Devices",
      "description": {
        "$ref": "./api-descriptions/device.rmd"
      }
    },
    {
      "name": "Directory Groups",
      "description": {
        "$ref": "./api-descriptions/directory-groups.rmd"
      }
    },
    {
      "name": "File Events",
      "description": {
        "$ref": "./api-descriptions/file_events.rmd"
      }
    },
    {
      "name": "Legal Hold",
      "description": {
        "$ref": "./api-descriptions/legal_hold.rmd"
      }
    },
    {
      "name": "Organizations",
      "description": {
        "$ref": "./api-descriptions/orgs.rmd"
      }
    },
    {
      "name": "Rules",
      "description": {
        "$ref": "./api-descriptions/rules.rmd"
      }
    },
    {
      "name": "Trusted Activities",
      "description": {
        "$ref": "./api-descriptions/trusted_activities.rmd"
      }
    },
    {
      "name": "Users",
      "description": {
        "$ref": "./api-descriptions/user.rmd"
      }
    },
    {
      "name": "User Risk Profiles",
      "description": {
        "$ref": "./api-descriptions/user_risk_profiles.rmd"
      }
    },
    {
      "name": "Watchlists",
      "description": {
        "$ref": "./api-descriptions/watchlists.rmd"
      }
    }
  ],
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "paths": {
    "/v1/alerts/update-state": {
      "post": {
        "tags": [
          "Alerts"
        ],
        "summary": "Change the state of a set of alerts.",
        "operationId": "Alerts_UpdateAlertState",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "The command to change the state of the given alerts.",
            "schema": {
              "$ref": "#/definitions/UpdateStateCommand-alerts"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Given alerts are updated to the indicated status."
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/alerts/update-all-state": {
      "post": {
        "tags": [
          "Alerts"
        ],
        "summary": "Change the state of a batch alerts matching the given query filters.",
        "description": "Uses the given filters and updates a batch of matching alerts to the given state.\nThis query uses batching, so the initial command can be sent with no continuation token but all subsequent commands\nshould supply the continuation token provided in the response of the previous request.",
        "operationId": "Alerts_UpdateAllAlertState",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "The command to change the state of the given alerts.",
            "schema": {
              "$ref": "#/definitions/UpdateAllStateCommand-alerts"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success: Batch of alerts updated.  If continuation token is populated, send another request using that token to continue updating alert states.",
            "schema": {
              "$ref": "#/definitions/UpdateAllStateResponse-alerts"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/alerts/add-note": {
      "post": {
        "tags": [
          "Alerts"
        ],
        "summary": "Add a note to an alert.",
        "operationId": "Alerts_AddNoteToAlert",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "Add note command for the alert.",
            "schema": {
              "$ref": "#/definitions/AddNoteCommand-alerts"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Note is added to the alert."
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/alerts/query-alerts": {
      "post": {
        "tags": [
          "Alerts"
        ],
        "summary": "Search for alerts.",
        "operationId": "Alerts_QueryAlert",
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "required": true,
            "description": "The search query to execute.",
            "schema": {
              "$ref": "#/definitions/SearchQuery-alerts"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success: Response containing alerts that match the provided query.",
            "schema": {
              "$ref": "#/definitions/AlertQueryResponse-alerts"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/alerts/query-details": {
      "post": {
        "tags": [
          "Alerts"
        ],
        "summary": "Get details about an alert.",
        "operationId": "Alerts_QueryAlertDetails",
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "required": true,
            "description": "The alert id query to execute.",
            "schema": {
              "$ref": "#/definitions/DetailsQuery-alerts"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success: Response containing alerts that match the provided query.",
            "schema": {
              "$ref": "#/definitions/AlertDetailsResponse-alerts"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        }
      }
    },
    "/v1/alerts/rules/query-rule-metadata": {
      "post": {
        "tags": [
          "Alerts"
        ],
        "summary": "Query list of all rules in the alerting application.",
        "operationId": "Rules_QueryRuleMetadata",
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "required": true,
            "description": "The RuleMetadataSearchQuery to execute.",
            "schema": {
              "$ref": "#/definitions/RuleMetadataSearchQuery-alerts"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success: Response containing rules that match the provided query.",
            "schema": {
              "$ref": "#/definitions/RuleMetadataSearchResponse-alerts"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        },
        "deprecated": true
      }
    },
    "/v1/audit/export": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExportRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RpcExportResponse"
            }
          }
        },
        "tags": [
          "Audit Log"
        ],
        "description": "Perform an export of the data, getting back a download token that can be redeemed to get the actual file.",
        "operationId": "export",
        "summary": "Export search results to a file"
      }
    },
    "/v1/audit/search-audit-log": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/csv"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchAuditLogBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RpcSearchResponse"
            }
          }
        },
        "tags": [
          "Audit Log"
        ],
        "description": "General purpose audit-log search. All parameters are optional. A search with no arguments returns all events to which the searching user has access.\n\nA search with multiple values for a single parameter applies \"or\" logic for that parameter. e.g. Searching for \"actor_name=[alice@example.com, bob@example.com]\" finds events for which either alice or bob was the actor.\n\nA search with multiple parameters applies \"and\" logic between parameters. e.g. Searching for \"event_type=user_registered,actor_name=alice@example.com\" finds user_registered events for which alice@example.com was the actor.",
        "operationId": "searchAuditLog",
        "summary": "Search for audit events"
      }
    },
    "/v1/audit/search-results-count": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchAuditLogBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RpcSearchResultsCountResponse"
            }
          }
        },
        "tags": [
          "Audit Log"
        ],
        "description": "Returns the count of events found in a search with identical parameters and at the same time. Parameters follow an identical behavior for this results count query, as they would the audit-log search query.",
        "operationId": "searchResultsCount",
        "summary": "Get the number of events matching a search"
      }
    },
    "/v1/audit/search-results-export": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/csv"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExportRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RpcSearchResponse"
            }
          }
        },
        "tags": [
          "Audit Log"
        ],
        "description": "Audit-log search, parameters follow an identical behavior for this results count query, as they would the general purpose audit-log search query.",
        "operationId": "exportStreaming",
        "summary": "Search for audit events, specifically for large result sets"
      }
    },
    "/v1/audit/{method}": {
      "get": {
        "produces": [
          "text/csv"
        ],
        "parameters": [
          {
            "description": "Download token to execute an export, acquired from the export api.",
            "in": "query",
            "name": "downloadToken",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RpcSearchResponse"
            }
          }
        },
        "tags": [
          "Audit Log"
        ],
        "description": "Executes a search based on a download token from the export api.",
        "operationId": "redeemDownloadToken",
        "summary": "Download an exported search result"
      }
    },
    "/v2/trusted-activities": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The type of trusted activity to retrieve. More than one type can be supplied as part of the request parameters. If no types are provided, resources for ALL types are returned.",
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "default": "1",
            "description": "The page of results that should be returned.",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "string"
          },
          {
            "default": "100",
            "description": "Max number of results to return on each page.",
            "in": "query",
            "name": "page_size",
            "required": false,
            "type": "string"
          },
          {
            "description": "The value on which the returned resources will be sorted. Secondary sorting occurs via the sortKey `UPDATE_TIME` for like values.",
            "enum": [
              "ACTIVITY_ID",
              "DESCRIPTION",
              "TYPE",
              "UPDATED_BY_PRINCIPAL_NAME",
              "UPDATE_TIME",
              "VALUE"
            ],
            "in": "query",
            "name": "sort_key",
            "required": false,
            "type": "string"
          },
          {
            "description": "The direction on which to sort the response.",
            "enum": [
              "ASC",
              "DESC"
            ],
            "in": "query",
            "name": "sort_direction",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TrustedActivitiesListResponse-trusted-activities"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse-trusted-activities"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse-trusted-activities"
            }
          },
          "500": {
            "description": "Unknown Error Occured",
            "schema": {
              "$ref": "#/definitions/ErrorResponse-trusted-activities"
            }
          }
        },
        "tags": [
          "Trusted Activities"
        ],
        "operationId": "listTrustedActivities",
        "summary": "v2 - v2 - Get a list of trusted activities"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TrustedActivityRequest-trusted-activities"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TrustedActivityResponse-trusted-activities"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse-trusted-activities"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse-trusted-activities"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse-trusted-activities"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse-trusted-activities"
            }
          },
          "500": {
            "description": "Unknown Error Occured",
            "schema": {
              "$ref": "#/definitions/ErrorResponse-trusted-activities"
            }
          }
        },
        "tags": [
          "Trusted Activities"
        ],
        "operationId": "createTrustResource",
        "summary": "v2 - v2 - Create a new trusted activity"
      }
    },
    "/v2/trusted-activities/{activity_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The id of the trusted activity.",
            "format": "int32",
            "in": "path",
            "name": "activity_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TrustedActivityResponse-trusted-activities"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse-trusted-activities"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse-trusted-activities"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse-trusted-activities"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse-trusted-activities"
            }
          },
          "500": {
            "description": "Unknown Error Occured",
            "schema": {
              "$ref": "#/definitions/ErrorResponse-trusted-activities"
            }
          }
        },
        "tags": [
          "Trusted Activities"
        ],
        "operationId": "deleteTrustResource",
        "summary": "v2 - v2 - Delete a trusted activity"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The id of the trusted activity.",
            "format": "int32",
            "in": "path",
            "name": "activity_id",
            "required": true,
            "type": "integer",
            "x-example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TrustedActivityResponse-trusted-activities"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse-trusted-activities"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse-trusted-activities"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse-trusted-activities"
            }
          },
          "500": {
            "description": "Unknown Error Occured",
            "schema": {
              "$ref": "#/definitions/ErrorResponse-trusted-activities"
            }
          }
        },
        "tags": [
          "Trusted Activities"
        ],
        "operationId": "getTrustedActivity",
        "summary": "v2 - v2 - Get a single trusted activity"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The id of the trusted activity.",
            "format": "int32",
            "in": "path",
            "name": "activity_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TrustedActivityRequest-trusted-activities"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TrustedActivityResponse-trusted-activities"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse-trusted-activities"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse-trusted-activities"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse-trusted-activities"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse-trusted-activities"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponse-trusted-activities"
            }
          },
          "500": {
            "description": "Unknown Error Occured",
            "schema": {
              "$ref": "#/definitions/ErrorResponse-trusted-activities"
            }
          }
        },
        "tags": [
          "Trusted Activities"
        ],
        "operationId": "updateTrustResource",
        "summary": "v2 - v2 - Update an existing trusted activity"
      }
    },
    "/v2/file-events": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchRequestSearchTermV2-file-events"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success: List of file events matching the query.",
            "schema": {
              "$ref": "#/definitions/FileEventResponseV2-file-events"
            }
          },
          "400": {
            "description": "Bad Request: An invalid query was provided.",
            "schema": {
              "$ref": "#/definitions/FileEventResponseV2-file-events"
            }
          },
          "500": {
            "description": "Server Error: Search execution failed.",
            "schema": {
              "$ref": "#/definitions/FileEventResponseV2-file-events"
            }
          }
        },
        "tags": [
          "File Events"
        ],
        "operationId": "searchEvents",
        "summary": "v2 - Search for file events"
      }
    },
    "/v2/file-events/export": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExportRequestSearchTermV2-file-events"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success: CSV of file events matching the query."
          },
          "400": {
            "description": "Bad Request: An invalid query was provided.",
            "schema": {
              "$ref": "#/definitions/StreamingResponseBody-file-events"
            }
          }
        },
        "tags": [
          "File Events"
        ],
        "operationId": "export",
        "summary": "v2 - Export search results as a CSV file"
      }
    },
    "/v2/file-events/grouping": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupingRequestSearchTermV2-file-events"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success: List of groups matching the query.",
            "schema": {
              "$ref": "#/definitions/GroupingResponseSearchTermV2-file-events"
            }
          },
          "400": {
            "description": "Bad Request: An invalid query was provided.",
            "schema": {
              "$ref": "#/definitions/GroupingResponseSearchTermV2-file-events"
            }
          },
          "500": {
            "description": "Server Error: Search execution failed.",
            "schema": {
              "$ref": "#/definitions/GroupingResponseSearchTermV2-file-events"
            }
          }
        },
        "tags": [
          "File Events"
        ],
        "description": "Search file events, providing a group parameter to bucket results into unique values and approximate counts for each value.",
        "operationId": "grouping",
        "summary": "v2 - Group results by search term"
      }
    },
    "/v2/file-events/saved-searches": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success: List of all saved searches for the tenant.",
            "schema": {
              "$ref": "#/definitions/SavedSearchResponseSearchTermV2-file-events"
            }
          }
        },
        "tags": [
          "File Events"
        ],
        "operationId": "getSavedSearches",
        "summary": "v2 - Get all saved searches"
      }
    },
    "/v2/file-events/saved-searches/{id}": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Unique identifier for a saved search.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Details of the specified saved search.",
            "schema": {
              "$ref": "#/definitions/SavedSearchResponseSearchTermV2-file-events"
            }
          },
          "404": {
            "description": "Not found: Saved search does not exist.",
            "schema": {
              "$ref": "#/definitions/SavedSearchResponseSearchTermV2-file-events"
            }
          }
        },
        "tags": [
          "File Events"
        ],
        "operationId": "getSavedSearchById",
        "summary": "v2 - Get a single saved search"
      }
    },
    "/v1/file-events": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchRequestSearchTermV1-file-events"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success: List of file events matching the query.",
            "schema": {
              "$ref": "#/definitions/FileEventResponseV1-file-events"
            }
          },
          "400": {
            "description": "Bad Request: An invalid query was provided.",
            "schema": {
              "$ref": "#/definitions/FileEventResponseV1-file-events"
            }
          },
          "500": {
            "description": "Server Error: Search execution failed.",
            "schema": {
              "$ref": "#/definitions/FileEventResponseV1-file-events"
            }
          }
        },
        "tags": [
          "File Events"
        ],
        "operationId": "searchEvents_1",
        "summary": "v1 - Search for file events",
        "deprecated": true
      }
    },
    "/v1/file-events/export": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExportRequestSearchTermV1-file-events"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success: CSV of file events matching the query."
          },
          "400": {
            "description": "Bad Request: An invalid query was provided.",
            "schema": {
              "$ref": "#/definitions/StreamingResponseBody-file-events"
            }
          }
        },
        "tags": [
          "File Events"
        ],
        "operationId": "export_1",
        "summary": "v1 - Export search results as a CSV file",
        "deprecated": true
      }
    },
    "/v1/file-events/grouping": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupingRequestSearchTermV1-file-events"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success: List of groups matching the query.",
            "schema": {
              "$ref": "#/definitions/GroupingResponseSearchTermV1-file-events"
            }
          },
          "400": {
            "description": "Bad Request: An invalid query was provided.",
            "schema": {
              "$ref": "#/definitions/GroupingResponseSearchTermV1-file-events"
            }
          },
          "500": {
            "description": "Server Error: Search execution failed.",
            "schema": {
              "$ref": "#/definitions/GroupingResponseSearchTermV1-file-events"
            }
          }
        },
        "tags": [
          "File Events"
        ],
        "description": "Search file events, providing a group parameter to bucket results into unique values and approximate counts for each value.",
        "operationId": "grouping_1",
        "summary": "v1 - Group results by search term",
        "deprecated": true
      }
    },
    "/v1/file-events/saved-searches": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success: List of all saved searches for the tenant.",
            "schema": {
              "$ref": "#/definitions/SavedSearchResponseSearchTermV1-file-events"
            }
          }
        },
        "tags": [
          "File Events"
        ],
        "operationId": "getSavedSearches_1",
        "summary": "v1 - Get all saved searches",
        "deprecated": true
      }
    },
    "/v1/file-events/saved-searches/{id}": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Unique identifier for a saved search.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Details of the specified saved search.",
            "schema": {
              "$ref": "#/definitions/SavedSearchResponseSearchTermV1-file-events"
            }
          },
          "404": {
            "description": "Not found: Saved search does not exist.",
            "schema": {
              "$ref": "#/definitions/SavedSearchResponseSearchTermV1-file-events"
            }
          }
        },
        "tags": [
          "File Events"
        ],
        "operationId": "getSavedSearchById_1",
        "summary": "v1 - Get a single saved search",
        "deprecated": true
      }
    },
    "/v1/agents": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "Get a list of agents",
        "parameters": [
          {
            "in": "query",
            "name": "userId",
            "description": "When specified, retrieves user's agents associated with this id.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "agentType",
            "description": "When specified, retrieves agents associated with this agent type.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "active",
            "description": "When specified, retrieves agents associated with this activity status.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "srtKey",
            "description": "Sort the list of agents by this criteria.\r\n            Available values : NAME, USER_ID, AGENT_TYPE, OS_HOSTNAME, LAST_CONNECTED, OS_NAME\r\n            Default value : NAME",
            "type": "string"
          },
          {
            "in": "query",
            "name": "srtDir",
            "description": "Sort the list of agents in this direction.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page of values to return.",
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page of values to return.",
            "type": "integer",
            "format": "int32",
            "default": 500
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AgentListResponse-core"
            }
          }
        }
      }
    },
    "/v1/agents/{agentId}": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "Get a single agent",
        "parameters": [
          {
            "in": "path",
            "name": "agentId",
            "description": "The unique identifier of the agent to return.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AgentResponse-core"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Agents"
        ],
        "summary": "Update an agent",
        "parameters": [
          {
            "in": "path",
            "name": "agentId",
            "description": "The unique identifier of the agent to update.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/UpdateAgentRequest-core"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/agents/activate": {
      "post": {
        "tags": [
          "Agents"
        ],
        "summary": "Activate a set of agents",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/ActivateAgentsRequest-core"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/agents/deactivate": {
      "post": {
        "tags": [
          "Agents"
        ],
        "summary": "Deactivate a set of agents",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/DeactivateAgentsRequest-core"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/oauth": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Create an API Client authentication token",
        "description": "Most APIs require a Bearer token to be submitted in order to determine the calling user's identity and permissions. Call this endpoint with your API Client ID and Secret to retrieve a Bearer token.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/OAuthResponse-core"
            }
          }
        }
      }
    },
    "/v1/auth": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get a User authentication token",
        "description": "Most APIs require a Bearer token to be submitted in order to determine the calling user's identity and permissions. Call this endpoint with your user's basic authentication credentials to retrieve its Bearer token.\r\nIf your organization uses two-factor authentication for local users, you must also include a totp-auth header value containing the Time-based One-Time Password (TOTP).",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/JwtResponse-core"
            }
          }
        }
      }
    },
    "/v1/customer": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get customer account information",
        "description": "Some APIs require a tenant ID to be submitted to retrieve or edit Code42 data. Call this endpoint to retrieve the tenant ID to use for those APIs.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CustomerResponse-core"
            }
          }
        }
      }
    },
    "/v1/devices": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Get a list of devices",
        "parameters": [
          {
            "in": "query",
            "name": "active",
            "description": "When true, return only active devices. When false, return only inactive devices. Defaults to returning both.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "blocked",
            "description": "When true, return only blocked devices. When false, return only unblocked devices. Defaults to returning both.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "sortKey",
            "description": "Key to sort on. Values: name, osHostname, os, lastConnected",
            "type": "string"
          },
          {
            "in": "query",
            "name": "sortDirection",
            "description": "Direction of sort. ASC or DESC (case is irrelevant).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "page",
            "description": "The page number of the result set to return.",
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "The maximum number of devices to return in the response.",
            "type": "integer",
            "format": "int32",
            "default": 500
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeviceListResponse-core"
            }
          }
        },
        "deprecated": true
      }
    },
    "/v1/devices/{deviceId}": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Get a device",
        "parameters": [
          {
            "in": "path",
            "name": "deviceId",
            "description": "The unique Code42 deviceId of the device to return.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeviceResponse-core"
            }
          }
        },
        "deprecated": true
      }
    },
    "/v1/legal-hold/policies": {
      "get": {
        "tags": [
          "Legal Hold"
        ],
        "summary": "Get a list of policies",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LegalHoldPolicyListResponse-core"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Legal Hold"
        ],
        "summary": "Create a policy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/LegalHoldCreatePolicyRequest-core"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LegalHoldPolicyResponse-core"
            }
          }
        }
      }
    },
    "/v1/legal-hold/policies/{policyId}": {
      "get": {
        "tags": [
          "Legal Hold"
        ],
        "summary": "Get a policy",
        "parameters": [
          {
            "in": "path",
            "name": "policyId",
            "description": "The unique identifier of the legal hold policy to return.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LegalHoldPolicyResponse-core"
            }
          }
        }
      }
    },
    "/v1/legal-hold/matters": {
      "get": {
        "tags": [
          "Legal Hold"
        ],
        "summary": "Get a list matters",
        "parameters": [
          {
            "in": "query",
            "name": "creatorUserId",
            "description": "Find legal hold matters that were created by the user with this unique identifier.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "active",
            "description": "When true, return only active matters. When false, return inactive matters. Defaults to returning all matters.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "name",
            "description": "Find legal hold matters whose 'name' either equals or partially contains this value.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "page",
            "description": "The page number of the result set to return.",
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "The maximum number of legal hold matters to return in the response.",
            "type": "integer",
            "format": "int32",
            "default": 500
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LegalHoldMatterListResponse-core"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Legal Hold"
        ],
        "summary": "Create a matter",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/LegalHoldMatterRequest-core"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LegalHoldMatterResponse-core"
            }
          }
        }
      }
    },
    "/v1/legal-hold/matters/{matterId}": {
      "get": {
        "tags": [
          "Legal Hold"
        ],
        "summary": "Get a matter",
        "parameters": [
          {
            "in": "path",
            "name": "matterId",
            "description": "The unique identifier of the legal hold matter to return.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LegalHoldMatterResponse-core"
            }
          }
        }
      }
    },
    "/v1/legal-hold/matters/{matterId}/deactivate": {
      "post": {
        "tags": [
          "Legal Hold"
        ],
        "summary": "Deactivate a matter",
        "parameters": [
          {
            "in": "path",
            "name": "matterId",
            "description": "The unique identifier of the legal hold matter to deactivate.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/legal-hold/matters/{matterId}/reactivate": {
      "post": {
        "tags": [
          "Legal Hold"
        ],
        "summary": "Reactivate a matter",
        "parameters": [
          {
            "in": "path",
            "name": "matterId",
            "description": "The unique identifier of the legal hold matter to reactivate.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LegalHoldReactivateMatterResponse-core"
            }
          }
        }
      }
    },
    "/v1/legal-hold/matters/{matterId}/custodians": {
      "get": {
        "tags": [
          "Legal Hold"
        ],
        "summary": "Get a list of matter custodians",
        "parameters": [
          {
            "in": "path",
            "name": "matterId",
            "description": "The unique identifier of the matter to list custodians from.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "page",
            "description": "The page number of the result set to return.",
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "The maximum number of users to return in the response.",
            "type": "integer",
            "format": "int32",
            "default": 500
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LegalHoldMatterCustodianListResponse-core"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Legal Hold"
        ],
        "summary": "Add a user to a matter",
        "parameters": [
          {
            "in": "path",
            "name": "matterId",
            "description": "The unique identifier of the legal hold matter to add the user to.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The request containing the userID of the user to add to a legal hold matter.",
            "schema": {
              "$ref": "#/definitions/LegalHoldAddCustodianRequest-core"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LegalHoldMembershipResponse-core"
            }
          }
        }
      }
    },
    "/v1/legal-hold/custodians/{userId}": {
      "get": {
        "tags": [
          "Legal Hold"
        ],
        "summary": "Get a list of matters for a user",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The unique identifier of the user to list matters for.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "page",
            "description": "The page number of the result set to return.",
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "The maximum number of users to return in the response.",
            "type": "integer",
            "format": "int32",
            "default": 500
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LegalHoldCustodianMatterListResponse-core"
            }
          }
        }
      }
    },
    "/v1/legal-hold/matters/{matterId}/custodians/remove": {
      "post": {
        "tags": [
          "Legal Hold"
        ],
        "summary": "Remove a user from a matter",
        "parameters": [
          {
            "in": "path",
            "name": "matterId",
            "description": "The unique identifier of the legal hold matter to remove the user from.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The request containing the userID of the user to remove from a legal hold matter.",
            "schema": {
              "$ref": "#/definitions/LegalHoldRemoveCustodianRequest-core"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/orgs": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Get a list of organizations",
        "parameters": [
          {
            "in": "query",
            "name": "active",
            "description": "When true, return only active orgs. When false, return only inactive orgs. Defaults to returning both.",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/OrgListResponse-core"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Organizations"
        ],
        "summary": "Create an organization",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "A request that contains the fields for org creation.",
            "schema": {
              "$ref": "#/definitions/OrgCreateRequest-core"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/OrgResponse-core"
            }
          }
        }
      }
    },
    "/v1/orgs/{orgGuid}": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Get a specific organization",
        "parameters": [
          {
            "in": "path",
            "name": "orgGuid",
            "description": "The unique ID of the org to return.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/OrgResponse-core"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Organizations"
        ],
        "summary": "Update a specific organization",
        "parameters": [
          {
            "in": "path",
            "name": "orgGuid",
            "description": "The unique ID of the org to update.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "A request that contains one or more fields to update for the org.",
            "schema": {
              "$ref": "#/definitions/OrgUpdateRequest-core"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/OrgResponse-core"
            }
          }
        }
      }
    },
    "/v1/orgs/{orgGuid}/activate": {
      "post": {
        "tags": [
          "Organizations"
        ],
        "summary": "Activate a specific organization",
        "parameters": [
          {
            "in": "path",
            "name": "orgGuid",
            "description": "The unique ID of the org to activate.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/orgs/{orgGuid}/deactivate": {
      "post": {
        "tags": [
          "Organizations"
        ],
        "summary": "Deactivate a specific organization",
        "parameters": [
          {
            "in": "path",
            "name": "orgGuid",
            "description": "The unique ID of the org to deactivate.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a list of users",
        "parameters": [
          {
            "in": "query",
            "name": "active",
            "description": "When true, return only active users. When false, return only inactive users. Defaults to returning both.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "blocked",
            "description": "When true, return only blocked users. When false, return only unblocked users. Defaults to returning both.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "username",
            "description": "The username of a user to search for.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "page",
            "description": "The page number of the result set to return.",
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "The maximum number of users to return in the response.",
            "type": "integer",
            "format": "int32",
            "default": 500
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UserListResponse-core"
            }
          }
        }
      }
    },
    "/v1/users/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a user",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The unique Code42 user ID of the user to return.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UserResponse-core"
            }
          }
        }
      }
    },
    "/v1/users/{userId}/devices": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a list of devices for a particular user",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The unique Code42 user ID of the user whose devices should be returned.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "active",
            "description": "When true, return only active devices. When false, return only inactive devices. Defaults to returning both.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "blocked",
            "description": "When true, return only blocked devices. When false, return only unblocked devices. Defaults to returning both.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "sortKey",
            "description": "Key to sort on. Values: name, osHostname, os, lastConnected",
            "type": "string"
          },
          {
            "in": "query",
            "name": "sortDirection",
            "description": "Direction of sort. ASC or DESC (case is irrelevant).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "page",
            "description": "The page number of the result set to return.",
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "The maximum number of devices to return in the response.",
            "type": "integer",
            "format": "int32",
            "default": 500
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeviceListResponse-core"
            }
          }
        }
      }
    },
    "/v1/users/{userId}/roles": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get the roles associated with a user",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The unique Code42 user ID of the user to return.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UserRolesListResponse-core"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update the roles associated with a user",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The unique Code42 user ID of the user to return.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The request containing the role IDs to assign the new user (ex: desktop-user).  These will replace the existing roles assigned to the user.",
            "schema": {
              "$ref": "#/definitions/UpdateRolesRequest-core"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateRolesResponse-core"
            }
          }
        }
      }
    },
    "/v1/users/{userId}/activate": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Activate a user",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The unique Code42 user ID of the user to return.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/users/{userId}/deactivate": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Deactivate a user",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The unique Code42 user ID of the user to return.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/users/{userId}/move": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Move a user to a specified organization",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The unique Code42 user ID of the user to return.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The request containing the org GUID of the org to move the user to.",
            "schema": {
              "$ref": "#/definitions/MoveUserRequest-core"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/users/roles": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a list of available roles",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RolePreserveResponse-core"
              }
            }
          }
        }
      }
    },
    "/v1/users/roles/{roleId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get details for a single role",
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "description": "The unique Code42 user ID of the user to return.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RoleResponse-core"
            }
          }
        }
      }
    },
    "/v1/cases": {
      "get": {
        "tags": [
          "Cases"
        ],
        "summary": "Get all cases for a tenant",
        "operationId": "getCasesUsingGET",
        "parameters": [
          {
            "name": "assignee",
            "in": "query",
            "description": "User UID of an assignee of a case on which to filter.",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "createdAt",
            "in": "query",
            "description": "Filter cases created between the supplied start and end times. Must use ISO time interval, for example: 2020-08-31T11:00:00Z/2020-09-01T15:30:00Z",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "isAssigned",
            "in": "query",
            "description": "Filter cases with an assignee (true) or without (false)",
            "required": false,
            "type": "boolean",
            "allowEmptyValue": false
          },
          {
            "name": "lastModifiedBy",
            "in": "query",
            "description": "User UID of the user who most recently modified the case.",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of a case on which to filter; will include partial matches",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "pgNum",
            "in": "query",
            "description": "Page number for results, starting at 1.",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "pgSize",
            "in": "query",
            "description": "Max number of results to return for a page.",
            "required": false,
            "type": "integer",
            "default": 2147483647,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "srtDir",
            "in": "query",
            "description": "The direction on which to sort the response, based on the corresponding key.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "collectionFormat": "multi",
            "default": "asc",
            "allowEmptyValue": false,
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "name": "srtKey",
            "in": "query",
            "description": "One or more values on which the response will be sorted.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "name",
                "number",
                "createdAt",
                "updatedAt",
                "status",
                "assigneeUsername",
                "subjectUsername",
                "archivalTime"
              ]
            },
            "collectionFormat": "multi",
            "default": "number",
            "allowEmptyValue": false,
            "enum": [
              "name",
              "number",
              "createdAt",
              "updatedAt",
              "status",
              "assigneeUsername",
              "subjectUsername",
              "archivalTime"
            ]
          },
          {
            "name": "status",
            "in": "query",
            "description": "One or more case statuses on which to filter.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "OPEN",
                "CLOSED",
                "ARCHIVED"
              ]
            },
            "collectionFormat": "multi",
            "allowEmptyValue": false,
            "enum": [
              "OPEN",
              "CLOSED",
              "ARCHIVED"
            ]
          },
          {
            "name": "subject",
            "in": "query",
            "description": "User UID of a subject of a case on which to filter.",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "updatedAt",
            "in": "query",
            "description": "Filter cases last updated between the supplied start and end times. Must use ISO time interval, for example: 2020-08-31T11:00:00Z/2020-09-01T15:30:00Z",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Response containing cases matching provided filters.",
            "schema": {
              "$ref": "#/definitions/MultiCaseResponse-cases"
            }
          },
          "400": {
            "description": "Bad Request: An invalid value was provided for a filter.",
            "schema": {
              "$ref": "#/definitions/CaseProblemResponse-cases"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Cases"
        ],
        "summary": "Create a case",
        "operationId": "createCaseUsingPOST",
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCaseRequest-cases"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Response containing created case.",
            "schema": {
              "$ref": "#/definitions/SingleCaseResponse-cases"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided.",
            "schema": {
              "$ref": "#/definitions/CaseProblemResponse-cases"
            }
          },
          "403": {
            "description": "Forbidden: Forbidden by user validation.",
            "schema": {
              "$ref": "#/definitions/CaseProblemResponse-cases"
            }
          }
        }
      }
    },
    "/v1/cases/{caseNumber}": {
      "get": {
        "tags": [
          "Cases"
        ],
        "summary": "Get a single case for a tenant",
        "operationId": "getCaseUsingGET",
        "parameters": [
          {
            "name": "caseNumber",
            "in": "path",
            "description": "Unique numeric identifier for the case.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Response containing the matching case.",
            "schema": {
              "$ref": "#/definitions/SingleCaseResponse-cases"
            }
          },
          "404": {
            "description": "Not Found: Case does not exist."
          }
        }
      },
      "put": {
        "tags": [
          "Cases"
        ],
        "summary": "Update a case",
        "operationId": "updateCaseUsingPUT",
        "parameters": [
          {
            "name": "caseNumber",
            "in": "path",
            "description": "Unique numeric identifier for the case.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCaseRequest-cases"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Response containing updated case.",
            "schema": {
              "$ref": "#/definitions/SingleCaseResponse-cases"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided.",
            "schema": {
              "$ref": "#/definitions/CaseProblemResponse-cases"
            }
          },
          "403": {
            "description": "Forbidden: Forbidden by user validation.",
            "schema": {
              "$ref": "#/definitions/CaseProblemResponse-cases"
            }
          },
          "404": {
            "description": "Not Found: Case does not exist."
          }
        }
      },
      "delete": {
        "tags": [
          "Cases"
        ],
        "summary": "Delete a case",
        "operationId": "deleteCaseUsingDELETE",
        "parameters": [
          {
            "name": "caseNumber",
            "in": "path",
            "description": "Unique numeric identifier for the case.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Success: Case deleted.",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "Not Found: Case does not exist."
          }
        }
      }
    },
    "/v1/cases/{caseNumber}/export": {
      "get": {
        "tags": [
          "Cases"
        ],
        "summary": "Download case summary as a PDF file",
        "operationId": "pdfExportUsingGET",
        "parameters": [
          {
            "name": "caseNumber",
            "in": "path",
            "description": "Unique numeric identifier for the case.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "language",
            "in": "query",
            "description": "Specifies the locale for the PDF export. Defaults to English if no value is supplied.",
            "required": false,
            "type": "string",
            "allowEmptyValue": false,
            "x-example": "de"
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Streaming response containing PDF file.",
            "schema": {
              "$ref": "#/definitions/StreamingResponseBody-cases"
            }
          },
          "404": {
            "description": "Not Found: Case does not exist."
          }
        }
      }
    },
    "/v1/cases/{caseNumber}/export/full": {
      "get": {
        "tags": [
          "Cases"
        ],
        "summary": "Export some or all components of a case",
        "operationId": "caseExportUsingGET",
        "parameters": [
          {
            "name": "caseNumber",
            "in": "path",
            "description": "Unique numeric identifier for the case.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fileEvents",
            "in": "query",
            "description": "Specifies inclusion of the file events CSV in the zip. Defaults to true if no value is supplied.",
            "required": false,
            "type": "boolean",
            "default": true,
            "allowEmptyValue": false,
            "x-example": true
          },
          {
            "name": "files",
            "in": "query",
            "description": "Specifies inclusion of the files in the zip. Defaults to true if no value is supplied.",
            "required": false,
            "type": "boolean",
            "default": true,
            "allowEmptyValue": false,
            "x-example": true
          },
          {
            "name": "language",
            "in": "query",
            "description": "Specifies the locale for the summary PDF export. Defaults to English if no value is supplied.",
            "required": false,
            "type": "string",
            "allowEmptyValue": false,
            "x-example": "de"
          },
          {
            "name": "summary",
            "in": "query",
            "description": "Specifies inclusion of the summary PDF in the zip. Defaults to true if no value is supplied.",
            "required": false,
            "type": "boolean",
            "default": true,
            "allowEmptyValue": false,
            "x-example": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Streaming response.",
            "schema": {
              "$ref": "#/definitions/StreamingResponseBody-cases"
            }
          },
          "400": {
            "description": "Bad Request: Must include at least one export type."
          },
          "404": {
            "description": "Not Found: Case does not exist."
          }
        }
      }
    },
    "/v1/cases/{caseNumber}/fileevent": {
      "get": {
        "tags": [
          "Cases"
        ],
        "summary": "Get all events associated with a case (abbreviated view)",
        "operationId": "getEventsByCaseUsingGET",
        "parameters": [
          {
            "name": "archiveId",
            "in": "query",
            "description": "Archive ID on which to filter",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "caseNumber",
            "in": "path",
            "description": "Unique numeric identifier for the case.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pgNum",
            "in": "query",
            "description": "Page number for results, starting at 1.",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "pgSize",
            "in": "query",
            "description": "Max number of results to return for a page.",
            "required": false,
            "type": "integer",
            "default": 10000,
            "format": "int32",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Response containing abbreviated view of events associated with the case.",
            "schema": {
              "$ref": "#/definitions/MultipleEventsResponse-cases"
            }
          },
          "404": {
            "description": "Not Found: Case does not exist."
          }
        }
      },
      "post": {
        "tags": [
          "Cases"
        ],
        "summary": "Add multiple events to a case",
        "operationId": "addEventsToCaseUsingPOST",
        "parameters": [
          {
            "name": "caseNumber",
            "in": "path",
            "description": "Unique numeric identifier for the case.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MultiEventRequest-cases"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success: Events added to the case.",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request: Too many events in request, case or events do not exist, case is closed, or the maximum events per case has been reached.",
            "schema": {
              "$ref": "#/definitions/EventProblemResponse-cases"
            }
          },
          "403": {
            "description": "Forbidden: Forbidden by events.",
            "schema": {
              "$ref": "#/definitions/EventProblemResponse-cases"
            }
          }
        }
      }
    },
    "/v1/cases/{caseNumber}/fileevent/export": {
      "get": {
        "tags": [
          "Cases"
        ],
        "summary": "Export file events for a case as a CSV file",
        "operationId": "csvExportUsingGET",
        "parameters": [
          {
            "name": "caseNumber",
            "in": "path",
            "description": "Unique numeric identifier for the case.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Streaming response containing CSV file.",
            "schema": {
              "$ref": "#/definitions/StreamingResponseBody-cases"
            }
          },
          "404": {
            "description": "Not Found: Case does not exist."
          }
        }
      }
    },
    "/v1/cases/{caseNumber}/fileevent/{eventId}": {
      "get": {
        "tags": [
          "Cases"
        ],
        "summary": "Get the full JSON for a single event",
        "operationId": "getEventUsingGET",
        "parameters": [
          {
            "name": "caseNumber",
            "in": "path",
            "description": "Unique numeric identifier for the case.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "The unique identifier for the event.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Response containing the full JSON for the event.",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "Not Found: Case or event do not exist."
          }
        }
      },
      "post": {
        "tags": [
          "Cases"
        ],
        "summary": "Add an event to a case",
        "operationId": "addEventToCaseUsingPOST",
        "parameters": [
          {
            "name": "caseNumber",
            "in": "path",
            "description": "Unique numeric identifier for the case.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "The unique identifier for the event.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success: Event added to the case.",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request: Case or event do not exist, the case already has the event, case is closed, or the maximum events per case has been reached.",
            "schema": {
              "$ref": "#/definitions/EventProblemResponse-cases"
            }
          },
          "403": {
            "description": "Forbidden: Forbidden by events.",
            "schema": {
              "$ref": "#/definitions/EventProblemResponse-cases"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Cases"
        ],
        "summary": "Delete an event from a case",
        "operationId": "deleteEventUsingDELETE",
        "parameters": [
          {
            "name": "caseNumber",
            "in": "path",
            "description": "Unique numeric identifier for the case.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "The unique identifier for the event.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success: Event deleted from the case.",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request: Case has been closed.",
            "schema": {
              "$ref": "#/definitions/EventProblemResponse-cases"
            }
          },
          "404": {
            "description": "Not Found: Case or event do not exist."
          }
        }
      }
    },
    "/v1/cases/{caseNumber}/fileevent/{eventId}/file": {
      "get": {
        "tags": [
          "Cases"
        ],
        "summary": "Download the file associated with an event, if present",
        "operationId": "downloadUsingGET",
        "parameters": [
          {
            "name": "caseNumber",
            "in": "path",
            "description": "Unique numeric identifier for the case.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "eventId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Streaming response containing file data.",
            "schema": {
              "$ref": "#/definitions/StreamingResponseBody-cases"
            }
          },
          "404": {
            "description": "Not Found: Event not on case, or has no file."
          }
        }
      }
    },
    "/v1/alert-rules/update-is-enabled": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "v1 - Enable or disable a list of rules.",
        "operationId": "Rules_UpdateIsEnabled",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "The update is enabled command.",
            "schema": {
              "$ref": "#/definitions/UpdateIsEnabledCommand-alert-rules"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Given rules are set to the indicated enabled state."
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        },
        "deprecated": true
      }
    },
    "/v1/alert-rules/add-users": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "v1 - Add users to a rule's watch list.",
        "description": "Note that the added users could become either included included or excluded from the rule, depending on the rule's configuration.\nThis command requires a userIdFromAuthority to be associated with the user aliases for successful removal. Some users, such as ones added from the Code42 console or CLI do not have this id associated and cannot be removed with this API command.",
        "operationId": "Rules_AddUsersToRule",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "The command to add users to the rule watch list.",
            "schema": {
              "$ref": "#/definitions/AddUsersToRuleCommand-alert-rules"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Given users are added to the rule."
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        },
        "deprecated": true
      }
    },
    "/v1/alert-rules/remove-users": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "v1 - Remove users from a rule's watch list.",
        "description": "Note that the removed users could become either included or excluded from the rule, depending on the rule's configuration.\nThis command requires a userIdFromAuthority to be associated with the user aliases for successful removal. Some users, such as ones added from the Code42 console or CLI do not have this id associated and cannot be removed with this API command.",
        "operationId": "Rules_RemoveUsersFromRule",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "The command to remove users from the rule watch list.",
            "schema": {
              "$ref": "#/definitions/RemoveUsersFromRuleCommand-alert-rules"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Given users are removed from the rule."
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        },
        "deprecated": true
      }
    },
    "/v1/alert-rules/remove-user-aliases": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "v1 - Remove user aliases from a rule's watch list.",
        "description": "Note that the removed user aliases could become either included or excluded from the rule, depending on the rule's configuration.\nThis command requires a userIdFromAuthority to be associated with the user aliases for successful removal. Some users, such as ones added from the Code42 console or CLI do not have this id associated and cannot be removed with this API command.",
        "operationId": "Rules_RemoveUserAliasesFromRule",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "The command to remove users from the rule watch list.",
            "schema": {
              "$ref": "#/definitions/RemoveUserAliasesFromRuleCommand-alert-rules"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Given user aliases are removed from the rule."
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        },
        "deprecated": true
      }
    },
    "/v1/alert-rules/remove-all-users": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "v1 - Remove all users from a rule's watch list.",
        "description": "Note that the removed users could become either included or excluded from the rule, depending on the rule's configuration.\nThis command requires a userIdFromAuthority to be associated with the user aliases for successful removal. Some users, such as ones added from the Code42 console or CLI do not have this id associated and cannot be removed with this API command.",
        "operationId": "Rules_RemoveAllUsersFromRule",
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "The command to remove all users from the rule watch list.",
            "schema": {
              "$ref": "#/definitions/RemoveAllUsersFromRuleCommand-alert-rules"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success: All users are removed from the rule."
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        },
        "deprecated": true
      }
    },
    "/v1/alert-rules/query-users": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "v1 - Get users assigned to a given rule.",
        "operationId": "Rules_QueryUsersOnRule",
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "required": true,
            "description": "The query to run.",
            "schema": {
              "$ref": "#/definitions/GetUsersInRuleQuery-alert-rules"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success: Response containing a list of users included in the rule.",
            "schema": {
              "$ref": "#/definitions/UsersInRuleResponse-alert-rules"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        },
        "deprecated": true
      }
    },
    "/v1/alert-rules/query-cloud-share-permissions-rule": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "v1 - Get details about a set of Cloud Share Permissions rules.",
        "operationId": "Rules_QueryCloudSharePermissionsRule",
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "required": true,
            "description": "The query to run.",
            "schema": {
              "$ref": "#/definitions/GetCloudSharePermissionsRuleDetailsQuery-alert-rules"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success: Response containing rule details for given rule id.",
            "schema": {
              "$ref": "#/definitions/CloudSharePermissionsRuleDetailsResponse-alert-rules"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        },
        "deprecated": true
      }
    },
    "/v1/alert-rules/query-endpoint-exfiltration-rule": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "v1 - Get details about a set of Endpoint Exfiltration rules.",
        "operationId": "Rules_QueryEndpointExfiltrationRule",
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "required": true,
            "description": "The query to run.",
            "schema": {
              "$ref": "#/definitions/GetEndpointExfiltrationRuleDetailsQuery-alert-rules"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success: Response containing rule details for given rule id.",
            "schema": {
              "$ref": "#/definitions/EndpointExfiltrationRuleDetailsResponse-alert-rules"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        },
        "deprecated": true
      }
    },
    "/v1/alert-rules/query-file-type-mismatch-rule": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "v1 - Get details about a set of File Type Mismatch rules.",
        "operationId": "Rules_QueryFileTypeMismatchRule",
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "required": true,
            "description": "The query to run.",
            "schema": {
              "$ref": "#/definitions/GetFileTypeMismatchRuleDetailsQuery-alert-rules"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success: Response containing rule details for given rule id.",
            "schema": {
              "$ref": "#/definitions/FileTypeMismatchRuleDetailsResponse-alert-rules"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        },
        "deprecated": true
      }
    },
    "/v1/alert-rules/query-file-name-rule": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "v1 - Get details about a set of File Name rules.",
        "operationId": "Rules_QueryFileNameRule",
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "required": true,
            "description": "The query to run.",
            "schema": {
              "$ref": "#/definitions/GetFileNameRuleDetailsQuery-alert-rules"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success: Response containing rule details for given rule id.",
            "schema": {
              "$ref": "#/definitions/FileNameRuleDetailsResponse-alert-rules"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided."
          }
        },
        "deprecated": true
      }
    },
    "/v2/alert-rules/{id}": {
      "get": {
        "tags": [
          "Rules"
        ],
        "summary": "v2 - Gets the details of a single rule.",
        "operationId": "Rules_GetRule",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Id of the rule.",
            "x-nullable": true,
            "example": "3ade1c85-4e68-4c5a-8f90-17b73ede2416"
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success: Response containing rule details for given rule id",
            "schema": {
              "$ref": "#/definitions/RuleDetails-alert-rules-v2"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided"
          }
        }
      }
    },
    "/v2/alert-rules": {
      "get": {
        "tags": [
          "Rules"
        ],
        "summary": "v2 - Gets all rules in the service.",
        "operationId": "Rules_GetRules",
        "parameters": [
          {
            "type": "integer",
            "name": "PageNumber",
            "in": "query",
            "description": "Page number of results to return.",
            "format": "int32",
            "default": 0,
            "x-nullable": false,
            "example": 10
          },
          {
            "type": "integer",
            "name": "PageSize",
            "in": "query",
            "description": "Page size of results to return.",
            "format": "int32",
            "default": 10,
            "x-nullable": false,
            "example": 50
          },
          {
            "type": "string",
            "name": "WatchlistId",
            "in": "query",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success: Response containing rule details for given page of rules",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RuleDetails-alert-rules-v2"
              }
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided"
          }
        }
      }
    },
    "/v2/alert-rules/{id}/enable": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "v2 - Enables an individual rule by id.",
        "operationId": "Rules_Enable",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the rule.",
            "x-nullable": true,
            "example": "ee6a0101-cbcb-4a46-9d3c-93d226f377a0"
          }
        ],
        "responses": {
          "204": {
            "description": "Success: Rule was enabled"
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided"
          }
        }
      }
    },
    "/v2/alert-rules/enable": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "v2 - Enables a set of rules.",
        "operationId": "Rules_Enable2",
        "parameters": [
          {
            "name": "ids",
            "in": "body",
            "required": true,
            "description": "Array of rule ids.",
            "schema": {
              "type": "array",
              "example": [
                "c32a0569-e65d-44a0-82d2-02ce39c61a7b"
              ],
              "items": {
                "type": "string"
              }
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "Success: Rules were enabled"
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided"
          }
        }
      }
    },
    "/v2/alert-rules/{id}/disable": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "v2 - Disables an individual rule by id.",
        "operationId": "Rules_Disable",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the rule.",
            "x-nullable": true,
            "example": "5c4888ca-3fe6-446c-a1a3-6cd2c352a4c6"
          }
        ],
        "responses": {
          "204": {
            "description": "Success: Rule was disabled"
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided"
          }
        }
      }
    },
    "/v2/alert-rules/disable": {
      "post": {
        "tags": [
          "Rules"
        ],
        "summary": "v2 - Disables a set of rules.",
        "operationId": "Rules_Disable2",
        "parameters": [
          {
            "name": "ids",
            "in": "body",
            "required": true,
            "description": "Array of rule ids.",
            "schema": {
              "type": "array",
              "example": [
                "4c9f4b13-2fd2-4206-b8da-0528e7300e34"
              ],
              "items": {
                "type": "string"
              }
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "Success: Rules were disabled"
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided"
          }
        }
      }
    },
    "/v2/alert-rules/{id}/users": {
      "delete": {
        "tags": [
          "Rules"
        ],
        "summary": "v2 - Removes all users from a rule's username filter.",
        "description": "Note that the removed users could become either included or excluded from the rule, depending on the rule's configuration.",
        "operationId": "Rules_RemoveAllUsers",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the rule.",
            "x-nullable": true,
            "example": "70ca5214-0455-4935-8580-20bfc32592fe"
          }
        ],
        "responses": {
          "204": {
            "description": "Success: All users were removed from the rule"
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided"
          }
        }
      },
      "get": {
        "tags": [
          "Rules"
        ],
        "summary": "v2 - Gets the username filter of a rule.",
        "description": "Note that the retrieved users could become either included or excluded from the rule, depending on the rule's configuration.",
        "operationId": "Rules_GetUsers",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the rule.",
            "x-nullable": true,
            "example": "8262a4e5-5c56-4a69-9bd2-2dc9d3c78cdd"
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Success: List of users on the rule",
            "schema": {
              "$ref": "#/definitions/RuleUsersResponse-alert-rules-v2"
            }
          },
          "400": {
            "description": "Bad Request: An invalid request model was provided"
          }
        }
      }
    },
    "/v1/departments": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The desired page of department results to retrieve.",
            "format": "int64",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "The desired number of results per page.",
            "format": "int64",
            "in": "query",
            "name": "page_size",
            "type": "integer"
          },
          {
            "description": "Matches departments whose name is like the given value.",
            "in": "query",
            "name": "name",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListDepartmentsResponse"
            }
          }
        },
        "tags": [
          "Departments"
        ],
        "operationId": "ListDepartments",
        "summary": "Get a list of departments"
      }
    },
    "/v1/directory-groups": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The desired page of directory group results to retrieve.",
            "format": "int64",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "The desired number of results per page.",
            "format": "int64",
            "in": "query",
            "name": "page_size",
            "type": "integer"
          },
          {
            "description": "Matches directory groups whose name is like the given value.",
            "in": "query",
            "name": "name",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListDirectoryGroupsResponse"
            }
          }
        },
        "tags": [
          "Directory Groups"
        ],
        "operationId": "ListDirectoryGroups",
        "summary": "Get a list of directory groups"
      }
    },
    "/v1/user-risk-profiles": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The desired page of user risk profile results to retrieve.",
            "format": "int64",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "The desired number of results per page.",
            "format": "int64",
            "in": "query",
            "name": "page_size",
            "type": "integer"
          },
          {
            "description": "Matches users whose manager has the given Code42 user ID.",
            "in": "query",
            "name": "manager_id",
            "type": "string"
          },
          {
            "description": "Matches users with the given job title.",
            "in": "query",
            "name": "title",
            "type": "string"
          },
          {
            "description": "Matches users in the given division.",
            "in": "query",
            "name": "division",
            "type": "string"
          },
          {
            "description": "Matches users in the given department.",
            "in": "query",
            "name": "department",
            "type": "string"
          },
          {
            "description": "Matches users with the given employment type.",
            "in": "query",
            "name": "employment_type",
            "type": "string"
          },
          {
            "description": "Matches users in the given country.",
            "in": "query",
            "name": "country",
            "type": "string"
          },
          {
            "description": "Matches users the given region (state).",
            "in": "query",
            "name": "region",
            "type": "string"
          },
          {
            "description": "Matches users in the given locality (city).",
            "in": "query",
            "name": "locality",
            "type": "string"
          },
          {
            "description": "Matches users by whether the user is active.",
            "in": "query",
            "name": "active",
            "type": "boolean"
          },
          {
            "description": "Matches users by whether the user is deleted.",
            "in": "query",
            "name": "deleted",
            "type": "boolean"
          },
          {
            "description": "Matches users by whether the user is a support user.",
            "in": "query",
            "name": "support_user",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListUserRiskProfilesResponse"
            }
          }
        },
        "tags": [
          "User Risk Profiles"
        ],
        "operationId": "ListUserRiskProfiles",
        "summary": "Get a list of user risk profiles"
      }
    },
    "/v1/user-risk-profiles/{user_id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A unique user ID.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UserRiskProfile"
            }
          }
        },
        "tags": [
          "User Risk Profiles"
        ],
        "operationId": "GetUserRiskProfile",
        "summary": "Get a user risk profile"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the user to update.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "The set of field mask paths.",
            "in": "query",
            "items": {
              "description": "The set of field mask paths.",
              "type": "string"
            },
            "name": "paths",
            "type": "array"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UpdatedUserRiskProfile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UserRiskProfile"
            }
          }
        },
        "tags": [
          "User Risk Profiles"
        ],
        "operationId": "UpdateUserRiskProfile",
        "summary": "Update a user risk profile",
        "description": {
          "$ref": "./api-descriptions/user_risk_profile_patch.rmd"
        }
      }
    },
    "/v1/user-risk-profiles/{user_id}/add-cloud-aliases": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the user to add cloud aliases.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/AddCloudAliasesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": false,
              "type": "object"
            }
          }
        },
        "tags": [
          "User Risk Profiles"
        ],
        "operationId": "AddCloudAliases",
        "summary": "Add cloud aliases to a user risk profile"
      }
    },
    "/v1/user-risk-profiles/{user_id}/delete-cloud-aliases": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the user to delete cloud aliases.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DeleteCloudAliasesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": false,
              "type": "object"
            }
          }
        },
        "tags": [
          "User Risk Profiles"
        ],
        "operationId": "DeleteCloudAliases",
        "summary": "Delete cloud aliases from a user risk profile"
      }
    },
    "/v1/watchlists": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The desired page of watchlist results to retrieve.",
            "format": "int64",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "The desired number of results per page.",
            "format": "int64",
            "in": "query",
            "name": "page_size",
            "type": "integer"
          },
          {
            "description": "Matches watchlists where user is a member.",
            "in": "query",
            "name": "user_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListWatchlistsResponse"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "operationId": "ListWatchlists",
        "summary": "Get a list of watchlists"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CreateWatchlistRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Watchlist"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "operationId": "CreateWatchlist",
        "summary": "Create a new watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": false,
              "type": "object"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "operationId": "DeleteWatchlist",
        "summary": "Delete a watchlist"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Watchlist"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "operationId": "GetWatchlist",
        "summary": "Get a watchlist"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The ID of the watchlist to update.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "The set of field mask paths.",
            "in": "query",
            "items": {
              "description": "The set of field mask paths.",
              "type": "string"
            },
            "name": "paths",
            "type": "array"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UpdatedWatchlist"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Watchlist"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "operationId": "UpdateWatchlist",
        "summary": "Update a custom watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}/excluded-users": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The desired page of excluded users to retrieve.",
            "format": "int64",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "The desired number of results per page.",
            "format": "int64",
            "in": "query",
            "name": "page_size",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListExcludedUsersResponse"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "operationId": "ListExcludedUsers",
        "summary": "Get the list of users explicitly excluded from a watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}/excluded-users/add": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/AddExcludedUsersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": false,
              "type": "object"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "operationId": "AddExcludedUsers",
        "summary": "Explicitly exclude users from a watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}/excluded-users/delete": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DeleteExcludedUsersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": false,
              "type": "object"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "operationId": "DeleteExcludedUsers",
        "summary": "Remove users that are explicitly excluded from a watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}/excluded-users/{user_id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "A unique user ID.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ExcludedUser"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "operationId": "GetExcludedUser",
        "summary": "Get an excluded user for a watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}/included-departments": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The desired page of included departments to retrieve.",
            "format": "int64",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "The desired number of results per page.",
            "format": "int64",
            "in": "query",
            "name": "page_size",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListIncludedDepartmentsResponse"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "operationId": "ListIncludedDepartments",
        "summary": "Get the list of departments explicitly included on a watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}/included-departments/add": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/AddIncludedDepartmentsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": false,
              "type": "object"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "operationId": "AddIncludedDepartments",
        "summary": "Explicitly include departments on a watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}/included-departments/delete": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DeleteIncludedDepartmentsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": false,
              "type": "object"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "operationId": "DeleteIncludedDepartments",
        "summary": "Remove departments that are explicitly included on a watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}/included-departments/{department}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "A department.",
            "in": "path",
            "name": "department",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/IncludedDepartment"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "operationId": "GetIncludedDepartment",
        "summary": "Get an included department for a watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}/included-directory-groups": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The desired page of included directory groups to retrieve.",
            "format": "int64",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "The desired number of results per page.",
            "format": "int64",
            "in": "query",
            "name": "page_size",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListIncludedDirectoryGroupsResponse"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "operationId": "ListIncludedDirectoryGroups",
        "summary": "Get the list of directory groups explicitly included on a watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}/included-directory-groups/add": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/AddIncludedDirectoryGroupsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": false,
              "type": "object"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "operationId": "AddIncludedDirectoryGroups",
        "summary": "Explicitly include directory groups on a watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}/included-directory-groups/delete": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DeleteIncludedDirectoryGroupsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": false,
              "type": "object"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "operationId": "DeleteIncludedDirectoryGroups",
        "summary": "Remove directory groups that are explicitly included on a watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}/included-directory-groups/{group_id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "A unique group ID.",
            "in": "path",
            "name": "group_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/IncludedDirectoryGroup"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "operationId": "GetIncludedDirectoryGroup",
        "summary": "Get an included directory group for a watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}/included-users": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The desired page of included users to retrieve.",
            "format": "int64",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "The desired number of results per page.",
            "format": "int64",
            "in": "query",
            "name": "page_size",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListIncludedUsersResponse"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "operationId": "ListIncludedUsers",
        "summary": "Get the list of users explicitly included on a watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}/included-users/add": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/AddIncludedUsersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": false,
              "type": "object"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "operationId": "AddIncludedUsers",
        "summary": "Explicitly include users on a watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}/included-users/delete": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DeleteIncludedUsersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": false,
              "type": "object"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "operationId": "DeleteIncludedUsers",
        "summary": "Remove users that are explicitly included on a watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}/included-users/{user_id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "A unique user ID.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/IncludedUser"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "operationId": "GetIncludedUser",
        "summary": "Get an included user for a watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}/members": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The desired page of members to retrieve.",
            "format": "int64",
            "in": "query",
            "name": "page",
            "type": "integer"
          },
          {
            "description": "The desired number of results per page.",
            "format": "int64",
            "in": "query",
            "name": "page_size",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListWatchlistMembersResponse"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "operationId": "ListWatchlistMembers",
        "summary": "Get a list of all members of a watchlist"
      }
    },
    "/v1/watchlists/{watchlist_id}/members/{user_id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A unique watchlist ID.",
            "in": "path",
            "name": "watchlist_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "A unique user ID.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WatchlistMember"
            }
          }
        },
        "tags": [
          "Watchlists"
        ],
        "operationId": "GetWatchlistMember",
        "summary": "Get a member of a watchlist"
      }
    }
  },
  "definitions": {
    "UpdateStateCommand-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "required": [
            "state",
            "tenantId",
            "alertIds"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 40,
              "example": "MyExampleTenant"
            },
            "alertIds": {
              "type": "array",
              "description": "The unique identifiers representing the alerts you want to act upon.",
              "maxItems": 100,
              "example": [
                "ExampleAlertId1",
                "ExampleAlertId2"
              ],
              "items": {
                "type": "string"
              }
            },
            "state": {
              "description": "The state to update the given alerts to.",
              "$ref": "#/definitions/AlertState-alerts"
            },
            "note": {
              "type": "string",
              "description": "An optional note to attach to the alert",
              "maxLength": 2000,
              "example": "This is an example note."
            }
          }
        }
      ]
    },
    "AlertState-alerts": {
      "type": "string",
      "description": "Enum indicating possible alert states.",
      "example": "RESOLVED",
      "x-enumNames": [
        "Open",
        "Resolved",
        "InProgress",
        "Pending",
        "ResolvedTp",
        "ResolvedFp"
      ],
      "enum": [
        "OPEN",
        "RESOLVED",
        "IN_PROGRESS",
        "PENDING",
        "RESOLVED_TP",
        "RESOLVED_FP"
      ]
    },
    "DomainValue-alerts": {
      "type": "object",
      "x-abstract": true
    },
    "UpdateAllStateResponse-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "properties": {
            "continuationToken": {
              "type": "string",
              "description": "The continuation token to be used if there are more alerts to update.  Provide this in the next request in the 'continuationToken' field.  This will be null if all alerts matching the given filters have been updated.",
              "example": "362bb430-4a16-4450-a853-b961421d4132"
            }
          }
        }
      ]
    },
    "UpdateAllStateCommand-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "required": [
            "state",
            "tenantId",
            "groupClause"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 40,
              "example": "MyExampleTenant"
            },
            "groups": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FilterGroup-alerts"
              }
            },
            "groupClause": {
              "type": "string",
              "description": "The clause to use when combining group filters.  Must be AND/OR.",
              "example": "OR"
            },
            "state": {
              "description": "The state to update the given alerts to.",
              "$ref": "#/definitions/AlertState-alerts"
            },
            "continuationToken": {
              "type": "string",
              "description": "The continuation token provided by the prior update all request.  This should be a guid id. If it is your first call, this can be null.",
              "example": "362bb430-4a16-4450-a853-b961421d4132"
            }
          }
        }
      ]
    },
    "FilterGroup-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "required": [
            "filterClause",
            "filters"
          ],
          "properties": {
            "filters": {
              "type": "array",
              "description": "The list of search filters to query on.",
              "items": {
                "$ref": "#/definitions/SearchFilter-alerts"
              }
            },
            "filterClause": {
              "$ref": "#/definitions/SearchClause-alerts"
            }
          }
        }
      ]
    },
    "SearchFilter-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "required": [
            "operator",
            "term",
            "value"
          ],
          "properties": {
            "term": {
              "type": "string",
              "description": "The alert or rule metadata attribute to search on.\n\nFor alert queries, value must be one of: AlertId, TenantId, Type, Name, Description, Actor, ActorId, Target, RiskSeverity, RuleSource, CreatedAt, Observations, Notes, Watchlists, HasAuthSignificantWatchlist, State, StateLastModifiedAt, StateLastModifiedBy, LastModifiedTime, LastModifiedBy, RuleId, Education, Severity.\n\nFor rule queries, value must be one of RuleMetadataId, TenantId, ObserverRuleId, Type, Name, Description, IsEnabled, ModifiedAt, ModifiedBy, CreatedAt, CreatedBy, RuleWarning, LogString. ",
              "example": "State"
            },
            "operator": {
              "example": "IS",
              "$ref": "#/definitions/FilterOperator-alerts"
            },
            "value": {
              "type": "string",
              "description": "The value you want to use in the filter.",
              "example": "OPEN"
            }
          }
        }
      ]
    },
    "FilterOperator-alerts": {
      "type": "string",
      "description": "The filter operator to use.",
      "example": "IS",
      "x-enumNames": [
        "Is",
        "IsNot",
        "OnOrBefore",
        "OnOrAfter",
        "On",
        "LessThan",
        "GreaterThan",
        "Contains",
        "DoesNotContain"
      ],
      "enum": [
        "IS",
        "IS_NOT",
        "ON_OR_BEFORE",
        "ON_OR_AFTER",
        "ON",
        "LESS_THAN",
        "GREATER_THAN",
        "CONTAINS",
        "DOES_NOT_CONTAIN"
      ]
    },
    "SearchClause-alerts": {
      "type": "string",
      "description": "The filter clause to use when combining the search filters.  Must be AND/OR.s",
      "example": "AND",
      "x-enumNames": [
        "And",
        "Or"
      ],
      "enum": [
        "AND",
        "OR"
      ]
    },
    "AddNoteCommand-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "alertId",
            "note"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 40,
              "example": "MyExampleTenant"
            },
            "alertId": {
              "type": "string",
              "description": "The unique identifier representing the alert you want to act upon.",
              "maxLength": 40,
              "example": "ExampleAlertId"
            },
            "note": {
              "type": "string",
              "description": "The note to attach to the alert.",
              "maxLength": 2000,
              "example": "This is an example note."
            }
          }
        }
      ]
    },
    "AlertQueryResponse-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "required": [
            "totalCount"
          ],
          "properties": {
            "alerts": {
              "type": "array",
              "description": "List of alerts that are returned.",
              "items": {
                "$ref": "#/definitions/AlertSummary-alerts"
              }
            },
            "totalCount": {
              "type": "integer",
              "description": "The number of alerts that match the given query.",
              "format": "int64",
              "example": "3"
            },
            "problems": {
              "type": "array",
              "description": "Potential issues that were hit while trying to run the query.",
              "example": [],
              "items": {
                "$ref": "#/definitions/QueryProblem-alerts"
              }
            }
          }
        }
      ]
    },
    "AlertSummary-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/AlertEssentials-alerts"
        },
        {
          "type": "object",
          "required": [
            "createdAt",
            "state"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique id of the alert.",
              "example": "alertId"
            },
            "createdAt": {
              "type": "string",
              "description": "The timestamp when the alert was created.",
              "format": "date-time",
              "example": "2020-02-19T01:57:45.006683Z"
            },
            "state": {
              "description": "The current state of the alert.",
              "$ref": "#/definitions/AlertState-alerts"
            },
            "stateLastModifiedBy": {
              "type": "string"
            },
            "stateLastModifiedAt": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      ]
    },
    "AlertEssentials-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "required": [
            "type",
            "tenantId"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 40,
              "example": "MyExampleTenant"
            },
            "type": {
              "description": "Rule type that generated the alert.",
              "$ref": "#/definitions/RuleType-alerts"
            },
            "name": {
              "type": "string",
              "description": "The name of the alert.  Same as the name of the rule that triggered it.",
              "example": "Removable Media Exfiltration Rule"
            },
            "description": {
              "type": "string",
              "description": "The description of the alert.  Same as the description of the rule that triggered it.",
              "example": "Alert me on all removable media exfiltration."
            },
            "actor": {
              "type": "string",
              "description": "The user who triggered the alert.",
              "example": "exampleUser@mycompany.com"
            },
            "actorId": {
              "type": "string",
              "description": "The authority user id who triggered the alert, if it is available.",
              "example": "authorityUserId"
            },
            "target": {
              "type": "string"
            },
            "severity": {
              "description": "Indicates static rule severity of the alert.",
              "$ref": "#/definitions/SeverityRating-alerts"
            },
            "riskSeverity": {
              "description": "Indicates event risk severity of the alert.",
              "example": "MODERATE",
              "$ref": "#/definitions/RiskSeverityRating-alerts"
            },
            "notificationInfo": {
              "type": "array",
              "description": "Notification information of the alert.  Not queried/returned.",
              "example": [],
              "items": {
                "$ref": "#/definitions/NotificationInfo-alerts"
              }
            },
            "ruleId": {
              "type": "string",
              "description": "The unique id corresponding to the rule which triggered the alert.",
              "example": "uniqueRuleId"
            },
            "ruleSource": {
              "type": "string",
              "description": "Indicates source of rule creation.  Either alerting or lens application name.",
              "example": "Departing Employee"
            },
            "watchlists": {
              "type": "array",
              "description": "Watchlists the actor is on at the time of the alert.",
              "example": [],
              "items": {
                "$ref": "#/definitions/Watchlist-alerts"
              }
            },
            "userEducation": {
              "description": "User education will be populated if the alert is configured to send a response.",
              "$ref": "#/definitions/Education-alerts"
            }
          }
        }
      ]
    },
    "RuleType-alerts": {
      "type": "string",
      "description": "Rule type that generates alerts.",
      "example": "FED_ENDPOINT_EXFILTRATION",
      "x-enumNames": [
        "FedEndpointExfiltration",
        "FedCloudSharePermissions",
        "FedFileTypeMismatch",
        "FedFileNameMatch",
        "FedComposite"
      ],
      "enum": [
        "FED_ENDPOINT_EXFILTRATION",
        "FED_CLOUD_SHARE_PERMISSIONS",
        "FED_FILE_TYPE_MISMATCH",
        "FED_FILE_NAME_MATCH",
        "FED_COMPOSITE"
      ]
    },
    "SeverityRating-alerts": {
      "type": "string",
      "description": "Possible severity values for an alert.",
      "example": "LOW",
      "x-enumNames": [
        "Low",
        "Medium",
        "High"
      ],
      "enum": [
        "LOW",
        "MEDIUM",
        "HIGH"
      ]
    },
    "RiskSeverityRating-alerts": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Unknown",
        "NoRiskIndicated",
        "Low",
        "Moderate",
        "High",
        "Critical"
      ],
      "enum": [
        "UNKNOWN",
        "NO_RISK_INDICATED",
        "LOW",
        "MODERATE",
        "HIGH",
        "CRITICAL"
      ]
    },
    "NotificationInfo-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "required": [
            "notificationType"
          ],
          "properties": {
            "notificationType": {
              "description": "Type of notification.",
              "$ref": "#/definitions/NotificationType-alerts"
            },
            "notificationAddress": {
              "type": "string",
              "description": "Address notification was sent to.",
              "example": "myUsername@company.com"
            }
          }
        }
      ]
    },
    "NotificationType-alerts": {
      "type": "string",
      "description": "Type of notification.",
      "example": "EMAIL",
      "x-enumNames": [
        "Email"
      ],
      "enum": [
        "EMAIL"
      ]
    },
    "Watchlist-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "required": [
            "type",
            "isSignificant"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique id of this watchlist.",
              "example": "guid"
            },
            "name": {
              "type": "string",
              "description": "Name of the watchlist.",
              "example": "Development Department"
            },
            "type": {
              "description": "Type of watchlist.",
              "example": "DEPARTING_EMPLOYEE",
              "$ref": "#/definitions/WatchlistType-alerts"
            },
            "isSignificant": {
              "type": "boolean",
              "description": "Indicates whether the watchlist was part of the triggering rule's criteria.",
              "example": "true"
            }
          }
        }
      ]
    },
    "WatchlistType-alerts": {
      "type": "string",
      "description": "Type of watchlist.",
      "example": "DEPARTING_EMPLOYEE",
      "x-enumNames": [
        "WatchlistTypeUnspecified",
        "ContractEmployee",
        "DepartingEmployee",
        "ElevatedAccessPrivileges",
        "FlightRisk",
        "HighImpactEmployee",
        "NewEmployee",
        "PerformanceConcerns",
        "PoorSecurityPractices",
        "SuspiciousSystemActivity"
      ],
      "enum": [
        "CONTRACT_EMPLOYEE",
        "DEPARTING_EMPLOYEE",
        "ELEVATED_ACCESS_PRIVILEGES",
        "FLIGHT_RISK",
        "HIGH_IMPACT_EMPLOYEE",
        "NEW_EMPLOYEE",
        "PERFORMANCE_CONCERNS",
        "POOR_SECURITY_PRACTICES",
        "SUSPICIOUS_SYSTEM_ACTIVITY",
        "WATCHLIST_TYPE_UNSPECIFIED"
      ]
    },
    "Education-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "required": [
            "messagingMethod",
            "isAutoDismissAlertEnabled"
          ],
          "properties": {
            "lessonId": {
              "type": "string",
              "description": "Unique id of this response lesson.",
              "example": "guid"
            },
            "messagingMethod": {
              "description": "Type of messaging method.",
              "example": "EMAIL",
              "$ref": "#/definitions/MessagingMethod-alerts"
            },
            "isAutoDismissAlertEnabled": {
              "type": "boolean",
              "description": "True if the alert is configured to auto-dismiss upon response.",
              "example": "true"
            }
          }
        }
      ]
    },
    "MessagingMethod-alerts": {
      "type": "string",
      "description": "Type of messaging method.",
      "example": "EMAIL",
      "x-enumNames": [
        "Email",
        "Slack",
        "Teams"
      ],
      "enum": [
        "EMAIL",
        "SLACK",
        "TEAMS"
      ]
    },
    "QueryProblem-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "badFilter": {
              "type": "string",
              "description": "The filter that caused the issue."
            },
            "type": {
              "description": "The type of query problem.",
              "$ref": "#/definitions/ProblemType-alerts"
            }
          }
        }
      ]
    },
    "ProblemType-alerts": {
      "type": "string",
      "description": "Potential issues when running a query on alerts.",
      "example": "SearchFailed",
      "x-enumNames": [
        "IllegalValue",
        "IllegalOperator",
        "MustBeEmailAddress",
        "MaxLengthExceeded",
        "InvalidPageSize",
        "InvalidPageNumber",
        "MissingValue",
        "MissingGroups",
        "MissingFilters",
        "MaxFiltersExceeded",
        "SearchFailed"
      ],
      "enum": [
        "IllegalValue",
        "IllegalOperator",
        "MustBeEmailAddress",
        "MaxLengthExceeded",
        "InvalidPageSize",
        "InvalidPageNumber",
        "MissingValue",
        "MissingGroups",
        "MissingFilters",
        "MaxFiltersExceeded",
        "SearchFailed"
      ]
    },
    "SearchQuery-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "required": [
            "pgSize",
            "pgNum",
            "tenantId",
            "groupClause",
            "srtKey"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 40,
              "example": "MyExampleTenant"
            },
            "groups": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FilterGroup-alerts"
              }
            },
            "groupClause": {
              "type": "string",
              "description": "The clause to use when combining group filters.  Must be AND/OR.",
              "example": "OR"
            },
            "pgSize": {
              "type": "integer",
              "description": "The number of items to return in one request.  Value must be between 0 and 100.",
              "format": "int32",
              "maximum": 500,
              "example": "20"
            },
            "pgNum": {
              "type": "integer",
              "description": "The page number to return. Page 0 is the first page of results.",
              "format": "int32",
              "example": "0"
            },
            "srtKey": {
              "type": "string",
              "description": "The alert attribute to sort by.  Value must be one of: AlertId, TenantId, Type, Name, Description, Actor, ActorId, Target, RiskSeverity, RuleSource, CreatedAt, Observations, Notes, Watchlists, HasAuthSignificantWatchlist, State, StateLastModifiedAt, StateLastModifiedBy, LastModifiedTime, LastModifiedBy, RuleId, Education, Severity",
              "example": "CreatedAt"
            },
            "srtDirection": {
              "$ref": "#/definitions/SortDirection-alerts"
            }
          }
        }
      ]
    },
    "SortDirection-alerts": {
      "type": "string",
      "description": "The sort direction applied to the returned page of alerts.",
      "default": "ASC",
      "example": "DESC",
      "x-enumNames": [
        "Asc",
        "Desc"
      ],
      "enum": [
        "ASC",
        "DESC"
      ]
    },
    "AlertDetailsResponse-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "properties": {
            "alerts": {
              "type": "array",
              "description": "The alerts returned by the details query.",
              "items": {
                "$ref": "#/definitions/AlertDetails-alerts"
              }
            }
          }
        }
      ]
    },
    "AlertDetails-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/AlertSummary-alerts"
        },
        {
          "type": "object",
          "properties": {
            "observations": {
              "type": "array",
              "description": "Observation list included on the alert.",
              "items": {
                "$ref": "#/definitions/Observation-alerts"
              }
            },
            "note": {
              "description": "Most recent note added to the alert.",
              "$ref": "#/definitions/Note-alerts"
            }
          }
        }
      ]
    },
    "Observation-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "required": [
            "observedAt"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "Id of given observation.",
              "example": "uniqueObservationId"
            },
            "observedAt": {
              "type": "string",
              "description": "Timestamp when the activity was first observed.",
              "format": "date-time",
              "example": "2020-02-19T01:57:45.006683Z"
            },
            "lastObservedAt": {
              "type": "string",
              "description": "Timestamp when the activity was last observed.",
              "format": "date-time",
              "example": "2020-02-19T01:57:45.006683Z"
            },
            "type": {
              "type": "string",
              "description": "The type of observation data recorded.",
              "example": "FedCloudSharePermissions"
            },
            "data": {
              "type": "string",
              "description": "The JSON formatted observation data rolled into one aggregation.",
              "example": "{\"type$\":\"OBSERVED_CLOUD_SHARE_ACTIVITY\",\"id\":\"exampleId\",\"sources\":[\"OneDrive\"],\"exposureTypes\":[\"PublicLinkShare\"],\"firstActivityAt\":\"2020-02-19T01:50:00.0000000Z\",\"lastActivityAt\":\"2020-02-19T01:55:00.0000000Z\",\"fileCount\":2,\"totalFileSize\":200,\"fileCategories\":[{\"type$\":\"OBSERVED_FILE_CATEGORY\",\"category\":\"Document\",\"fileCount\":2,\"totalFileSize\":53,\"isSignificant\":false}],\"outsideTrustedDomainsEmailsCount\":0,\"outsideTrustedDomainsTotalDomainCount\":0,\"outsideTrustedDomainsTotalDomainCountTruncated\":false}"
            }
          }
        }
      ]
    },
    "Note-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "required": [
            "lastModifiedAt"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique id of the note.",
              "example": "noteId"
            },
            "lastModifiedAt": {
              "type": "string",
              "description": "Timestamp of when the note was last modified.",
              "format": "date-time",
              "example": "2020-02-19T01:57:45.006683Z"
            },
            "lastModifiedBy": {
              "type": "string",
              "description": "User who last modified the note.",
              "example": "exampleUsername"
            },
            "message": {
              "type": "string",
              "description": "The note itself.",
              "example": "This is a note."
            }
          }
        }
      ]
    },
    "DetailsQuery-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "required": [
            "alertIds"
          ],
          "properties": {
            "alertIds": {
              "type": "array",
              "description": "The unique identifiers representing the alerts you want to act upon.",
              "maxItems": 100,
              "example": [
                "ExampleAlertId1",
                "ExampleAlertId2"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "RuleMetadataSearchResponse-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "required": [
            "totalCount"
          ],
          "properties": {
            "ruleMetadata": {
              "type": "array",
              "description": "List of rules that are returned.",
              "items": {
                "$ref": "#/definitions/RuleMetadata-alerts"
              }
            },
            "totalCount": {
              "type": "integer",
              "description": "The number of rules that match the given query.",
              "format": "int64",
              "example": "3"
            },
            "problems": {
              "type": "array",
              "description": "Potential issues that were hit while trying to run the query.",
              "example": [],
              "items": {
                "$ref": "#/definitions/QueryProblem-alerts"
              }
            }
          }
        }
      ]
    },
    "RuleMetadata-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/ObserverRuleMetadataEssentials-alerts"
        },
        {
          "type": "object",
          "required": [
            "createdAt"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "Id of the rule.",
              "example": "UniqueRuleId"
            },
            "createdBy": {
              "type": "string",
              "description": "Username of the individual who created the rule.",
              "example": "UserWhoCreatedTheRule"
            },
            "createdAt": {
              "type": "string",
              "description": "Timestamp of when the rule was created.",
              "format": "date-time",
              "example": "2020-02-19T01:57:45.006683Z"
            }
          }
        }
      ]
    },
    "ObserverRuleMetadataEssentials-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/ObserverRuleMetadata-alerts"
        },
        {
          "type": "object",
          "required": [
            "type",
            "tenantId"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 40,
              "example": "MyExampleTenant"
            },
            "observerRuleId": {
              "type": "string",
              "description": "Id of the rule in the observer.",
              "example": "UniqueRuleId"
            },
            "type": {
              "description": "Rule type of the rule.",
              "$ref": "#/definitions/RuleType-alerts"
            }
          }
        }
      ]
    },
    "ObserverRuleMetadata-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/AuditInfo-alerts"
        },
        {
          "type": "object",
          "required": [
            "isEnabled"
          ],
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the rule.",
              "example": "My Removable Media Exfiltration Rule"
            },
            "description": {
              "type": "string",
              "description": "The description of the rule.",
              "example": "Will generate alerts when files moved to USB."
            },
            "severity": {
              "description": "The static severity of the rule (deprecated).",
              "$ref": "#/definitions/SeverityRating-alerts"
            },
            "isSystem": {
              "type": "boolean",
              "description": "Boolean indicating if the rule was created from another Code42 Application.",
              "example": "FALSE"
            },
            "isEnabled": {
              "type": "boolean",
              "description": "Boolean indicating if the rule is enabled to trigger alerts.",
              "example": "TRUE"
            },
            "ruleSource": {
              "type": "string",
              "description": "The source of the rule.  Will be one of [DepartingEmployee, Alerting, HighRiskEmployee]",
              "example": "Alerting"
            },
            "ruleWarning": {
              "description": "Enum flag indicating there is a warning associated with the given rule.",
              "$ref": "#/definitions/RuleWarning-alerts"
            }
          }
        }
      ]
    },
    "RuleWarning-alerts": {
      "type": "string",
      "description": "Enum flag indicating there is a warning associated with the given rule.",
      "example": "DISABLED_DUE_TO_LAST_INDICATOR_REMOVED",
      "x-enumNames": [
        "DisabledDueToLastIndicatorRemoved"
      ],
      "enum": [
        "DISABLED_DUE_TO_LAST_INDICATOR_REMOVED"
      ]
    },
    "AuditInfo-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "required": [
            "modifiedAt"
          ],
          "properties": {
            "modifiedBy": {
              "type": "string",
              "description": "Username of the individual who last modified the rule.",
              "example": "UserWhoMostRecentlyModifiedTheRule"
            },
            "modifiedAt": {
              "type": "string",
              "description": "Timestamp of when the rule was last modified.",
              "format": "date-time",
              "example": "2020-02-19T01:57:45.006683Z"
            }
          }
        }
      ]
    },
    "RuleMetadataSearchQuery-alerts": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alerts"
        },
        {
          "type": "object",
          "required": [
            "pgSize",
            "pgNum",
            "tenantId",
            "groupClause",
            "srtKey"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 40,
              "example": "MyExampleTenant"
            },
            "groups": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FilterGroup-alerts"
              }
            },
            "groupClause": {
              "type": "string",
              "description": "The clause to use when combining group filters.  Must be AND/OR.",
              "example": "AND"
            },
            "pgSize": {
              "type": "integer",
              "description": "The number of items to return in one request.  Value must be between 0 and 100.",
              "format": "int32",
              "maximum": 500,
              "example": "20"
            },
            "pgNum": {
              "type": "integer",
              "description": "The page number to return. Page 0 is the first page of results.",
              "format": "int32",
              "example": "0"
            },
            "srtKey": {
              "type": "string",
              "description": "The rule metadata attribute to sort by.  Value must be one of: RuleMetadataId, TenantId, ObserverRuleId, Type, Name, Description, IsEnabled, ModifiedAt, ModifiedBy, CreatedAt, CreatedBy, RuleWarning, LogString",
              "example": "CreatedAt"
            },
            "srtDirection": {
              "$ref": "#/definitions/SortDirection-alerts"
            }
          }
        }
      ]
    },
    "DateRange": {
      "description": "Finds events whose timestamp is within the given range, inclusive of endpoints.",
      "properties": {
        "endTime": {
          "format": "date-time",
          "type": "string"
        },
        "startTime": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ExportRequest": {
      "properties": {
        "actorIds": {
          "description": "Finds events whose actor_id is one of the given ids. An actor may be a human user or a service.",
          "example": "user@example.com",
          "items": {
            "description": "Finds events whose actor_id is one of the given ids. An actor may be a human user or a service.",
            "example": "user@example.com",
            "type": "string"
          },
          "type": "array"
        },
        "actorIpAddresses": {
          "description": "Finds events whose actor_ip_address is one of the given IP addresses.",
          "example": "127.0.0.1",
          "items": {
            "description": "Finds events whose actor_ip_address is one of the given IP addresses.",
            "example": "127.0.0.1",
            "type": "string"
          },
          "type": "array"
        },
        "actorNames": {
          "description": "Finds events whose actor_name is one of the given names. An actor may be a human user or a service.",
          "example": "ExampleName",
          "items": {
            "description": "Finds events whose actor_name is one of the given names. An actor may be a human user or a service.",
            "example": "ExampleName",
            "type": "string"
          },
          "type": "array"
        },
        "dateRange": {
          "$ref": "#/definitions/DateRange"
        },
        "eventTypes": {
          "description": "Finds events whose type is one of the given types.",
          "example": "support_user_access_disabled",
          "items": {
            "description": "Finds events whose type is one of the given types.",
            "example": "support_user_access_disabled",
            "title": "Some examples: support_user_access_disabled, alert_note_edited, api_client_created, logged_in, case_archived, account_name_added, file_download, search_issued, federation_created, user_activated, risk_profile_cloud_alias_added",
            "type": "string"
          },
          "title": "Some examples: support_user_access_disabled, alert_note_edited, api_client_created, logged_in, case_archived, account_name_added, file_download, search_issued, federation_created, user_activated, risk_profile_cloud_alias_added",
          "type": "array"
        },
        "resourceIds": {
          "description": "Filters events that match resource_id",
          "example": 1523,
          "items": {
            "description": "Filters events that match resource_id",
            "example": "1523",
            "type": "string"
          },
          "type": "array"
        },
        "userTypes": {
          "description": "Filters events that match actor type",
          "enum": [
            "User",
            "Support_User",
            "Api_Client",
            "System",
            "Unknown"
          ],
          "example": "User",
          "items": {
            "description": "Filters events that match actor type",
            "enum": [
              "User",
              "Support_User",
              "Api_Client",
              "System",
              "Unknown"
            ],
            "example": "User",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "RpcExportResponse": {
      "properties": {
        "downloadToken": {
          "description": "Download token to execute an export, acquired from the export api.",
          "example": "07FIbJogTJ2aHTBcyreAbYOvsd0FlEKuLyNumVvkbOQ=",
          "type": "string"
        }
      },
      "required": [
        "downloadToken"
      ],
      "type": "object"
    },
    "RpcSearchResponse": {
      "properties": {
        "events": {
          "description": "A list of zero or more events matching the given criteria.",
          "items": {
            "additionalProperties": {
              "description": "A list of zero or more events matching the given criteria.",
              "type": "object"
            },
            "description": "A list of zero or more events matching the given criteria.",
            "type": "object"
          },
          "type": "array"
        },
        "paginationRangeEndIndex": {
          "description": "The index of the last result returned, in relation to total results found",
          "example": 62,
          "format": "int64",
          "type": "integer"
        },
        "paginationRangeStartIndex": {
          "description": "The index of the first result returned, in relation to total results found",
          "example": 0,
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "events",
        "paginationRangeEndIndex",
        "paginationRangeStartIndex"
      ],
      "type": "object"
    },
    "RpcSearchResultsCountResponse": {
      "properties": {
        "totalResultCount": {
          "description": "The total number of results found by this search",
          "example": 104,
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "totalResultCount"
      ],
      "type": "object"
    },
    "SearchAuditLogBody": {
      "properties": {
        "actorIds": {
          "description": "Finds events whose actor_id is one of the given ids. An actor may be a human user or a service.",
          "example": "user@example.com",
          "items": {
            "description": "Finds events whose actor_id is one of the given ids. An actor may be a human user or a service.",
            "example": "user@example.com",
            "type": "string"
          },
          "type": "array"
        },
        "actorIpAddresses": {
          "description": "Finds events whose actor_ip_address is one of the given IP addresses.",
          "example": "127.0.0.1",
          "items": {
            "description": "Finds events whose actor_ip_address is one of the given IP addresses.",
            "example": "127.0.0.1",
            "type": "string"
          },
          "type": "array"
        },
        "actorNames": {
          "description": "Finds events whose actor_name is one of the given names. An actor may be a human user or a service.",
          "example": "ExampleName",
          "items": {
            "description": "Finds events whose actor_name is one of the given names. An actor may be a human user or a service.",
            "example": "ExampleName",
            "type": "string"
          },
          "type": "array"
        },
        "dateRange": {
          "$ref": "#/definitions/DateRange"
        },
        "eventTypes": {
          "description": "Finds events whose type is one of the given types.",
          "example": "support_user_access_disabled",
          "items": {
            "description": "Finds events whose type is one of the given types.",
            "example": "support_user_access_disabled",
            "title": "Some examples: support_user_access_disabled, alert_note_edited, api_client_created, logged_in, case_archived, account_name_added, file_download, search_issued, federation_created, user_activated, risk_profile_cloud_alias_added",
            "type": "string"
          },
          "title": "Some examples: support_user_access_disabled, alert_note_edited, api_client_created, logged_in, case_archived, account_name_added, file_download, search_issued, federation_created, user_activated, risk_profile_cloud_alias_added",
          "type": "array"
        },
        "page": {
          "default": 0,
          "description": "Which page of events to view.",
          "format": "int32",
          "type": "integer"
        },
        "pageSize": {
          "default": 100,
          "description": "How many elements to return on each page.",
          "format": "int32",
          "type": "integer"
        },
        "resourceIds": {
          "description": "Filters events that match resource_id.",
          "example": 1523,
          "items": {
            "description": "Filters events that match resource_id.",
            "example": "1523",
            "type": "string"
          },
          "type": "array"
        },
        "userTypes": {
          "description": "Filters events that match actor type.",
          "enum": [
            "USER",
            "SUPPORT_USER",
            "API_CLIENT",
            "SYSTEM",
            "UNKNOWN"
          ],
          "example": "User",
          "items": {
            "description": "Filters events that match actor type.",
            "enum": [
              "USER",
              "SUPPORT_USER",
              "API_CLIENT",
              "SYSTEM",
              "UNKNOWN"
            ],
            "example": "User",
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "page",
        "pageSize"
      ],
      "type": "object"
    },
    "AcquiredFrom-file-events": {
      "properties": {
        "agentTimestamp": {
          "example": "2020-10-27T15:16:05.369203Z",
          "format": "date-time",
          "title": "Date and time that the Code42 service on the device detected an event; based on the device’s system clock and reported in Coordinated Universal Time (UTC).",
          "type": "string",
          "x-nullable": true
        },
        "eventAction": {
          "example": "file-downloaded",
          "title": "The type of file event observed. For example: file-modified, application-read, removable-media-created.",
          "type": "string",
          "x-nullable": true
        },
        "eventId": {
          "example": "0_147e9445-2f30-4a91-8b2a-9455332e880a_973435567569502913_986467523038446097_163",
          "title": "The unique identifier for the event.",
          "type": "string",
          "x-nullable": true
        },
        "fileName": {
          "example": "example.txt",
          "title": "The name of the file, including the file extension.",
          "type": "string",
          "x-nullable": true
        },
        "git": {
          "$ref": "#/definitions/AcquiredFromGit-file-events"
        },
        "md5": {
          "example": "6123bbce7f3937667a368bbb9f3d79ce",
          "title": "The MD5 hash of the file contents.",
          "type": "string",
          "x-nullable": true
        },
        "sourceAccountName": {
          "title": "For cloud sync apps installed on user devices, the name of the cloud account where the event was observed. This can help identify if the activity occurred in a business or personal account.",
          "type": "string",
          "x-nullable": true
        },
        "sourceAccountType": {
          "title": "For cloud sync apps installed on user devices, the type of account where the event was observed. For example, 'BUSINESS' or 'PERSONAL'.",
          "type": "string",
          "x-nullable": true
        },
        "sourceCategory": {
          "example": "Social Media",
          "title": "General category of where the file originated. For example: Cloud Storage, Email, Social Media.",
          "type": "string",
          "x-nullable": true
        },
        "sourceDomains": {
          "example": "example.com",
          "items": {
            "example": "example.com",
            "title": "The domain section of the URLs reported in file.acquiredFrom.tabs.url.",
            "type": "string"
          },
          "title": "The domain section of the URLs reported in file.acquiredFrom.tabs.url.",
          "type": "array",
          "x-nullable": true
        },
        "sourceName": {
          "example": "Mari's MacBook",
          "title": "The name reported by the device's operating system.  This may be different than the device name in the Code42 console.",
          "type": "string",
          "x-nullable": true
        },
        "sourceUser": {
          "$ref": "#/definitions/AcquiredFromSourceUser-file-events"
        },
        "tabs": {
          "items": {
            "$ref": "#/definitions/Tab-file-events"
          },
          "title": "Metadata about the browser tab source.",
          "type": "array",
          "x-nullable": true
        },
        "userEmail": {
          "example": "cody@example.com",
          "title": "The Code42 username used to sign in to the Code42 app on the device (for endpoint events) or the cloud service username of the person who caused the event (for cloud events).",
          "type": "string",
          "x-nullable": true
        }
      },
      "title": "List of other events associated with this file. This can help determine the origin of the file.",
      "type": "object"
    },
    "AcquiredFromGit-file-events": {
      "properties": {
        "repositoryEmail": {
          "title": "The email address specified by the user who performed the Git event. This is a user-defined value and may differ from the credentials used to sign in to Git.",
          "type": "string",
          "x-nullable": true
        },
        "repositoryUri": {
          "title": "Uniform Resource Identifier (URI) for the Git repository.",
          "type": "string",
          "x-nullable": true
        },
        "repositoryUser": {
          "title": "The username specified by the user who performed the Git event. This is a user-defined value and may differ from the credentials used to sign in to Git.",
          "type": "string",
          "x-nullable": true
        }
      },
      "title": "Metadata about the Git activity associated with this event.",
      "type": "object"
    },
    "AcquiredFromSourceUser-file-events": {
      "properties": {
        "email": {
          "example": [
            "first.last@example.com",
            "first_last_example_com"
          ],
          "items": {
            "example": "[\"first.last@example.com\",\"first_last_example_com\"]",
            "title": "For endpoint events where a file in cloud storage is synced to a device, the email address of the user logged in to the cloud storage provider.",
            "type": "string"
          },
          "title": "For endpoint events where a file in cloud storage is synced to a device, the email address of the user logged in to the cloud storage provider.",
          "type": "array",
          "x-nullable": true
        }
      },
      "title": "Metadata about the source user.",
      "type": "object"
    },
    "Destination-file-events": {
      "properties": {
        "accountName": {
          "title": "For cloud sync apps installed on user devices, the name of the cloud account where the event was observed. This can help identify if the activity occurred in a business or personal account.",
          "type": "string",
          "x-nullable": true
        },
        "accountType": {
          "example": "BUSINESS",
          "title": "For cloud sync apps installed on user devices, the type of account where the event was observed. For example, 'BUSINESS' or 'PERSONAL'.",
          "type": "string",
          "x-nullable": true
        },
        "category": {
          "example": "Social Media",
          "title": "General category of where the file originated. For example: Cloud Storage, Email, Social Media.",
          "type": "string",
          "x-nullable": true
        },
        "domains": {
          "items": {
            "title": "The domain section of the URLs reported in destination.tabs.url.",
            "type": "string"
          },
          "title": "The domain section of the URLs reported in destination.tabs.url.",
          "type": "array"
        },
        "email": {
          "$ref": "#/definitions/DestinationEmail-file-events"
        },
        "ip": {
          "example": "127.0.0.1",
          "title": "The external IP address of the user's device.",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "example": "Mari's MacBook",
          "title": "The name reported by the device's operating system.  This may be different than the device name in the Code42 console.",
          "type": "string",
          "x-nullable": true
        },
        "operatingSystem": {
          "example": "Windows 10",
          "title": "The operating system of the destination device.",
          "type": "string",
          "x-nullable": true
        },
        "printJobName": {
          "example": "printer.exe",
          "title": "For print events, the name of the print job, as reported by the user's device.",
          "type": "string",
          "x-nullable": true
        },
        "printerName": {
          "example": "OfficeJet",
          "title": "For print events, the name of the printer the job was sent to.",
          "type": "string",
          "x-nullable": true
        },
        "privateIp": {
          "example": [
            "127.0.0.1",
            "127.0.0.2"
          ],
          "items": {
            "example": "[\"127.0.0.1\",\"127.0.0.2\"]",
            "title": "The IP address of the user's device on your internal network, including Network interfaces, Virtual Network Interface controllers (NICs), and Loopback/non-routable addresses.",
            "type": "string"
          },
          "title": "The IP address of the user's device on your internal network, including Network interfaces, Virtual Network Interface controllers (NICs), and Loopback/non-routable addresses.",
          "type": "array"
        },
        "remoteHostname": {
          "title": "For events where a file transfer tool was used, the destination hostname.",
          "type": "string",
          "x-nullable": true
        },
        "removableMedia": {
          "$ref": "#/definitions/RemovableMedia-file-events"
        },
        "tabs": {
          "items": {
            "$ref": "#/definitions/Tab-file-events"
          },
          "title": "Metadata about the browser tab destination.",
          "type": "array"
        },
        "user": {
          "$ref": "#/definitions/DestinationUser-file-events"
        }
      },
      "required": [
        "domains",
        "email",
        "privateIp",
        "removableMedia",
        "tabs",
        "user"
      ],
      "title": "Metadata about the destination of the file event.",
      "type": "object"
    },
    "DestinationEmail-file-events": {
      "properties": {
        "recipients": {
          "example": [
            "cody@example.com",
            "theboss@example.com"
          ],
          "items": {
            "example": "[\"cody@example.com\",\"theboss@example.com\"]",
            "title": "The email addresses of those who received the email. Includes the To, Cc, and Bcc recipients.",
            "type": "string"
          },
          "title": "The email addresses of those who received the email. Includes the To, Cc, and Bcc recipients.",
          "type": "array",
          "x-nullable": true
        },
        "subject": {
          "example": "Important business documents",
          "title": "The subject of the email message.",
          "type": "string",
          "x-nullable": true
        }
      },
      "title": "Metadata about the destination email.",
      "type": "object"
    },
    "DestinationUser-file-events": {
      "properties": {
        "email": {
          "example": [
            "first.last@example.com",
            "first_last_example_com"
          ],
          "items": {
            "example": "[\"first.last@example.com\",\"first_last_example_com\"]",
            "title": "For endpoint events where a file in cloud storage is synced to a device, the email address of the user logged in to the cloud storage provider. For cloud events, the email addresses of users added as sharing recipients. In some case, OneDrive events may return multiple values, but this is often the same username formatted in different ways.",
            "type": "string"
          },
          "title": "For endpoint events where a file in cloud storage is synced to a device, the email address of the user logged in to the cloud storage provider. For cloud events, the email addresses of users added as sharing recipients. In some case, OneDrive events may return multiple values, but this is often the same username formatted in different ways.",
          "type": "array"
        }
      },
      "required": [
        "email"
      ],
      "title": "Metadata about the destination user.",
      "type": "object"
    },
    "Event-file-events": {
      "properties": {
        "action": {
          "example": "file-downloaded",
          "title": "The type of file event observed. For example: file-modified, application-read, removable-media-created.",
          "type": "string",
          "x-nullable": true
        },
        "detectorDisplayName": {
          "title": "Indicates the name you provided when the cloud data connection was initially configured in the Code42 console.",
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "example": "0_147e9445-2f30-4a91-8b2a-9455332e880a_973435567569502913_986467523038446097_163",
          "title": "The unique identifier for the event.",
          "type": "string"
        },
        "ingested": {
          "example": "2020-10-27T15:15:05.369203Z",
          "format": "date-time",
          "title": "Date and time the event was initially received by Code42; timestamp is based on the Code42 server system clock and reported in Coordinated Universal Time (UTC).",
          "type": "string"
        },
        "inserted": {
          "example": "2020-10-27T15:16:05.369203Z",
          "format": "date-time",
          "title": "Date and time the event processing is completed by Code42; timestamp is based on the Code42 server system clock and reported in Coordinated Universal Time (UTC). Typically occurs very soon after the event.ingested time.",
          "type": "string",
          "x-nullable": true
        },
        "observer": {
          "example": "Endpoint",
          "title": "The data source that captured the file event. For example: GoogleDrive, Office365, Salesforce.",
          "type": "string",
          "x-nullable": true
        },
        "shareType": {
          "example": [
            "SharedViaLink"
          ],
          "items": {
            "example": "[\"SharedViaLink\"]",
            "title": "Sharing types added by this event.",
            "type": "string"
          },
          "title": "Sharing types added by this event.",
          "type": "array"
        },
        "vector": {
          "example": "GIT_PUSH",
          "title": "The method of file movement. For example: UPLOADED, DOWNLOADED, EMAILED.",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "id",
        "ingested",
        "shareType"
      ],
      "title": "Summary information about the event.",
      "type": "object"
    },
    "ExportRequestSearchTermV1-file-events": {
      "properties": {
        "columns": {
          "example": [
            "eventId",
            "eventType"
          ],
          "items": {
            "enum": [
              "eventId",
              "eventType",
              "eventTimestamp",
              "insertionTimestamp",
              "filePath",
              "fileName",
              "fileType",
              "fileCategory",
              "fileCategoryByBytes",
              "fileCategoryByExtension",
              "fileSize",
              "fileOwner",
              "md5Checksum",
              "sha256Checksum",
              "createTimestamp",
              "modifyTimestamp",
              "deviceUserName",
              "deviceUid",
              "userUid",
              "osHostName",
              "domainName",
              "publicIpAddress",
              "privateIpAddresses",
              "actor",
              "directoryId",
              "source",
              "url",
              "shared",
              "sharedWith",
              "sharingTypeAdded",
              "cloudDriveId",
              "detectionSourceAlias",
              "fileId",
              "exposure",
              "processOwner",
              "processName",
              "windowTitle",
              "tabUrl",
              "tabTitles",
              "tabTitleErrors",
              "tabUrls",
              "tabUrlErrors",
              "sourceTabTitles",
              "sourceTabTitleErrors",
              "sourceTabUrls",
              "sourceTabUrlErrors",
              "fileClassificationVendors",
              "fileClassificationValues",
              "removableMediaVendor",
              "removableMediaName",
              "removableMediaSerialNumber",
              "removableMediaCapacity",
              "removableMediaBusType",
              "removableMediaMediaName",
              "removableMediaVolumeName",
              "removableMediaPartitionId",
              "syncDestination",
              "syncDestinationUsername",
              "emailDlpPolicyNames",
              "emailSubject",
              "emailSender",
              "emailFrom",
              "emailRecipients",
              "outsideActiveHours",
              "mimeTypeByBytes",
              "mimeTypeByExtension",
              "mimeTypeMismatch",
              "printJobName",
              "printerName",
              "printedFilesBackupPath",
              "remoteActivity",
              "trusted",
              "trustReason",
              "operatingSystemUser",
              "destinationCategory",
              "destinationName",
              "sourceCategory",
              "sourceName",
              "riskScore",
              "riskSeverity",
              "riskIndicatorNames",
              "riskIndicatorWeights",
              "reportName",
              "reportDescription",
              "reportColumnHeaders",
              "reportRecordCount",
              "reportType",
              "reportId"
            ],
            "example": "eventId",
            "title": "Which columns to include in the output. If none is provided, all available columnswill be output in an unspecified, not-guaranteed order.",
            "type": "string"
          },
          "title": "Which columns to include in the output. If none is provided, all available columnswill be output in an unspecified, not-guaranteed order.",
          "type": "array",
          "x-nullable": true
        },
        "groupClause": {
          "enum": [
            "AND",
            "OR"
          ],
          "example": "OR",
          "title": "Grouping clause for any specified groups.  Default is `AND`.",
          "type": "string",
          "x-nullable": true
        },
        "groups": {
          "items": {
            "$ref": "#/definitions/FilterGroupSearchTermV1-file-events"
          },
          "title": "One or more FilterGroups to be combined in a query.",
          "type": "array"
        },
        "srtDir": {
          "enum": [
            "asc",
            "desc"
          ],
          "example": "asc",
          "title": "Sort direction.  Default is `desc`.",
          "type": "string",
          "x-nullable": true
        },
        "srtKey": {
          "enum": [
            "eventId",
            "eventType",
            "eventTimestamp",
            "insertionTimestamp",
            "filePath",
            "fileName",
            "fileType",
            "fileCategory",
            "fileCategoryByBytes",
            "fileCategoryByExtension",
            "fileSize",
            "fileOwner",
            "md5Checksum",
            "sha256Checksum",
            "createTimestamp",
            "modifyTimestamp",
            "deviceUserName",
            "deviceUid",
            "userUid",
            "osHostName",
            "domainName",
            "publicIpAddress",
            "privateIpAddresses",
            "actor",
            "directoryId",
            "source",
            "url",
            "shared",
            "sharedWith",
            "sharingTypeAdded",
            "cloudDriveId",
            "detectionSourceAlias",
            "fileId",
            "exposure",
            "processOwner",
            "processName",
            "windowTitle",
            "tabUrl",
            "tabTitles",
            "tabTitleErrors",
            "tabUrls",
            "tabUrlErrors",
            "sourceTabTitles",
            "sourceTabTitleErrors",
            "sourceTabUrls",
            "sourceTabUrlErrors",
            "fileClassificationVendors",
            "fileClassificationValues",
            "removableMediaVendor",
            "removableMediaName",
            "removableMediaSerialNumber",
            "removableMediaCapacity",
            "removableMediaBusType",
            "removableMediaMediaName",
            "removableMediaVolumeName",
            "removableMediaPartitionId",
            "syncDestination",
            "syncDestinationUsername",
            "emailDlpPolicyNames",
            "emailSubject",
            "emailSender",
            "emailFrom",
            "emailRecipients",
            "outsideActiveHours",
            "mimeTypeByBytes",
            "mimeTypeByExtension",
            "mimeTypeMismatch",
            "printJobName",
            "printerName",
            "printedFilesBackupPath",
            "remoteActivity",
            "trusted",
            "trustReason",
            "operatingSystemUser",
            "destinationCategory",
            "destinationName",
            "sourceCategory",
            "sourceName",
            "riskScore",
            "riskSeverity",
            "riskIndicatorNames",
            "riskIndicatorWeights",
            "reportName",
            "reportDescription",
            "reportColumnHeaders",
            "reportRecordCount",
            "reportType",
            "reportId"
          ],
          "example": "eventId",
          "title": "Search term for sorting.",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "groups"
      ],
      "type": "object"
    },
    "ExportRequestSearchTermV2-file-events": {
      "properties": {
        "columns": {
          "example": [
            "@timestamp",
            "event.id"
          ],
          "items": {
            "enum": [
              "@timestamp",
              "event.id",
              "event.inserted",
              "event.ingested",
              "event.action",
              "event.shareType",
              "event.observer",
              "event.detectorDisplayName",
              "event.vector",
              "user.email",
              "user.id",
              "user.deviceUid",
              "file.name",
              "file.originalName",
              "file.directory",
              "file.originalDirectory",
              "file.category",
              "file.mimeTypeByBytes",
              "file.categoryByBytes",
              "file.mimeTypeByExtension",
              "file.categoryByExtension",
              "file.sizeInBytes",
              "file.owner",
              "file.created",
              "file.modified",
              "file.hash.md5",
              "file.hash.sha256",
              "file.hash.md5Error",
              "file.hash.sha256Error",
              "file.id",
              "file.url",
              "file.directoryId",
              "file.cloudDriveId",
              "file.classifications.value",
              "file.classifications.vendor",
              "file.changeType",
              "file.archiveId",
              "file.parentArchiveId",
              "file.passwordProtected",
              "report.id",
              "report.name",
              "report.description",
              "report.headers",
              "report.count",
              "report.type",
              "source.category",
              "source.name",
              "source.user.email",
              "source.domain",
              "source.ip",
              "source.privateIp",
              "source.operatingSystem",
              "source.email.sender",
              "source.email.from",
              "source.remoteHostname",
              "source.removableMedia.vendor",
              "source.removableMedia.mediaName",
              "source.removableMedia.serialNumber",
              "source.removableMedia.capacity",
              "source.removableMedia.busType",
              "source.removableMedia.name",
              "source.removableMedia.volumeName",
              "source.removableMedia.partitionId",
              "source.tabs.title",
              "source.tabs.titleError",
              "source.tabs.url",
              "source.tabs.urlError",
              "source.accountName",
              "source.accountType",
              "source.domains",
              "destination.category",
              "destination.name",
              "destination.user.email",
              "destination.ip",
              "destination.privateIp",
              "destination.operatingSystem",
              "destination.printJobName",
              "destination.printerName",
              "destination.printedFilesBackupPath",
              "destination.email.recipients",
              "destination.email.subject",
              "destination.removableMedia.vendor",
              "destination.removableMedia.mediaName",
              "destination.removableMedia.serialNumber",
              "destination.removableMedia.capacity",
              "destination.removableMedia.busType",
              "destination.removableMedia.name",
              "destination.removableMedia.volumeName",
              "destination.removableMedia.partitionId",
              "destination.tabs.title",
              "destination.tabs.url",
              "destination.tabs.titleError",
              "destination.tabs.urlError",
              "destination.accountName",
              "destination.accountType",
              "destination.domains",
              "destination.remoteHostname",
              "process.executable",
              "process.owner",
              "process.extension.browser",
              "process.extension.version",
              "process.extension.loggedInUser",
              "risk.score",
              "risk.severity",
              "risk.indicators.name",
              "risk.indicators.id",
              "risk.indicators.weight",
              "risk.trusted",
              "risk.trustReason",
              "risk.untrustedValues.accountNames",
              "risk.untrustedValues.domains",
              "risk.untrustedValues.gitRepositoryUris",
              "risk.untrustedValues.slackWorkspaces",
              "risk.untrustedValues.urlPaths",
              "file.acquiredFrom.eventId",
              "file.acquiredFrom.sourceAccountName",
              "file.acquiredFrom.sourceAccountType",
              "file.acquiredFrom.sourceCategory",
              "file.acquiredFrom.sourceName",
              "file.acquiredFrom.sourceUser.email",
              "file.acquiredFrom.agentTimestamp",
              "file.acquiredFrom.userEmail",
              "file.acquiredFrom.eventAction",
              "file.acquiredFrom.tabs.title",
              "file.acquiredFrom.tabs.titleError",
              "file.acquiredFrom.tabs.url",
              "file.acquiredFrom.tabs.urlError",
              "file.acquiredFrom.sourceDomains",
              "file.acquiredFrom.fileName",
              "file.acquiredFrom.md5",
              "file.acquiredFrom.git.repositoryEmail",
              "file.acquiredFrom.git.repositoryUri",
              "file.acquiredFrom.git.repositoryUser",
              "git.eventId",
              "git.lastCommitHash",
              "git.repositoryUri",
              "git.repositoryUser",
              "git.repositoryEmail",
              "git.repositoryEndpointPath"
            ],
            "example": "@timestamp",
            "title": "Which columns to include in the output. If none is provided, all available columnswill be output in an unspecified, not-guaranteed order.",
            "type": "string"
          },
          "title": "Which columns to include in the output. If none is provided, all available columnswill be output in an unspecified, not-guaranteed order.",
          "type": "array",
          "x-nullable": true
        },
        "groupClause": {
          "enum": [
            "AND",
            "OR"
          ],
          "example": "OR",
          "title": "Grouping clause for any specified groups.  Default is `AND`.",
          "type": "string",
          "x-nullable": true
        },
        "groups": {
          "items": {
            "$ref": "#/definitions/FilterGroupSearchTermV2-file-events"
          },
          "title": "One or more FilterGroups to be combined in a query.",
          "type": "array"
        },
        "srtDir": {
          "enum": [
            "asc",
            "desc"
          ],
          "example": "asc",
          "title": "Sort direction.  Default is `desc`.",
          "type": "string",
          "x-nullable": true
        },
        "srtKey": {
          "enum": [
            "@timestamp",
            "event.id",
            "event.inserted",
            "event.ingested",
            "event.action",
            "event.shareType",
            "event.observer",
            "event.detectorDisplayName",
            "event.vector",
            "user.email",
            "user.id",
            "user.deviceUid",
            "file.name",
            "file.originalName",
            "file.directory",
            "file.originalDirectory",
            "file.category",
            "file.mimeTypeByBytes",
            "file.categoryByBytes",
            "file.mimeTypeByExtension",
            "file.categoryByExtension",
            "file.sizeInBytes",
            "file.owner",
            "file.created",
            "file.modified",
            "file.hash.md5",
            "file.hash.sha256",
            "file.hash.md5Error",
            "file.hash.sha256Error",
            "file.id",
            "file.url",
            "file.directoryId",
            "file.cloudDriveId",
            "file.classifications.value",
            "file.classifications.vendor",
            "file.changeType",
            "file.archiveId",
            "file.parentArchiveId",
            "file.passwordProtected",
            "report.id",
            "report.name",
            "report.description",
            "report.headers",
            "report.count",
            "report.type",
            "source.category",
            "source.name",
            "source.user.email",
            "source.domain",
            "source.ip",
            "source.privateIp",
            "source.operatingSystem",
            "source.email.sender",
            "source.email.from",
            "source.remoteHostname",
            "source.removableMedia.vendor",
            "source.removableMedia.mediaName",
            "source.removableMedia.serialNumber",
            "source.removableMedia.capacity",
            "source.removableMedia.busType",
            "source.removableMedia.name",
            "source.removableMedia.volumeName",
            "source.removableMedia.partitionId",
            "source.tabs.title",
            "source.tabs.titleError",
            "source.tabs.url",
            "source.tabs.urlError",
            "source.accountName",
            "source.accountType",
            "source.domains",
            "destination.category",
            "destination.name",
            "destination.user.email",
            "destination.ip",
            "destination.privateIp",
            "destination.operatingSystem",
            "destination.printJobName",
            "destination.printerName",
            "destination.printedFilesBackupPath",
            "destination.email.recipients",
            "destination.email.subject",
            "destination.removableMedia.vendor",
            "destination.removableMedia.mediaName",
            "destination.removableMedia.serialNumber",
            "destination.removableMedia.capacity",
            "destination.removableMedia.busType",
            "destination.removableMedia.name",
            "destination.removableMedia.volumeName",
            "destination.removableMedia.partitionId",
            "destination.tabs.title",
            "destination.tabs.url",
            "destination.tabs.titleError",
            "destination.tabs.urlError",
            "destination.accountName",
            "destination.accountType",
            "destination.domains",
            "destination.remoteHostname",
            "process.executable",
            "process.owner",
            "process.extension.browser",
            "process.extension.version",
            "process.extension.loggedInUser",
            "risk.score",
            "risk.severity",
            "risk.indicators.name",
            "risk.indicators.id",
            "risk.indicators.weight",
            "risk.trusted",
            "risk.trustReason",
            "risk.untrustedValues.accountNames",
            "risk.untrustedValues.domains",
            "risk.untrustedValues.gitRepositoryUris",
            "risk.untrustedValues.slackWorkspaces",
            "risk.untrustedValues.urlPaths",
            "file.acquiredFrom.eventId",
            "file.acquiredFrom.sourceAccountName",
            "file.acquiredFrom.sourceAccountType",
            "file.acquiredFrom.sourceCategory",
            "file.acquiredFrom.sourceName",
            "file.acquiredFrom.sourceUser.email",
            "file.acquiredFrom.agentTimestamp",
            "file.acquiredFrom.userEmail",
            "file.acquiredFrom.eventAction",
            "file.acquiredFrom.tabs.title",
            "file.acquiredFrom.tabs.titleError",
            "file.acquiredFrom.tabs.url",
            "file.acquiredFrom.tabs.urlError",
            "file.acquiredFrom.sourceDomains",
            "file.acquiredFrom.fileName",
            "file.acquiredFrom.md5",
            "file.acquiredFrom.git.repositoryEmail",
            "file.acquiredFrom.git.repositoryUri",
            "file.acquiredFrom.git.repositoryUser",
            "git.eventId",
            "git.lastCommitHash",
            "git.repositoryUri",
            "git.repositoryUser",
            "git.repositoryEmail",
            "git.repositoryEndpointPath"
          ],
          "example": "@timestamp",
          "title": "Search term for sorting.",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "groups"
      ],
      "type": "object"
    },
    "Extension-file-events": {
      "properties": {
        "browser": {
          "title": "The web browser in which the event occurred.",
          "type": "string",
          "x-nullable": true
        },
        "loggedInUser": {
          "title": "The user logged in to the web browser when the event occurred.",
          "type": "string",
          "x-nullable": true
        },
        "version": {
          "title": "The version of the Code42 Incydr extension installed when the event occurred.",
          "type": "string",
          "x-nullable": true
        }
      },
      "title": "Metadata about the Code42 browser extension to facilitate troubleshooting.",
      "type": "object"
    },
    "FieldError-file-events": {
      "example": [
        {
          "error": "Hash unavailable. Locked file.",
          "field": "md5Checksum"
        }
      ],
      "properties": {
        "error": {
          "example": "Hash unavailable. Locked file.",
          "title": "Error indicating why the field could not be determined.",
          "type": "string",
          "x-nullable": true
        },
        "field": {
          "example": "md5Checksum",
          "title": "FileEvent field that could not be determined.",
          "type": "string",
          "x-nullable": true
        }
      },
      "title": "List fields with errors indicating why they could not be determined.",
      "type": "object"
    },
    "File-file-events": {
      "properties": {
        "acquiredFrom": {
          "items": {
            "$ref": "#/definitions/AcquiredFrom-file-events"
          },
          "title": "List of other events associated with this file. This can help determine the origin of the file.",
          "type": "array"
        },
        "archiveId": {
          "title": "Unique identifier for files identified as an archive, such as .zip files.",
          "type": "string",
          "x-nullable": true
        },
        "category": {
          "example": "Audio",
          "title": "A categorization of the file that is inferred from MIME type.",
          "type": "string",
          "x-nullable": true
        },
        "categoryByBytes": {
          "example": "Image",
          "title": "A categorization of the file based on its contents.",
          "type": "string",
          "x-deprecated": true,
          "x-nullable": true
        },
        "categoryByExtension": {
          "example": "Document",
          "title": "A categorization of the file based on its extension.",
          "type": "string",
          "x-deprecated": true,
          "x-nullable": true
        },
        "changeType": {
          "example": "CREATED",
          "title": "The action that caused the event. For example: CREATED, MODIFIED, DELETED.",
          "type": "string",
          "x-nullable": true
        },
        "classifications": {
          "items": {
            "$ref": "#/definitions/FileClassification-file-events"
          },
          "title": "Data provided by an external file classification vendor.",
          "type": "array"
        },
        "cloudDriveId": {
          "example": "RvBpZ48u2m",
          "title": "Unique identifier reported by the cloud provider for the drive containing the file at the time the event occurred.",
          "type": "string",
          "x-nullable": true
        },
        "created": {
          "example": "2020-10-27T15:16:05.369203Z",
          "format": "date-time",
          "title": "File creation timestamp as reported by the device's operating system in Coordinated Universal Time (UTC); available for Mac and Windows NTFS devices only.",
          "type": "string",
          "x-nullable": true
        },
        "directory": {
          "example": "/Users/alix/Documents/",
          "title": "The file location on the user's device; a forward or backslash must be included at the end of the filepath. Possibly null if the file event occurred on a cloud provider.",
          "type": "string",
          "x-nullable": true
        },
        "directoryId": {
          "example": [
            "1234",
            "56d78"
          ],
          "items": {
            "example": "[\"1234\",\"56d78\"]",
            "title": "Unique identifiers of the parent drives that contain the file; searching on directoryId will return events for all of the files contained in the parent drive.",
            "type": "string"
          },
          "title": "Unique identifiers of the parent drives that contain the file; searching on directoryId will return events for all of the files contained in the parent drive.",
          "type": "array"
        },
        "hash": {
          "$ref": "#/definitions/Hash-file-events"
        },
        "id": {
          "example": "PUL5zWLRrdudiJZ1OCWw",
          "title": "Unique identifier reported by the cloud provider for the file associated with the event.",
          "type": "string",
          "x-nullable": true
        },
        "mimeTypeByBytes": {
          "example": "text/csv",
          "title": "The MIME type of the file based on its contents.",
          "type": "string",
          "x-nullable": true
        },
        "mimeTypeByExtension": {
          "example": "audio/vorbis",
          "title": "The MIME type of the file based on its extension.",
          "type": "string",
          "x-nullable": true
        },
        "modified": {
          "example": "2020-10-27T15:16:05.369203Z",
          "format": "date-time",
          "title": "File modification timestamp as reported by the device's operating system.  This only indicates changes to file contents.  Changes to file permissions, file owner, or other metadata are not reflected in this timestamp.  Date is reported in Coordinated Universal Time (UTC).",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "example": "ReadMe.md",
          "title": "The name of the file, including the file extension.",
          "type": "string"
        },
        "originalDirectory": {
          "example": "/Users/alix/Documents/",
          "title": "The original file location on the user’s device or cloud service location; a forward or backslash must be included at the end of the filepath. Possibly null if the file event occurred on a cloud provider.",
          "type": "string",
          "x-nullable": true
        },
        "originalName": {
          "example": "ReadMe.md",
          "title": "The original name of the file, including the file extension.",
          "type": "string",
          "x-nullable": true
        },
        "owner": {
          "example": "ari.example",
          "title": "The name of the user who owns the file as reported by the device's file system.",
          "type": "string",
          "x-nullable": true
        },
        "parentArchiveId": {
          "title": "For files contained within an archive (such as a .zip file), the unique identifier for that archive; searching on parentArchiveID returns events for all files contained within that archive",
          "type": "string",
          "x-nullable": true
        },
        "passwordProtected": {
          "title": "Indicates if this file is password protected.",
          "type": "boolean",
          "x-nullable": true
        },
        "sizeInBytes": {
          "example": 256,
          "format": "int64",
          "title": "Size of the file in bytes.",
          "type": "integer",
          "x-nullable": true
        },
        "url": {
          "example": "https://example.com",
          "title": "URL reported by the cloud provider at the time the event occurred.",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "acquiredFrom",
        "classifications",
        "directoryId",
        "hash",
        "name"
      ],
      "title": "Metadata about the file for this event.",
      "type": "object"
    },
    "FileClassification-file-events": {
      "properties": {
        "value": {
          "example": "Classified",
          "title": "The classification value applied to the file.",
          "type": "string",
          "x-nullable": true
        },
        "vendor": {
          "example": "MICROSOFT INFORMATION PROTECTION",
          "title": "The name of the vendor that classified the file.",
          "type": "string",
          "x-nullable": true
        }
      },
      "title": "Data provided by an external file classification vendor.",
      "type": "object"
    },
    "FileEventResponseV1-file-events": {
      "properties": {
        "fileEvents": {
          "items": {
            "$ref": "#/definitions/FileEventV1-file-events"
          },
          "title": "List of file events in the response.",
          "type": "array",
          "x-nullable": true
        },
        "nextPgToken": {
          "example": "0_147e9445-2f30-4a91-8b2a-9455332e880a_973435567569502913_986467523038446097_163",
          "title": "Use as the pgToken value in another request to indicate the starting point for additional page results. nextPgToken is null if there are no more results or if pgToken was not supplied.",
          "type": "string",
          "x-nullable": true
        },
        "problems": {
          "items": {
            "$ref": "#/definitions/QueryProblemSearchTermV1-file-events"
          },
          "title": "List of problems in the request.  A problem with a search request could be an invalid filter value, an operator that can't be used on a term, etc.",
          "type": "array",
          "x-nullable": true
        },
        "totalCount": {
          "example": 42,
          "format": "int64",
          "title": "Total number of file events in the response.",
          "type": "integer",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "FileEventResponseV2-file-events": {
      "properties": {
        "fileEvents": {
          "items": {
            "$ref": "#/definitions/FileEventV2-file-events"
          },
          "title": "List of file events in the response.",
          "type": "array",
          "x-nullable": true
        },
        "nextPgToken": {
          "example": "0_147e9445-2f30-4a91-8b2a-9455332e880a_973435567569502913_986467523038446097_163",
          "title": "Use as the pgToken value in another request to indicate the starting point for additional page results. nextPgToken is null if there are no more results or if pgToken was not supplied.",
          "type": "string",
          "x-nullable": true
        },
        "problems": {
          "items": {
            "$ref": "#/definitions/QueryProblemSearchTermV2-file-events"
          },
          "title": "List of problems in the request.  A problem with a search request could be an invalid filter value, an operator that can't be used on a term, etc.",
          "type": "array",
          "x-nullable": true
        },
        "totalCount": {
          "example": 42,
          "format": "int64",
          "title": "Total number of file events in the response.",
          "type": "integer",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "FileEventV1-file-events": {
      "properties": {
        "actor": {
          "example": "casey@example.com",
          "title": "Name of the user reported by the cloud provider for the user who performed this file activity.",
          "type": "string",
          "x-nullable": true
        },
        "cloudDriveId": {
          "example": "RvBpZ48u2m",
          "title": "Unique identifier reported by the cloud provider for the drive containing the file at the time the event occurred.",
          "type": "string",
          "x-nullable": true
        },
        "createTimestamp": {
          "example": "2020-10-27T15:16:05.369203Z",
          "format": "date-time",
          "title": "File creation timestamp as reported by the device's operating system in Coordinated Universal Time (UTC); available for Mac and Windows NTFS devices only.",
          "type": "string",
          "x-nullable": true
        },
        "destinationCategory": {
          "example": "Social Media",
          "title": "General category of where the file was sent. For example: Cloud Storage, Email, Social Media.",
          "type": "string",
          "x-nullable": true
        },
        "destinationName": {
          "example": "LinkedIn",
          "title": "Specific target of where the file was sent. For example: Google Drive, Outlook, Slack.",
          "type": "string",
          "x-nullable": true
        },
        "detectionSourceAlias": {
          "example": "R&D OneDrive",
          "title": "Name provided by a Code42 Customer Cloud Administrator when a Cloud Connector is initially configured.",
          "type": "string",
          "x-nullable": true
        },
        "deviceUid": {
          "example": "24681",
          "title": "Unique identifier for the device. Null if the file event occurred on a cloud provider.",
          "type": "string",
          "x-nullable": true
        },
        "deviceUserName": {
          "example": "cody@example.com",
          "title": "The Code42 username used to sign in to the Code42 app on the device. Null if the file event occurred on a cloud provider.",
          "type": "string",
          "x-nullable": true
        },
        "directoryId": {
          "example": [
            "1234",
            "56d78"
          ],
          "items": {
            "example": "[\"1234\",\"56d78\"]",
            "title": "Unique identifiers of the parent drives that contain the file; searching on directoryId will return events for all of the files contained in the parent drive.",
            "type": "string"
          },
          "title": "Unique identifiers of the parent drives that contain the file; searching on directoryId will return events for all of the files contained in the parent drive.",
          "type": "array",
          "x-nullable": true
        },
        "domainName": {
          "example": "localhost",
          "title": "Fully qualified domain name (FQDN) for the user's device at the time the event is recorded.  If the device is unable to resolve the domain name of the host, it reports the IP address of the host.",
          "type": "string",
          "x-nullable": true
        },
        "emailDlpPolicyNames": {
          "example": [
            "External recipient"
          ],
          "items": {
            "example": "[\"External recipient\"]",
            "title": "No longer in use. Deprecated September 2021.",
            "type": "string"
          },
          "title": "No longer in use. Deprecated September 2021.",
          "type": "array",
          "x-nullable": true
        },
        "emailFrom": {
          "example": "ari@example.com",
          "title": "The display name of the sender, as it appears in the \"From\" field in the email. In many cases, this is the same as emailSender, but it can be different if the message is sent by a server or other mail agent on behalf of someone else.",
          "type": "string",
          "x-nullable": true
        },
        "emailRecipients": {
          "example": [
            "cody@example.com",
            "theboss@example.com"
          ],
          "items": {
            "example": "[\"cody@example.com\",\"theboss@example.com\"]",
            "title": " The email addresses of those who received the email. Includes the To, Cc, and Bcc recipients.",
            "type": "string"
          },
          "title": " The email addresses of those who received the email. Includes the To, Cc, and Bcc recipients.",
          "type": "array",
          "x-nullable": true
        },
        "emailSender": {
          "example": "ari@example.com",
          "title": "The address of the entity responsible for transmitting the message. In many cases, this is the same as emailFrom, but it can be different if the message is sent by a server or other mail agent on behalf of someone else.",
          "type": "string",
          "x-nullable": true
        },
        "emailSubject": {
          "example": "Important business documents",
          "title": "The subject of the email message.",
          "type": "string",
          "x-nullable": true
        },
        "eventId": {
          "example": "0_147e9445-2f30-4a91-8b2a-9455332e880a_973435567569502913_986467523038446097_163",
          "title": "The unique identifier for the event.",
          "type": "string"
        },
        "eventTimestamp": {
          "example": "2020-10-27T15:16:05.369203Z",
          "format": "date-time",
          "title": "Date and time that the Code42 service on the device detected an event; based on the device’s system clock and reported in Coordinated Universal Time (UTC).",
          "type": "string",
          "x-nullable": true
        },
        "eventType": {
          "enum": [
            "CREATED",
            "MODIFIED",
            "DELETED",
            "UNCHANGED",
            "READ_BY_APP",
            "UNSUPPORTED",
            "RULE_MATCH",
            "RESTORE",
            "OPEN",
            "DOWNLOADED",
            "PREVIEWED",
            "EMAILED",
            "PRINTED"
          ],
          "example": "MODIFIED",
          "title": "Indicates the type of file event observed.",
          "type": "string"
        },
        "exposure": {
          "example": [
            "CloudStorage"
          ],
          "items": {
            "example": "[\"CloudStorage\"]",
            "title": "Lists indicators that the data may be exposed. Default is `[]`.",
            "type": "string"
          },
          "title": "Lists indicators that the data may be exposed. Default is `[]`.",
          "type": "array"
        },
        "fieldErrors": {
          "example": [
            {
              "error": "Hash unavailable. Locked file.",
              "field": "md5Checksum"
            }
          ],
          "items": {
            "$ref": "#/definitions/FieldError-file-events"
          },
          "title": "List fields with errors indicating why they could not be determined.",
          "type": "array",
          "x-nullable": true
        },
        "fileCategory": {
          "example": "Audio",
          "title": "A categorization of the file that is inferred from MIME type.",
          "type": "string",
          "x-nullable": true
        },
        "fileCategoryByBytes": {
          "example": "Image",
          "title": "A categorization of the file based on its contents.",
          "type": "string",
          "x-deprecated": true,
          "x-nullable": true
        },
        "fileCategoryByExtension": {
          "example": "Document",
          "title": "A categorization of the file based on its extension.",
          "type": "string",
          "x-deprecated": true,
          "x-nullable": true
        },
        "fileClassifications": {
          "items": {
            "$ref": "#/definitions/FileClassification-file-events"
          },
          "title": "Data provided by an external file classification vendor.",
          "type": "array",
          "x-nullable": true
        },
        "fileId": {
          "example": "PUL5zWLRrdudiJZ1OCWw",
          "title": "Unique identifier reported by the cloud provider for the file associated with the event.",
          "type": "string",
          "x-nullable": true
        },
        "fileName": {
          "example": "ReadMe.md",
          "title": "The name of the file, including the file extension.",
          "type": "string"
        },
        "fileOwner": {
          "example": "ari.example",
          "title": "The name of the user who owns the file as reported by the device's file system.",
          "type": "string",
          "x-nullable": true
        },
        "filePath": {
          "example": "/Users/alix/Documents/",
          "title": "The file location on the user's device; a forward or backslash must be included at the end of the filepath. Possibly null if the file event occurred on a cloud provider.",
          "type": "string",
          "x-nullable": true
        },
        "fileSize": {
          "example": 256,
          "format": "int64",
          "title": "Size of the file in bytes.",
          "type": "integer",
          "x-nullable": true
        },
        "fileType": {
          "enum": [
            "UNKNOWN",
            "FILE",
            "DIR",
            "WIN_NDS",
            "MAC_RSRC",
            "SYMLINK",
            "FIFO",
            "BLOCK_DEVICE",
            "CHAR_DEVICE",
            "BUNDLE"
          ],
          "example": "FILE",
          "title": "The type of file detected; only FILE types are searchable.",
          "type": "string"
        },
        "insertionTimestamp": {
          "example": "2020-10-27T15:16:05.369203Z",
          "format": "date-time",
          "title": "Date and time that the event was received for indexing by Code42; timestamp is based on the Code42 server system clock and reported in Coordinated Universal Time (UTC).",
          "type": "string",
          "x-nullable": true
        },
        "md5Checksum": {
          "example": "a162591e78eb2c816a28907d3ac020f9",
          "title": "The MD5 hash of the file contents.",
          "type": "string",
          "x-nullable": true
        },
        "mimeTypeByBytes": {
          "example": "text/csv",
          "title": "The MIME type of the file based on its contents.",
          "type": "string",
          "x-nullable": true
        },
        "mimeTypeByExtension": {
          "example": "audio/vorbis",
          "title": "The MIME type of the file based on its extension.",
          "type": "string",
          "x-nullable": true
        },
        "mimeTypeMismatch": {
          "example": true,
          "title": "Indicates whether or not the MIME type of the file based on its contents does not match the MIME type based on its extension and that this mismatch is unexpected.",
          "type": "boolean",
          "x-nullable": true
        },
        "modifyTimestamp": {
          "example": "2020-10-27T15:16:05.369203Z",
          "format": "date-time",
          "title": "File modification timestamp as reported by the device's operating system.  This only indicates changes to file contents.  Changes to file permissions, file owner, or other metadata are not reflected in this timestamp.  Date is reported in Coordinated Universal Time (UTC).",
          "type": "string",
          "x-nullable": true
        },
        "operatingSystemUser": {
          "example": "ari.example",
          "title": "The username logged in to the device when the file activity was observed, as reported by the device’s operating system.",
          "type": "string",
          "x-nullable": true
        },
        "osHostName": {
          "example": "Mari's MacBook",
          "title": "The name reported by the device's operating system.  This may be different than the device name in the Code42 console.",
          "type": "string",
          "x-nullable": true
        },
        "outsideActiveHours": {
          "example": false,
          "title": "Indicates whether or not this event occurred outside of the user's typical active hours using data modeling from the this user's prior activity.",
          "type": "boolean",
          "x-nullable": true
        },
        "printJobName": {
          "example": "printer.exe",
          "title": "For print events, the name of the print job, as reported by the user's device.",
          "type": "string",
          "x-nullable": true
        },
        "printerName": {
          "example": "OfficeJet",
          "title": "For print events, the name of the printer the job was sent to.",
          "type": "string",
          "x-nullable": true
        },
        "privateIpAddresses": {
          "example": [
            "127.0.0.1",
            "127.0.0.2"
          ],
          "items": {
            "example": "[\"127.0.0.1\",\"127.0.0.2\"]",
            "title": "The IP address of the user's device on your internal network, including Network interfaces, Virtual Network Interface controllers (NICs), and Loopback/non-routable addresses.",
            "type": "string"
          },
          "title": "The IP address of the user's device on your internal network, including Network interfaces, Virtual Network Interface controllers (NICs), and Loopback/non-routable addresses.",
          "type": "array"
        },
        "processName": {
          "example": "bash",
          "title": "The name of the process that accessed the file, as reported by the device’s operating system. Depending on your Code42 product plan, this value may be null for some event types.",
          "type": "string",
          "x-nullable": true
        },
        "processOwner": {
          "example": "root",
          "title": "The username of the process owner, as reported by the device’s operating system. Depending on your Code42 product plan, this value may be null for some event types.",
          "type": "string",
          "x-nullable": true
        },
        "publicIpAddress": {
          "example": "127.0.0.1",
          "title": "The external IP address of the user's device.",
          "type": "string",
          "x-nullable": true
        },
        "remoteActivity": {
          "enum": [
            "TRUE",
            "FALSE",
            "UNKNOWN"
          ],
          "example": "UNKNOWN",
          "title": "For endpoint events, compares the IP address of the file event to your defined list of addresses in the Data Preferences section of the Code42 console. If the IP address from the file event does not match, \"remote\" is true. If the IP address does match, \"remote\" is false.",
          "type": "string",
          "x-nullable": true
        },
        "removableMediaBusType": {
          "example": "USB 3.0 Bus",
          "title": "For events detected on removable media, indicates the communication system used to transfer data between the host and the removable device.",
          "type": "string",
          "x-nullable": true
        },
        "removableMediaCapacity": {
          "example": 15631122432,
          "format": "int64",
          "title": "For events detected on removable media, the capacity of the removable device in bytes.",
          "type": "integer",
          "x-nullable": true
        },
        "removableMediaMediaName": {
          "example": "Cruzer Blade",
          "title": "For events detected on removable media, the media name of the device, as reported by the vendor/device. This is usually very similar to the productName, but can vary based on the type of device. For example, if the device is a hard drive in a USB enclosure, this may be the combination of the drive model and the enclosure model.\nThis value is not provided by all devices, so it may be null in some cases.",
          "type": "string",
          "x-nullable": true
        },
        "removableMediaName": {
          "example": "JUMPDRIVE",
          "title": "For events detected on removable media, the name of the removable device.",
          "type": "string",
          "x-nullable": true
        },
        "removableMediaPartitionId": {
          "example": [
            "disk0s2",
            "disk0s3"
          ],
          "items": {
            "example": "[\"disk0s2\",\"disk0s3\"]",
            "title": "For events detected on removable media, a unique identifier assigned to the volume/partition when it was formatted. Windows devices refer to this as the VolumeGuid. On Mac devices, this is the Disk / Partition UUID, which appears when running the Terminal command diskUtil info.",
            "type": "string"
          },
          "title": "For events detected on removable media, a unique identifier assigned to the volume/partition when it was formatted. Windows devices refer to this as the VolumeGuid. On Mac devices, this is the Disk / Partition UUID, which appears when running the Terminal command diskUtil info.",
          "type": "array",
          "x-nullable": true
        },
        "removableMediaSerialNumber": {
          "example": "4C531001550407108465",
          "title": "For events detected on removable media, the serial number of the removable device.",
          "type": "string",
          "x-nullable": true
        },
        "removableMediaVendor": {
          "example": "SanDisk",
          "title": "For events detected on removable media, the vendor of the removable device.",
          "type": "string",
          "x-nullable": true
        },
        "removableMediaVolumeName": {
          "example": [
            "MY_FILES"
          ],
          "items": {
            "example": "[\"MY_FILES\"]",
            "title": "For events detected on removable media, the name assigned to the volume when it was formatted, as reported by the device's operating system. This is also frequently called the \"partition\" name.",
            "type": "string"
          },
          "title": "For events detected on removable media, the name assigned to the volume when it was formatted, as reported by the device's operating system. This is also frequently called the \"partition\" name.",
          "type": "array",
          "x-nullable": true
        },
        "reportColumnHeaders": {
          "example": [
            "USERNAME",
            "ACCOUNT_NAME",
            "TYPE",
            "DUE_DATE",
            "LAST_UPDATE",
            "ADDRESS1_STATE"
          ],
          "items": {
            "example": "[\"USERNAME\",\"ACCOUNT_NAME\",\"TYPE\",\"DUE_DATE\",\"LAST_UPDATE\",\"ADDRESS1_STATE\"]",
            "title": "The list of column headers that are in the report.",
            "type": "string"
          },
          "title": "The list of column headers that are in the report.",
          "type": "array",
          "x-nullable": true
        },
        "reportDescription": {
          "example": "Top 20 accounts based on annual revenue",
          "title": "The description of the report.",
          "type": "string",
          "x-nullable": true
        },
        "reportId": {
          "example": "00OB00000042FHdMAM",
          "title": "The ID of the report associated with this event.",
          "type": "string",
          "x-nullable": true
        },
        "reportName": {
          "example": "Top Accounts Report",
          "title": "The display name of the report.",
          "type": "string",
          "x-nullable": true
        },
        "reportRecordCount": {
          "example": 20,
          "format": "int32",
          "title": "The total number of rows returned in the report.",
          "type": "integer",
          "x-nullable": true
        },
        "reportType": {
          "enum": [
            "REPORT_TYPE_AD_HOC",
            "REPORT_TYPE_SAVED"
          ],
          "example": "REPORT_TYPE_SAVED",
          "title": "Indicates if the report is \"REPORT_TYPE_AD_HOC\" or \"REPORT_TYPE_SAVED\".",
          "type": "string",
          "x-nullable": true
        },
        "riskIndicators": {
          "items": {
            "$ref": "#/definitions/RiskIndicator-file-events"
          },
          "title": "List of risk indicators identified for this event. If more than one risk indicator applies to this event, the sum of all indicators determines the total risk score.",
          "type": "array",
          "x-nullable": true
        },
        "riskScore": {
          "example": 12,
          "format": "int32",
          "title": "Sum of the weights for each risk indicator. This score is used to determine the overall risk severity of the event.",
          "type": "integer",
          "x-nullable": true
        },
        "riskSeverity": {
          "enum": [
            "NO_RISK_INDICATED",
            "LOW",
            "MODERATE",
            "HIGH",
            "CRITICAL"
          ],
          "example": "CRITICAL",
          "title": "The general risk assessment of the event, based on the numeric score.",
          "type": "string",
          "x-nullable": true
        },
        "sha256Checksum": {
          "example": "ded96d69c63754472efc4aa86fed68d4e17784b38089851cfa84e699e48b4155",
          "title": "The SHA256 hash of the file contents.",
          "type": "string",
          "x-nullable": true
        },
        "shared": {
          "enum": [
            "TRUE",
            "FALSE"
          ],
          "example": "TRUE",
          "title": "Indicates the shared status as reported by the cloud provider at the time the event occurred. A shared file indicates that one or more users have been granted explicit access to the file. It does not capture whether or not a link to the file has been shared.",
          "type": "string",
          "x-nullable": true
        },
        "sharedWith": {
          "$ref": "#/definitions/SharedWithUser-file-events"
        },
        "sharingTypeAdded": {
          "example": [
            "SharedViaLink"
          ],
          "items": {
            "example": "[\"SharedViaLink\"]",
            "title": "Public sharing types that were added by this event.",
            "type": "string"
          },
          "title": "Public sharing types that were added by this event.",
          "type": "array",
          "x-nullable": true
        },
        "source": {
          "example": "OneDrive",
          "title": "Data source for a file event.",
          "type": "string",
          "x-nullable": true
        },
        "sourceCategory": {
          "example": "Social Media",
          "title": "General category of where the file originated. For example: Cloud Storage, Email, Social Media.",
          "type": "string",
          "x-nullable": true
        },
        "sourceName": {
          "example": "Salesforce",
          "title": "Specific target of where the file originated. For example: Google Drive, Outlook, Slack.",
          "type": "string",
          "x-nullable": true
        },
        "sourceTabs": {
          "items": {
            "$ref": "#/definitions/Tab-file-events"
          },
          "title": "For events generated when a file is downloaded via a browser or other app, the tabs that had activity at the time of the event.",
          "type": "array",
          "x-nullable": true
        },
        "syncDestination": {
          "example": "Dropbox",
          "title": "For events detected within a cloud storage sync destination on a device, the name of the cloud storage vendor.",
          "type": "string",
          "x-nullable": true
        },
        "syncDestinationUsername": {
          "example": [
            "ari@example.com"
          ],
          "items": {
            "example": "[\"ari@example.com\"]",
            "title": "For events detected within a cloud storage sync destination on a device, lists the usernames logged into the cloud storage provider when the file activity was observed.",
            "type": "string"
          },
          "title": "For events detected within a cloud storage sync destination on a device, lists the usernames logged into the cloud storage provider when the file activity was observed.",
          "type": "array",
          "x-nullable": true
        },
        "tabUrl": {
          "example": "https://example.com",
          "title": "For events generated when a file is read in a browser or other app, the URL that had activity at the time of the event. May not contain all URLs if multiple are present. 'tabs' field is recommended for use instead.",
          "type": "string",
          "x-nullable": true
        },
        "tabs": {
          "items": {
            "$ref": "#/definitions/Tab-file-events"
          },
          "title": "For events generated when a file is uploaded via a browser or other app, the tabs that had activity at the time of the event.",
          "type": "array",
          "x-nullable": true
        },
        "trustReason": {
          "example": "TRUSTED_DOMAIN_BROWSER_URL",
          "title": "The reason the event is trusted. trustReason is only populated if trusted is true for this event.",
          "type": "string",
          "x-nullable": true
        },
        "trusted": {
          "example": true,
          "title": "Indicates whether or not the file activity is trusted based on your Data Preferences settings.",
          "type": "boolean",
          "x-nullable": true
        },
        "url": {
          "example": "https://example.com",
          "title": "URL reported by the cloud provider at the time the event occurred.",
          "type": "string",
          "x-nullable": true
        },
        "userUid": {
          "example": "1138",
          "title": "Unique identifier for the user of the Code42 app on the device. Null if the file event occurred on a cloud provider.",
          "type": "string",
          "x-nullable": true
        },
        "windowTitle": {
          "example": [
            "Inbox - cody@example.com"
          ],
          "items": {
            "example": "[\"Inbox - cody@example.com\"]",
            "title": "For events generated when a file is read in a browser or other app, the tab or window title(s) that had activity at the time of the event. 'tabs' field is recommended for use instead.",
            "type": "string"
          },
          "title": "For events generated when a file is read in a browser or other app, the tab or window title(s) that had activity at the time of the event. 'tabs' field is recommended for use instead.",
          "type": "array",
          "x-nullable": true
        }
      },
      "required": [
        "eventId",
        "eventType",
        "exposure",
        "fileName",
        "fileType",
        "privateIpAddresses"
      ],
      "title": "List of file events in the response.",
      "type": "object"
    },
    "FileEventV2-file-events": {
      "properties": {
        "@timestamp": {
          "example": "2020-10-27T15:16:05.369203Z",
          "format": "date-time",
          "title": "Date and time that the Code42 service on the device detected an event; based on the device’s system clock and reported in Coordinated Universal Time (UTC).",
          "type": "string",
          "x-nullable": true
        },
        "destination": {
          "$ref": "#/definitions/Destination-file-events"
        },
        "event": {
          "$ref": "#/definitions/Event-file-events"
        },
        "file": {
          "$ref": "#/definitions/File-file-events"
        },
        "git": {
          "$ref": "#/definitions/Git-file-events"
        },
        "process": {
          "$ref": "#/definitions/Process-file-events"
        },
        "report": {
          "$ref": "#/definitions/Report-file-events"
        },
        "risk": {
          "$ref": "#/definitions/Risk-file-events"
        },
        "source": {
          "$ref": "#/definitions/Source-file-events"
        },
        "user": {
          "$ref": "#/definitions/User-file-events"
        }
      },
      "required": [
        "destination",
        "event",
        "file",
        "git",
        "process",
        "report",
        "risk",
        "source",
        "user"
      ],
      "title": "List of file events in the response.",
      "type": "object"
    },
    "FilterGroupSearchTermV1-file-events": {
      "properties": {
        "filterClause": {
          "enum": [
            "AND",
            "OR"
          ],
          "example": "AND",
          "title": "Grouping clause for filters.  Default is `AND`.",
          "type": "string",
          "x-nullable": true
        },
        "filters": {
          "items": {
            "$ref": "#/definitions/SearchFilterSearchTermV1-file-events"
          },
          "title": "One or more SearchFilters to be combined in a query.",
          "type": "array"
        }
      },
      "required": [
        "filters"
      ],
      "title": "One or more FilterGroups to be combined in a query.",
      "type": "object"
    },
    "FilterGroupSearchTermV2-file-events": {
      "properties": {
        "filterClause": {
          "enum": [
            "AND",
            "OR"
          ],
          "example": "AND",
          "title": "Grouping clause for filters.  Default is `AND`.",
          "type": "string",
          "x-nullable": true
        },
        "filters": {
          "items": {
            "$ref": "#/definitions/SearchFilterSearchTermV2-file-events"
          },
          "title": "One or more SearchFilters to be combined in a query.",
          "type": "array"
        }
      },
      "required": [
        "filters"
      ],
      "title": "One or more FilterGroups to be combined in a query.",
      "type": "object"
    },
    "Git-file-events": {
      "properties": {
        "eventId": {
          "title": "A global unique identifier (GUID) generated by Incydr for this Git event. All files associated with this event have the same Git event ID. A single Git event can be associated with multiple file events.",
          "type": "string",
          "x-nullable": true
        },
        "lastCommitHash": {
          "title": "Hash value from the most recent commit in this Git event.",
          "type": "string",
          "x-nullable": true
        },
        "repositoryEmail": {
          "title": "The email address specified by the user who performed the Git event. This is a user-defined value and may differ from the credentials used to sign in to Git.",
          "type": "string",
          "x-nullable": true
        },
        "repositoryEndpointPath": {
          "title": "File path of the local Git repository on the user’s endpoint.",
          "type": "string",
          "x-nullable": true
        },
        "repositoryUri": {
          "title": "Uniform Resource Identifier (URI) for the Git repository.",
          "type": "string",
          "x-nullable": true
        },
        "repositoryUser": {
          "title": "The username specified by the user who performed the Git event. This is a user-defined value and may differ from the credentials used to sign in to Git.",
          "type": "string",
          "x-nullable": true
        }
      },
      "title": "Metadata about the Git activity associated with this event.",
      "type": "object"
    },
    "Group-file-events": {
      "properties": {
        "docCount": {
          "example": 3,
          "format": "int64",
          "title": "The approximate count of hits matching this value for your query.",
          "type": "integer",
          "x-nullable": true
        },
        "value": {
          "example": "readme.md",
          "title": "The value of the term for this group.",
          "type": "string",
          "x-nullable": true
        }
      },
      "title": "The top groups based on the query and group by term.",
      "type": "object"
    },
    "GroupingRequestSearchTermV1-file-events": {
      "properties": {
        "groupClause": {
          "enum": [
            "AND",
            "OR"
          ],
          "example": "AND",
          "title": "Grouping clause for any specified groups.  Default is `AND`.",
          "type": "string",
          "x-nullable": true
        },
        "groupingTerm": {
          "enum": [
            "eventId",
            "eventType",
            "eventTimestamp",
            "insertionTimestamp",
            "filePath",
            "fileName",
            "fileType",
            "fileCategory",
            "fileCategoryByBytes",
            "fileCategoryByExtension",
            "fileSize",
            "fileOwner",
            "md5Checksum",
            "sha256Checksum",
            "createTimestamp",
            "modifyTimestamp",
            "deviceUserName",
            "deviceUid",
            "userUid",
            "osHostName",
            "domainName",
            "publicIpAddress",
            "privateIpAddresses",
            "actor",
            "directoryId",
            "source",
            "url",
            "shared",
            "sharedWith",
            "sharingTypeAdded",
            "cloudDriveId",
            "detectionSourceAlias",
            "fileId",
            "exposure",
            "processOwner",
            "processName",
            "windowTitle",
            "tabUrl",
            "tabTitles",
            "tabTitleErrors",
            "tabUrls",
            "tabUrlErrors",
            "sourceTabTitles",
            "sourceTabTitleErrors",
            "sourceTabUrls",
            "sourceTabUrlErrors",
            "fileClassificationVendors",
            "fileClassificationValues",
            "removableMediaVendor",
            "removableMediaName",
            "removableMediaSerialNumber",
            "removableMediaCapacity",
            "removableMediaBusType",
            "removableMediaMediaName",
            "removableMediaVolumeName",
            "removableMediaPartitionId",
            "syncDestination",
            "syncDestinationUsername",
            "emailDlpPolicyNames",
            "emailSubject",
            "emailSender",
            "emailFrom",
            "emailRecipients",
            "outsideActiveHours",
            "mimeTypeByBytes",
            "mimeTypeByExtension",
            "mimeTypeMismatch",
            "printJobName",
            "printerName",
            "printedFilesBackupPath",
            "remoteActivity",
            "trusted",
            "trustReason",
            "operatingSystemUser",
            "destinationCategory",
            "destinationName",
            "sourceCategory",
            "sourceName",
            "riskScore",
            "riskSeverity",
            "riskIndicatorNames",
            "riskIndicatorWeights",
            "reportName",
            "reportDescription",
            "reportColumnHeaders",
            "reportRecordCount",
            "reportType",
            "reportId"
          ],
          "example": "eventId",
          "title": "The search term to use to form the groups.",
          "type": "string",
          "x-nullable": true
        },
        "groups": {
          "items": {
            "$ref": "#/definitions/FilterGroupSearchTermV1-file-events"
          },
          "title": "One or more FilterGroups to be combined in a query.",
          "type": "array"
        }
      },
      "required": [
        "groups"
      ],
      "type": "object"
    },
    "GroupingRequestSearchTermV2-file-events": {
      "properties": {
        "groupClause": {
          "enum": [
            "AND",
            "OR"
          ],
          "example": "AND",
          "title": "Grouping clause for any specified groups.  Default is `AND`.",
          "type": "string",
          "x-nullable": true
        },
        "groupingTerm": {
          "enum": [
            "@timestamp",
            "event.id",
            "event.inserted",
            "event.ingested",
            "event.action",
            "event.shareType",
            "event.observer",
            "event.detectorDisplayName",
            "event.vector",
            "user.email",
            "user.id",
            "user.deviceUid",
            "file.name",
            "file.originalName",
            "file.directory",
            "file.originalDirectory",
            "file.category",
            "file.mimeTypeByBytes",
            "file.categoryByBytes",
            "file.mimeTypeByExtension",
            "file.categoryByExtension",
            "file.sizeInBytes",
            "file.owner",
            "file.created",
            "file.modified",
            "file.hash.md5",
            "file.hash.sha256",
            "file.hash.md5Error",
            "file.hash.sha256Error",
            "file.id",
            "file.url",
            "file.directoryId",
            "file.cloudDriveId",
            "file.classifications.value",
            "file.classifications.vendor",
            "file.changeType",
            "file.archiveId",
            "file.parentArchiveId",
            "file.passwordProtected",
            "report.id",
            "report.name",
            "report.description",
            "report.headers",
            "report.count",
            "report.type",
            "source.category",
            "source.name",
            "source.user.email",
            "source.domain",
            "source.ip",
            "source.privateIp",
            "source.operatingSystem",
            "source.email.sender",
            "source.email.from",
            "source.remoteHostname",
            "source.removableMedia.vendor",
            "source.removableMedia.mediaName",
            "source.removableMedia.serialNumber",
            "source.removableMedia.capacity",
            "source.removableMedia.busType",
            "source.removableMedia.name",
            "source.removableMedia.volumeName",
            "source.removableMedia.partitionId",
            "source.tabs.title",
            "source.tabs.titleError",
            "source.tabs.url",
            "source.tabs.urlError",
            "source.accountName",
            "source.accountType",
            "source.domains",
            "destination.category",
            "destination.name",
            "destination.user.email",
            "destination.ip",
            "destination.privateIp",
            "destination.operatingSystem",
            "destination.printJobName",
            "destination.printerName",
            "destination.printedFilesBackupPath",
            "destination.email.recipients",
            "destination.email.subject",
            "destination.removableMedia.vendor",
            "destination.removableMedia.mediaName",
            "destination.removableMedia.serialNumber",
            "destination.removableMedia.capacity",
            "destination.removableMedia.busType",
            "destination.removableMedia.name",
            "destination.removableMedia.volumeName",
            "destination.removableMedia.partitionId",
            "destination.tabs.title",
            "destination.tabs.url",
            "destination.tabs.titleError",
            "destination.tabs.urlError",
            "destination.accountName",
            "destination.accountType",
            "destination.domains",
            "destination.remoteHostname",
            "process.executable",
            "process.owner",
            "process.extension.browser",
            "process.extension.version",
            "process.extension.loggedInUser",
            "risk.score",
            "risk.severity",
            "risk.indicators.name",
            "risk.indicators.id",
            "risk.indicators.weight",
            "risk.trusted",
            "risk.trustReason",
            "risk.untrustedValues.accountNames",
            "risk.untrustedValues.domains",
            "risk.untrustedValues.gitRepositoryUris",
            "risk.untrustedValues.slackWorkspaces",
            "risk.untrustedValues.urlPaths",
            "file.acquiredFrom.eventId",
            "file.acquiredFrom.sourceAccountName",
            "file.acquiredFrom.sourceAccountType",
            "file.acquiredFrom.sourceCategory",
            "file.acquiredFrom.sourceName",
            "file.acquiredFrom.sourceUser.email",
            "file.acquiredFrom.agentTimestamp",
            "file.acquiredFrom.userEmail",
            "file.acquiredFrom.eventAction",
            "file.acquiredFrom.tabs.title",
            "file.acquiredFrom.tabs.titleError",
            "file.acquiredFrom.tabs.url",
            "file.acquiredFrom.tabs.urlError",
            "file.acquiredFrom.sourceDomains",
            "file.acquiredFrom.fileName",
            "file.acquiredFrom.md5",
            "file.acquiredFrom.git.repositoryEmail",
            "file.acquiredFrom.git.repositoryUri",
            "file.acquiredFrom.git.repositoryUser",
            "git.eventId",
            "git.lastCommitHash",
            "git.repositoryUri",
            "git.repositoryUser",
            "git.repositoryEmail",
            "git.repositoryEndpointPath"
          ],
          "example": "@timestamp",
          "title": "The search term to use to form the groups.",
          "type": "string",
          "x-nullable": true
        },
        "groups": {
          "items": {
            "$ref": "#/definitions/FilterGroupSearchTermV2-file-events"
          },
          "title": "One or more FilterGroups to be combined in a query.",
          "type": "array"
        }
      },
      "required": [
        "groups"
      ],
      "type": "object"
    },
    "GroupingResponseSearchTermV1-file-events": {
      "properties": {
        "groups": {
          "items": {
            "$ref": "#/definitions/Group-file-events"
          },
          "title": "The top groups based on the query and group by term.",
          "type": "array",
          "x-nullable": true
        },
        "problems": {
          "items": {
            "$ref": "#/definitions/QueryProblemSearchTermV1-file-events"
          },
          "title": "List of problems in the request.  A problem with a search request could be an invalid filter value, an operator that can't be used on a term, etc.",
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "GroupingResponseSearchTermV2-file-events": {
      "properties": {
        "groups": {
          "items": {
            "$ref": "#/definitions/Group-file-events"
          },
          "title": "The top groups based on the query and group by term.",
          "type": "array",
          "x-nullable": true
        },
        "problems": {
          "items": {
            "$ref": "#/definitions/QueryProblemSearchTermV2-file-events"
          },
          "title": "List of problems in the request.  A problem with a search request could be an invalid filter value, an operator that can't be used on a term, etc.",
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "Hash-file-events": {
      "properties": {
        "md5": {
          "example": "a162591e78eb2c816a28907d3ac020f9",
          "title": "The MD5 hash of the file contents.",
          "type": "string",
          "x-nullable": true
        },
        "md5Error": {
          "title": "Reason the MD5 hash is unavailable.",
          "type": "string",
          "x-nullable": true
        },
        "sha256": {
          "example": "ded96d69c63754472efc4aa86fed68d4e17784b38089851cfa84e699e48b4155",
          "title": "The SHA-256 hash of the file contents.",
          "type": "string",
          "x-nullable": true
        },
        "sha256Error": {
          "title": "Reason the SHA-256 hash is unavailable.",
          "type": "string",
          "x-nullable": true
        }
      },
      "title": "Hash values of the file.",
      "type": "object"
    },
    "Process-file-events": {
      "properties": {
        "executable": {
          "example": "bash",
          "title": "The name of the process that accessed the file, as reported by the device’s operating system. Depending on your Code42 product plan, this value may be null for some event types.",
          "type": "string",
          "x-nullable": true
        },
        "extension": {
          "$ref": "#/definitions/Extension-file-events"
        },
        "owner": {
          "example": "root",
          "title": "The username of the process owner, as reported by the device’s operating system. Depending on your Code42 product plan, this value may be null for some event types.",
          "type": "string",
          "x-nullable": true
        }
      },
      "title": "Metadata about the process associated with the event.",
      "type": "object"
    },
    "QueryProblemSearchTermV1-file-events": {
      "properties": {
        "badFilter": {
          "$ref": "#/definitions/SearchFilterSearchTermV1-file-events"
        },
        "description": {
          "example": "Request timed out.  Refine your filter criteria and try again.",
          "title": "Additional description of the problem.",
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "enum": [
            "ILLEGAL_VALUE",
            "ILLEGAL_OPERATOR",
            "MAX_LENGTH_EXCEEDED",
            "INVALID_PAGE_SIZE",
            "INVALID_PAGE_NUMBER",
            "INVALID_PAGE_TOKEN",
            "MISSING_VALUE",
            "UNEXPECTED_VALUE",
            "MISSING_GROUPS",
            "MISSING_FILTERS",
            "MAX_FILTERS_EXCEEDED",
            "MAX_VALUES_FOR_FILTER_EXCEEDED",
            "SEARCH_FAILED",
            "QUERY_TIMEOUT",
            "ILLEGAL_SORT",
            "ILLEGAL_GROUP"
          ],
          "example": "SEARCH_FAILED",
          "title": "The type of problem that occured.",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "title": "List of problems in the request.  A problem with a search request could be an invalid filter value, an operator that can't be used on a term, etc.",
      "type": "object"
    },
    "QueryProblemSearchTermV2-file-events": {
      "properties": {
        "badFilter": {
          "$ref": "#/definitions/SearchFilterSearchTermV2-file-events"
        },
        "description": {
          "example": "Request timed out.  Refine your filter criteria and try again.",
          "title": "Additional description of the problem.",
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "enum": [
            "ILLEGAL_VALUE",
            "ILLEGAL_OPERATOR",
            "MAX_LENGTH_EXCEEDED",
            "INVALID_PAGE_SIZE",
            "INVALID_PAGE_NUMBER",
            "INVALID_PAGE_TOKEN",
            "MISSING_VALUE",
            "UNEXPECTED_VALUE",
            "MISSING_GROUPS",
            "MISSING_FILTERS",
            "MAX_FILTERS_EXCEEDED",
            "MAX_VALUES_FOR_FILTER_EXCEEDED",
            "SEARCH_FAILED",
            "QUERY_TIMEOUT",
            "ILLEGAL_SORT",
            "ILLEGAL_GROUP"
          ],
          "example": "SEARCH_FAILED",
          "title": "The type of problem that occured.",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "title": "List of problems in the request.  A problem with a search request could be an invalid filter value, an operator that can't be used on a term, etc.",
      "type": "object"
    },
    "RemovableMedia-file-events": {
      "properties": {
        "busType": {
          "example": "USB 3.0 Bus",
          "title": "For events detected on removable media, indicates the communication system used to transfer data between the host and the removable device.",
          "type": "string",
          "x-nullable": true
        },
        "capacity": {
          "example": 15631122432,
          "format": "int64",
          "title": "For events detected on removable media, the capacity of the removable device in bytes.",
          "type": "integer",
          "x-nullable": true
        },
        "mediaName": {
          "example": "Cruzer Blade",
          "title": "For events detected on removable media, the media name of the device, as reported by the vendor/device. This is usually very similar to the productName, but can vary based on the type of device. For example, if the device is a hard drive in a USB enclosure, this may be the combination of the drive model and the enclosure model.\nThis value is not provided by all devices, so it may be null in some cases.",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "example": "JUMPDRIVE",
          "title": "For events detected on removable media, the name of the removable device.",
          "type": "string",
          "x-nullable": true
        },
        "partitionId": {
          "example": [
            "disk0s2",
            "disk0s3"
          ],
          "items": {
            "example": "[\"disk0s2\",\"disk0s3\"]",
            "title": "For events detected on removable media, a unique identifier assigned to the volume/partition when it was formatted. Windows devices refer to this as the VolumeGuid. On Mac devices, this is the Disk / Partition UUID, which appears when running the Terminal command diskUtil info.",
            "type": "string"
          },
          "title": "For events detected on removable media, a unique identifier assigned to the volume/partition when it was formatted. Windows devices refer to this as the VolumeGuid. On Mac devices, this is the Disk / Partition UUID, which appears when running the Terminal command diskUtil info.",
          "type": "array"
        },
        "serialNumber": {
          "example": "4C531001550407108465",
          "title": "For events detected on removable media, the serial number of the removable device.",
          "type": "string",
          "x-nullable": true
        },
        "vendor": {
          "example": "SanDisk",
          "title": "For events detected on removable media, the vendor of the removable device.",
          "type": "string",
          "x-nullable": true
        },
        "volumeName": {
          "example": [
            "MY_FILES"
          ],
          "items": {
            "example": "[\"MY_FILES\"]",
            "title": "For events detected on removable media, the name assigned to the volume when it was formatted, as reported by the device's operating system. This is also frequently called the \"partition\" name.",
            "type": "string"
          },
          "title": "For events detected on removable media, the name assigned to the volume when it was formatted, as reported by the device's operating system. This is also frequently called the \"partition\" name.",
          "type": "array"
        }
      },
      "required": [
        "partitionId",
        "volumeName"
      ],
      "title": "Metadata about the removable media destination.",
      "type": "object"
    },
    "Report-file-events": {
      "properties": {
        "count": {
          "example": 20,
          "format": "int32",
          "title": "The total number of rows returned in the report.",
          "type": "integer",
          "x-nullable": true
        },
        "description": {
          "example": "Top 20 accounts based on annual revenue",
          "title": "The description of the report.",
          "type": "string",
          "x-nullable": true
        },
        "headers": {
          "example": [
            "USERNAME",
            "ACCOUNT_NAME",
            "TYPE",
            "DUE_DATE",
            "LAST_UPDATE",
            "ADDRESS1_STATE"
          ],
          "items": {
            "example": "[\"USERNAME\",\"ACCOUNT_NAME\",\"TYPE\",\"DUE_DATE\",\"LAST_UPDATE\",\"ADDRESS1_STATE\"]",
            "title": "The list of column headers that are in the report.",
            "type": "string"
          },
          "title": "The list of column headers that are in the report.",
          "type": "array"
        },
        "id": {
          "example": "00OB00000042FHdMAM",
          "title": "The ID of the report associated with this event.",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "example": "Top Accounts Report",
          "title": "The display name of the report.",
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "enum": [
            "REPORT_TYPE_AD_HOC",
            "REPORT_TYPE_SAVED"
          ],
          "example": "REPORT_TYPE_SAVED",
          "title": "Indicates if the report is \"REPORT_TYPE_AD_HOC\" or \"REPORT_TYPE_SAVED\".",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "headers"
      ],
      "title": "Metadata for reports from 3rd party sources, such Salesforce downloads.",
      "type": "object"
    },
    "Risk-file-events": {
      "properties": {
        "indicators": {
          "items": {
            "$ref": "#/definitions/RiskIndicator-file-events"
          },
          "title": "List of risk indicators identified for this event. If more than one risk indicator applies to this event, the sum of all indicators determines the total risk score.",
          "type": "array"
        },
        "score": {
          "example": 12,
          "format": "int32",
          "title": "Sum of the weights for each risk indicator. This score is used to determine the overall risk severity of the event.",
          "type": "integer",
          "x-nullable": true
        },
        "severity": {
          "enum": [
            "NO_RISK_INDICATED",
            "LOW",
            "MODERATE",
            "HIGH",
            "CRITICAL"
          ],
          "example": "CRITICAL",
          "title": "The general risk assessment of the event, based on the numeric score.",
          "type": "string",
          "x-nullable": true
        },
        "trustReason": {
          "example": "TRUSTED_DOMAIN_BROWSER_URL",
          "title": "The reason the event is trusted. trustReason is only populated if trusted is true for this event.",
          "type": "string",
          "x-nullable": true
        },
        "trusted": {
          "example": true,
          "title": "Indicates whether or not the file activity is trusted based on your Data Preferences settings.",
          "type": "boolean",
          "x-nullable": true
        },
        "untrustedValues": {
          "$ref": "#/definitions/UntrustedValues-file-events"
        }
      },
      "required": [
        "indicators",
        "untrustedValues"
      ],
      "title": "Risk factor metadata.",
      "type": "object"
    },
    "RiskIndicator-file-events": {
      "properties": {
        "id": {
          "title": "The unique identifier for the risk indicator.",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "example": "Browser upload",
          "title": "Name of the risk indicator at the time of the event. If the name has changed, use the id to obtain the current name.",
          "type": "string",
          "x-nullable": true
        },
        "weight": {
          "example": 5,
          "format": "int32",
          "title": "Configured weight of the risk indicator at the time this event was seen.",
          "type": "integer",
          "x-nullable": true
        }
      },
      "title": "List of risk indicators identified for this event. If more than one risk indicator applies to this event, the sum of all indicators determines the total risk score.",
      "type": "object"
    },
    "SavedSearchDetailSearchTermV1-file-events": {
      "properties": {
        "apiVersion": {
          "example": 1,
          "format": "int32",
          "title": "Version of the API used to create the search.",
          "type": "integer",
          "x-nullable": true
        },
        "columns": {
          "example": [
            "eventId",
            "eventType"
          ],
          "items": {
            "enum": [
              "eventId",
              "eventType",
              "eventTimestamp",
              "insertionTimestamp",
              "filePath",
              "fileName",
              "fileType",
              "fileCategory",
              "fileCategoryByBytes",
              "fileCategoryByExtension",
              "fileSize",
              "fileOwner",
              "md5Checksum",
              "sha256Checksum",
              "createTimestamp",
              "modifyTimestamp",
              "deviceUserName",
              "deviceUid",
              "userUid",
              "osHostName",
              "domainName",
              "publicIpAddress",
              "privateIpAddresses",
              "actor",
              "directoryId",
              "source",
              "url",
              "shared",
              "sharedWith",
              "sharingTypeAdded",
              "cloudDriveId",
              "detectionSourceAlias",
              "fileId",
              "exposure",
              "processOwner",
              "processName",
              "windowTitle",
              "tabUrl",
              "tabTitles",
              "tabTitleErrors",
              "tabUrls",
              "tabUrlErrors",
              "sourceTabTitles",
              "sourceTabTitleErrors",
              "sourceTabUrls",
              "sourceTabUrlErrors",
              "fileClassificationVendors",
              "fileClassificationValues",
              "removableMediaVendor",
              "removableMediaName",
              "removableMediaSerialNumber",
              "removableMediaCapacity",
              "removableMediaBusType",
              "removableMediaMediaName",
              "removableMediaVolumeName",
              "removableMediaPartitionId",
              "syncDestination",
              "syncDestinationUsername",
              "emailDlpPolicyNames",
              "emailSubject",
              "emailSender",
              "emailFrom",
              "emailRecipients",
              "outsideActiveHours",
              "mimeTypeByBytes",
              "mimeTypeByExtension",
              "mimeTypeMismatch",
              "printJobName",
              "printerName",
              "printedFilesBackupPath",
              "remoteActivity",
              "trusted",
              "trustReason",
              "operatingSystemUser",
              "destinationCategory",
              "destinationName",
              "sourceCategory",
              "sourceName",
              "riskScore",
              "riskSeverity",
              "riskIndicatorNames",
              "riskIndicatorWeights",
              "reportName",
              "reportDescription",
              "reportColumnHeaders",
              "reportRecordCount",
              "reportType",
              "reportId"
            ],
            "example": "eventId",
            "title": "List of columns to be displayed in the web app for the search.",
            "type": "string"
          },
          "title": "List of columns to be displayed in the web app for the search.",
          "type": "array",
          "x-nullable": true
        },
        "createdByUID": {
          "example": "806150685834341101",
          "title": "User UID of the user who created the saved search.",
          "type": "string",
          "x-nullable": true
        },
        "createdByUsername": {
          "example": "adrian@example.com",
          "title": "Username of the user who created the saved search.",
          "type": "string",
          "x-nullable": true
        },
        "creationTimestamp": {
          "example": "2020-10-27T15:16:05.369203Z",
          "format": "date-time",
          "title": "Time at which the saved search was created.",
          "type": "string",
          "x-nullable": true
        },
        "groupClause": {
          "enum": [
            "AND",
            "OR"
          ],
          "example": "OR",
          "title": "Grouping clause for any specified groups.",
          "type": "string",
          "x-nullable": true
        },
        "groups": {
          "items": {
            "$ref": "#/definitions/FilterGroupSearchTermV1-file-events"
          },
          "title": "One or more FilterGroups to be combined in a query.",
          "type": "array",
          "x-nullable": true
        },
        "id": {
          "example": "cde979fa-d551-4be9-b242-39e75b824089",
          "title": "Unique identifier for the saved search.",
          "type": "string",
          "x-nullable": true
        },
        "modifiedByUID": {
          "example": "421380797518239242",
          "title": "User UID of the user who last modified the saved search.",
          "type": "string",
          "x-nullable": true
        },
        "modifiedByUsername": {
          "example": "ari@example.com",
          "title": "Username of the user who last modified the saved search.",
          "type": "string",
          "x-nullable": true
        },
        "modifiedTimestamp": {
          "example": "2020-10-27T15:20:26.311894Z",
          "format": "date-time",
          "title": "Time at which the saved search was last modified.",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "example": "Example saved search",
          "title": "Name given to the saved search.",
          "type": "string",
          "x-nullable": true
        },
        "notes": {
          "example": "This search returns all events.",
          "title": "Optional notes about the search.",
          "type": "string",
          "x-nullable": true
        },
        "srtDir": {
          "enum": [
            "asc",
            "desc"
          ],
          "example": "asc",
          "title": "Sort direction.",
          "type": "string",
          "x-nullable": true
        },
        "srtKey": {
          "enum": [
            "eventId",
            "eventType",
            "eventTimestamp",
            "insertionTimestamp",
            "filePath",
            "fileName",
            "fileType",
            "fileCategory",
            "fileCategoryByBytes",
            "fileCategoryByExtension",
            "fileSize",
            "fileOwner",
            "md5Checksum",
            "sha256Checksum",
            "createTimestamp",
            "modifyTimestamp",
            "deviceUserName",
            "deviceUid",
            "userUid",
            "osHostName",
            "domainName",
            "publicIpAddress",
            "privateIpAddresses",
            "actor",
            "directoryId",
            "source",
            "url",
            "shared",
            "sharedWith",
            "sharingTypeAdded",
            "cloudDriveId",
            "detectionSourceAlias",
            "fileId",
            "exposure",
            "processOwner",
            "processName",
            "windowTitle",
            "tabUrl",
            "tabTitles",
            "tabTitleErrors",
            "tabUrls",
            "tabUrlErrors",
            "sourceTabTitles",
            "sourceTabTitleErrors",
            "sourceTabUrls",
            "sourceTabUrlErrors",
            "fileClassificationVendors",
            "fileClassificationValues",
            "removableMediaVendor",
            "removableMediaName",
            "removableMediaSerialNumber",
            "removableMediaCapacity",
            "removableMediaBusType",
            "removableMediaMediaName",
            "removableMediaVolumeName",
            "removableMediaPartitionId",
            "syncDestination",
            "syncDestinationUsername",
            "emailDlpPolicyNames",
            "emailSubject",
            "emailSender",
            "emailFrom",
            "emailRecipients",
            "outsideActiveHours",
            "mimeTypeByBytes",
            "mimeTypeByExtension",
            "mimeTypeMismatch",
            "printJobName",
            "printerName",
            "printedFilesBackupPath",
            "remoteActivity",
            "trusted",
            "trustReason",
            "operatingSystemUser",
            "destinationCategory",
            "destinationName",
            "sourceCategory",
            "sourceName",
            "riskScore",
            "riskSeverity",
            "riskIndicatorNames",
            "riskIndicatorWeights",
            "reportName",
            "reportDescription",
            "reportColumnHeaders",
            "reportRecordCount",
            "reportType",
            "reportId"
          ],
          "example": "eventId",
          "title": "Search term for sorting.",
          "type": "string",
          "x-nullable": true
        }
      },
      "title": "List of saved searches in the response.",
      "type": "object"
    },
    "SavedSearchDetailSearchTermV2-file-events": {
      "properties": {
        "apiVersion": {
          "example": 1,
          "format": "int32",
          "title": "Version of the API used to create the search.",
          "type": "integer",
          "x-nullable": true
        },
        "columns": {
          "example": [
            "@timestamp",
            "event.id"
          ],
          "items": {
            "enum": [
              "@timestamp",
              "event.id",
              "event.inserted",
              "event.ingested",
              "event.action",
              "event.shareType",
              "event.observer",
              "event.detectorDisplayName",
              "event.vector",
              "user.email",
              "user.id",
              "user.deviceUid",
              "file.name",
              "file.originalName",
              "file.directory",
              "file.originalDirectory",
              "file.category",
              "file.mimeTypeByBytes",
              "file.categoryByBytes",
              "file.mimeTypeByExtension",
              "file.categoryByExtension",
              "file.sizeInBytes",
              "file.owner",
              "file.created",
              "file.modified",
              "file.hash.md5",
              "file.hash.sha256",
              "file.hash.md5Error",
              "file.hash.sha256Error",
              "file.id",
              "file.url",
              "file.directoryId",
              "file.cloudDriveId",
              "file.classifications.value",
              "file.classifications.vendor",
              "file.changeType",
              "file.archiveId",
              "file.parentArchiveId",
              "file.passwordProtected",
              "report.id",
              "report.name",
              "report.description",
              "report.headers",
              "report.count",
              "report.type",
              "source.category",
              "source.name",
              "source.user.email",
              "source.domain",
              "source.ip",
              "source.privateIp",
              "source.operatingSystem",
              "source.email.sender",
              "source.email.from",
              "source.remoteHostname",
              "source.removableMedia.vendor",
              "source.removableMedia.mediaName",
              "source.removableMedia.serialNumber",
              "source.removableMedia.capacity",
              "source.removableMedia.busType",
              "source.removableMedia.name",
              "source.removableMedia.volumeName",
              "source.removableMedia.partitionId",
              "source.tabs.title",
              "source.tabs.titleError",
              "source.tabs.url",
              "source.tabs.urlError",
              "source.accountName",
              "source.accountType",
              "source.domains",
              "destination.category",
              "destination.name",
              "destination.user.email",
              "destination.ip",
              "destination.privateIp",
              "destination.operatingSystem",
              "destination.printJobName",
              "destination.printerName",
              "destination.printedFilesBackupPath",
              "destination.email.recipients",
              "destination.email.subject",
              "destination.removableMedia.vendor",
              "destination.removableMedia.mediaName",
              "destination.removableMedia.serialNumber",
              "destination.removableMedia.capacity",
              "destination.removableMedia.busType",
              "destination.removableMedia.name",
              "destination.removableMedia.volumeName",
              "destination.removableMedia.partitionId",
              "destination.tabs.title",
              "destination.tabs.url",
              "destination.tabs.titleError",
              "destination.tabs.urlError",
              "destination.accountName",
              "destination.accountType",
              "destination.domains",
              "destination.remoteHostname",
              "process.executable",
              "process.owner",
              "process.extension.browser",
              "process.extension.version",
              "process.extension.loggedInUser",
              "risk.score",
              "risk.severity",
              "risk.indicators.name",
              "risk.indicators.id",
              "risk.indicators.weight",
              "risk.trusted",
              "risk.trustReason",
              "risk.untrustedValues.accountNames",
              "risk.untrustedValues.domains",
              "risk.untrustedValues.gitRepositoryUris",
              "risk.untrustedValues.slackWorkspaces",
              "risk.untrustedValues.urlPaths",
              "file.acquiredFrom.eventId",
              "file.acquiredFrom.sourceAccountName",
              "file.acquiredFrom.sourceAccountType",
              "file.acquiredFrom.sourceCategory",
              "file.acquiredFrom.sourceName",
              "file.acquiredFrom.sourceUser.email",
              "file.acquiredFrom.agentTimestamp",
              "file.acquiredFrom.userEmail",
              "file.acquiredFrom.eventAction",
              "file.acquiredFrom.tabs.title",
              "file.acquiredFrom.tabs.titleError",
              "file.acquiredFrom.tabs.url",
              "file.acquiredFrom.tabs.urlError",
              "file.acquiredFrom.sourceDomains",
              "file.acquiredFrom.fileName",
              "file.acquiredFrom.md5",
              "file.acquiredFrom.git.repositoryEmail",
              "file.acquiredFrom.git.repositoryUri",
              "file.acquiredFrom.git.repositoryUser",
              "git.eventId",
              "git.lastCommitHash",
              "git.repositoryUri",
              "git.repositoryUser",
              "git.repositoryEmail",
              "git.repositoryEndpointPath"
            ],
            "example": "@timestamp",
            "title": "List of columns to be displayed in the web app for the search.",
            "type": "string"
          },
          "title": "List of columns to be displayed in the web app for the search.",
          "type": "array",
          "x-nullable": true
        },
        "createdByUID": {
          "example": "806150685834341101",
          "title": "User UID of the user who created the saved search.",
          "type": "string",
          "x-nullable": true
        },
        "createdByUsername": {
          "example": "adrian@example.com",
          "title": "Username of the user who created the saved search.",
          "type": "string",
          "x-nullable": true
        },
        "creationTimestamp": {
          "example": "2020-10-27T15:16:05.369203Z",
          "format": "date-time",
          "title": "Time at which the saved search was created.",
          "type": "string",
          "x-nullable": true
        },
        "groupClause": {
          "enum": [
            "AND",
            "OR"
          ],
          "example": "OR",
          "title": "Grouping clause for any specified groups.",
          "type": "string",
          "x-nullable": true
        },
        "groups": {
          "items": {
            "$ref": "#/definitions/FilterGroupSearchTermV2-file-events"
          },
          "title": "One or more FilterGroups to be combined in a query.",
          "type": "array",
          "x-nullable": true
        },
        "id": {
          "example": "cde979fa-d551-4be9-b242-39e75b824089",
          "title": "Unique identifier for the saved search.",
          "type": "string",
          "x-nullable": true
        },
        "modifiedByUID": {
          "example": "421380797518239242",
          "title": "User UID of the user who last modified the saved search.",
          "type": "string",
          "x-nullable": true
        },
        "modifiedByUsername": {
          "example": "ari@example.com",
          "title": "Username of the user who last modified the saved search.",
          "type": "string",
          "x-nullable": true
        },
        "modifiedTimestamp": {
          "example": "2020-10-27T15:20:26.311894Z",
          "format": "date-time",
          "title": "Time at which the saved search was last modified.",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "example": "Example saved search",
          "title": "Name given to the saved search.",
          "type": "string",
          "x-nullable": true
        },
        "notes": {
          "example": "This search returns all events.",
          "title": "Optional notes about the search.",
          "type": "string",
          "x-nullable": true
        },
        "srtDir": {
          "enum": [
            "asc",
            "desc"
          ],
          "example": "asc",
          "title": "Sort direction.",
          "type": "string",
          "x-nullable": true
        },
        "srtKey": {
          "enum": [
            "@timestamp",
            "event.id",
            "event.inserted",
            "event.ingested",
            "event.action",
            "event.shareType",
            "event.observer",
            "event.detectorDisplayName",
            "event.vector",
            "user.email",
            "user.id",
            "user.deviceUid",
            "file.name",
            "file.originalName",
            "file.directory",
            "file.originalDirectory",
            "file.category",
            "file.mimeTypeByBytes",
            "file.categoryByBytes",
            "file.mimeTypeByExtension",
            "file.categoryByExtension",
            "file.sizeInBytes",
            "file.owner",
            "file.created",
            "file.modified",
            "file.hash.md5",
            "file.hash.sha256",
            "file.hash.md5Error",
            "file.hash.sha256Error",
            "file.id",
            "file.url",
            "file.directoryId",
            "file.cloudDriveId",
            "file.classifications.value",
            "file.classifications.vendor",
            "file.changeType",
            "file.archiveId",
            "file.parentArchiveId",
            "file.passwordProtected",
            "report.id",
            "report.name",
            "report.description",
            "report.headers",
            "report.count",
            "report.type",
            "source.category",
            "source.name",
            "source.user.email",
            "source.domain",
            "source.ip",
            "source.privateIp",
            "source.operatingSystem",
            "source.email.sender",
            "source.email.from",
            "source.remoteHostname",
            "source.removableMedia.vendor",
            "source.removableMedia.mediaName",
            "source.removableMedia.serialNumber",
            "source.removableMedia.capacity",
            "source.removableMedia.busType",
            "source.removableMedia.name",
            "source.removableMedia.volumeName",
            "source.removableMedia.partitionId",
            "source.tabs.title",
            "source.tabs.titleError",
            "source.tabs.url",
            "source.tabs.urlError",
            "source.accountName",
            "source.accountType",
            "source.domains",
            "destination.category",
            "destination.name",
            "destination.user.email",
            "destination.ip",
            "destination.privateIp",
            "destination.operatingSystem",
            "destination.printJobName",
            "destination.printerName",
            "destination.printedFilesBackupPath",
            "destination.email.recipients",
            "destination.email.subject",
            "destination.removableMedia.vendor",
            "destination.removableMedia.mediaName",
            "destination.removableMedia.serialNumber",
            "destination.removableMedia.capacity",
            "destination.removableMedia.busType",
            "destination.removableMedia.name",
            "destination.removableMedia.volumeName",
            "destination.removableMedia.partitionId",
            "destination.tabs.title",
            "destination.tabs.url",
            "destination.tabs.titleError",
            "destination.tabs.urlError",
            "destination.accountName",
            "destination.accountType",
            "destination.domains",
            "destination.remoteHostname",
            "process.executable",
            "process.owner",
            "process.extension.browser",
            "process.extension.version",
            "process.extension.loggedInUser",
            "risk.score",
            "risk.severity",
            "risk.indicators.name",
            "risk.indicators.id",
            "risk.indicators.weight",
            "risk.trusted",
            "risk.trustReason",
            "risk.untrustedValues.accountNames",
            "risk.untrustedValues.domains",
            "risk.untrustedValues.gitRepositoryUris",
            "risk.untrustedValues.slackWorkspaces",
            "risk.untrustedValues.urlPaths",
            "file.acquiredFrom.eventId",
            "file.acquiredFrom.sourceAccountName",
            "file.acquiredFrom.sourceAccountType",
            "file.acquiredFrom.sourceCategory",
            "file.acquiredFrom.sourceName",
            "file.acquiredFrom.sourceUser.email",
            "file.acquiredFrom.agentTimestamp",
            "file.acquiredFrom.userEmail",
            "file.acquiredFrom.eventAction",
            "file.acquiredFrom.tabs.title",
            "file.acquiredFrom.tabs.titleError",
            "file.acquiredFrom.tabs.url",
            "file.acquiredFrom.tabs.urlError",
            "file.acquiredFrom.sourceDomains",
            "file.acquiredFrom.fileName",
            "file.acquiredFrom.md5",
            "file.acquiredFrom.git.repositoryEmail",
            "file.acquiredFrom.git.repositoryUri",
            "file.acquiredFrom.git.repositoryUser",
            "git.eventId",
            "git.lastCommitHash",
            "git.repositoryUri",
            "git.repositoryUser",
            "git.repositoryEmail",
            "git.repositoryEndpointPath"
          ],
          "example": "@timestamp",
          "title": "Search term for sorting.",
          "type": "string",
          "x-nullable": true
        }
      },
      "title": "List of saved searches in the response.",
      "type": "object"
    },
    "SavedSearchResponseSearchTermV1-file-events": {
      "properties": {
        "searches": {
          "items": {
            "$ref": "#/definitions/SavedSearchDetailSearchTermV1-file-events"
          },
          "title": "List of saved searches in the response.",
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "SavedSearchResponseSearchTermV2-file-events": {
      "properties": {
        "searches": {
          "items": {
            "$ref": "#/definitions/SavedSearchDetailSearchTermV2-file-events"
          },
          "title": "List of saved searches in the response.",
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "SearchFilterSearchTermV1-file-events": {
      "properties": {
        "operator": {
          "enum": [
            "IS",
            "IS_NOT",
            "IS_ANY",
            "IS_NONE",
            "ON_OR_BEFORE",
            "ON_OR_AFTER",
            "ON",
            "WITHIN_THE_LAST",
            "LESS_THAN",
            "GREATER_THAN",
            "EXISTS",
            "DOES_NOT_EXIST"
          ],
          "example": "IS_NOT",
          "title": "The type of match to perform.  Default value is `IS`.",
          "type": "string",
          "x-nullable": true
        },
        "term": {
          "enum": [
            "eventId",
            "eventType",
            "eventTimestamp",
            "insertionTimestamp",
            "filePath",
            "fileName",
            "fileType",
            "fileCategory",
            "fileCategoryByBytes",
            "fileCategoryByExtension",
            "fileSize",
            "fileOwner",
            "md5Checksum",
            "sha256Checksum",
            "createTimestamp",
            "modifyTimestamp",
            "deviceUserName",
            "deviceUid",
            "userUid",
            "osHostName",
            "domainName",
            "publicIpAddress",
            "privateIpAddresses",
            "actor",
            "directoryId",
            "source",
            "url",
            "shared",
            "sharedWith",
            "sharingTypeAdded",
            "cloudDriveId",
            "detectionSourceAlias",
            "fileId",
            "exposure",
            "processOwner",
            "processName",
            "windowTitle",
            "tabUrl",
            "tabTitles",
            "tabTitleErrors",
            "tabUrls",
            "tabUrlErrors",
            "sourceTabTitles",
            "sourceTabTitleErrors",
            "sourceTabUrls",
            "sourceTabUrlErrors",
            "fileClassificationVendors",
            "fileClassificationValues",
            "removableMediaVendor",
            "removableMediaName",
            "removableMediaSerialNumber",
            "removableMediaCapacity",
            "removableMediaBusType",
            "removableMediaMediaName",
            "removableMediaVolumeName",
            "removableMediaPartitionId",
            "syncDestination",
            "syncDestinationUsername",
            "emailDlpPolicyNames",
            "emailSubject",
            "emailSender",
            "emailFrom",
            "emailRecipients",
            "outsideActiveHours",
            "mimeTypeByBytes",
            "mimeTypeByExtension",
            "mimeTypeMismatch",
            "printJobName",
            "printerName",
            "printedFilesBackupPath",
            "remoteActivity",
            "trusted",
            "trustReason",
            "operatingSystemUser",
            "destinationCategory",
            "destinationName",
            "sourceCategory",
            "sourceName",
            "riskScore",
            "riskSeverity",
            "riskIndicatorNames",
            "riskIndicatorWeights",
            "reportName",
            "reportDescription",
            "reportColumnHeaders",
            "reportRecordCount",
            "reportType",
            "reportId"
          ],
          "example": "eventId",
          "title": "The field to match.",
          "type": "string",
          "x-nullable": true
        },
        "value": {
          "example": "ari@example.com",
          "title": "The input for the search. This is a string in most cases. For the IS_ANY or IS_NONE operator, use an array of strings.",
          "type": "object",
          "x-nullable": true
        }
      },
      "required": [
        "value"
      ],
      "title": "One or more SearchFilters to be combined in a query.",
      "type": "object"
    },
    "SearchFilterSearchTermV2-file-events": {
      "properties": {
        "operator": {
          "enum": [
            "IS",
            "IS_NOT",
            "IS_ANY",
            "IS_NONE",
            "ON_OR_BEFORE",
            "ON_OR_AFTER",
            "ON",
            "WITHIN_THE_LAST",
            "LESS_THAN",
            "GREATER_THAN",
            "EXISTS",
            "DOES_NOT_EXIST"
          ],
          "example": "IS_NOT",
          "title": "The type of match to perform.  Default value is `IS`.",
          "type": "string",
          "x-nullable": true
        },
        "term": {
          "enum": [
            "@timestamp",
            "event.id",
            "event.inserted",
            "event.ingested",
            "event.action",
            "event.shareType",
            "event.observer",
            "event.detectorDisplayName",
            "event.vector",
            "user.email",
            "user.id",
            "user.deviceUid",
            "file.name",
            "file.originalName",
            "file.directory",
            "file.originalDirectory",
            "file.category",
            "file.mimeTypeByBytes",
            "file.categoryByBytes",
            "file.mimeTypeByExtension",
            "file.categoryByExtension",
            "file.sizeInBytes",
            "file.owner",
            "file.created",
            "file.modified",
            "file.hash.md5",
            "file.hash.sha256",
            "file.hash.md5Error",
            "file.hash.sha256Error",
            "file.id",
            "file.url",
            "file.directoryId",
            "file.cloudDriveId",
            "file.classifications.value",
            "file.classifications.vendor",
            "file.changeType",
            "file.archiveId",
            "file.parentArchiveId",
            "file.passwordProtected",
            "report.id",
            "report.name",
            "report.description",
            "report.headers",
            "report.count",
            "report.type",
            "source.category",
            "source.name",
            "source.user.email",
            "source.domain",
            "source.ip",
            "source.privateIp",
            "source.operatingSystem",
            "source.email.sender",
            "source.email.from",
            "source.remoteHostname",
            "source.removableMedia.vendor",
            "source.removableMedia.mediaName",
            "source.removableMedia.serialNumber",
            "source.removableMedia.capacity",
            "source.removableMedia.busType",
            "source.removableMedia.name",
            "source.removableMedia.volumeName",
            "source.removableMedia.partitionId",
            "source.tabs.title",
            "source.tabs.titleError",
            "source.tabs.url",
            "source.tabs.urlError",
            "source.accountName",
            "source.accountType",
            "source.domains",
            "destination.category",
            "destination.name",
            "destination.user.email",
            "destination.ip",
            "destination.privateIp",
            "destination.operatingSystem",
            "destination.printJobName",
            "destination.printerName",
            "destination.printedFilesBackupPath",
            "destination.email.recipients",
            "destination.email.subject",
            "destination.removableMedia.vendor",
            "destination.removableMedia.mediaName",
            "destination.removableMedia.serialNumber",
            "destination.removableMedia.capacity",
            "destination.removableMedia.busType",
            "destination.removableMedia.name",
            "destination.removableMedia.volumeName",
            "destination.removableMedia.partitionId",
            "destination.tabs.title",
            "destination.tabs.url",
            "destination.tabs.titleError",
            "destination.tabs.urlError",
            "destination.accountName",
            "destination.accountType",
            "destination.domains",
            "destination.remoteHostname",
            "process.executable",
            "process.owner",
            "process.extension.browser",
            "process.extension.version",
            "process.extension.loggedInUser",
            "risk.score",
            "risk.severity",
            "risk.indicators.name",
            "risk.indicators.id",
            "risk.indicators.weight",
            "risk.trusted",
            "risk.trustReason",
            "risk.untrustedValues.accountNames",
            "risk.untrustedValues.domains",
            "risk.untrustedValues.gitRepositoryUris",
            "risk.untrustedValues.slackWorkspaces",
            "risk.untrustedValues.urlPaths",
            "file.acquiredFrom.eventId",
            "file.acquiredFrom.sourceAccountName",
            "file.acquiredFrom.sourceAccountType",
            "file.acquiredFrom.sourceCategory",
            "file.acquiredFrom.sourceName",
            "file.acquiredFrom.sourceUser.email",
            "file.acquiredFrom.agentTimestamp",
            "file.acquiredFrom.userEmail",
            "file.acquiredFrom.eventAction",
            "file.acquiredFrom.tabs.title",
            "file.acquiredFrom.tabs.titleError",
            "file.acquiredFrom.tabs.url",
            "file.acquiredFrom.tabs.urlError",
            "file.acquiredFrom.sourceDomains",
            "file.acquiredFrom.fileName",
            "file.acquiredFrom.md5",
            "file.acquiredFrom.git.repositoryEmail",
            "file.acquiredFrom.git.repositoryUri",
            "file.acquiredFrom.git.repositoryUser",
            "git.eventId",
            "git.lastCommitHash",
            "git.repositoryUri",
            "git.repositoryUser",
            "git.repositoryEmail",
            "git.repositoryEndpointPath"
          ],
          "example": "@timestamp",
          "title": "The field to match.",
          "type": "string",
          "x-nullable": true
        },
        "value": {
          "example": "ari@example.com",
          "title": "The input for the search. This is a string in most cases. For the IS_ANY or IS_NONE operator, use an array of strings.",
          "type": "object",
          "x-nullable": true
        }
      },
      "required": [
        "value"
      ],
      "title": "One or more SearchFilters to be combined in a query.",
      "type": "object"
    },
    "SearchRequestSearchTermV1-file-events": {
      "properties": {
        "groupClause": {
          "enum": [
            "AND",
            "OR"
          ],
          "example": "OR",
          "title": "Grouping clause for any specified groups.  Default is `AND`.",
          "type": "string",
          "x-nullable": true
        },
        "groups": {
          "items": {
            "$ref": "#/definitions/FilterGroupSearchTermV1-file-events"
          },
          "title": "One or more FilterGroups to be combined in a query.",
          "type": "array"
        },
        "pgNum": {
          "example": 1,
          "format": "int32",
          "title": "Page number for search; ignored if pgToken is included.  Default is 1.",
          "type": "integer",
          "x-nullable": true
        },
        "pgSize": {
          "example": 100,
          "format": "int32",
          "title": "Max number of results to return for a page.  Default is 100.",
          "type": "integer",
          "x-nullable": true
        },
        "pgToken": {
          "example": "0_147e9445-2f30-4a91-8b2a-9455332e880a_973435567569502913_986467523038446097_163",
          "title": "A token used to indicate the starting point for additional page results. Typically, you obtain the pgToken value from the nextPgToken provided in a previous request. A pgToken is the only way to page past 10,000 results. If pgToken is supplied, pgNum is ignored. Provide empty string to retrieve the 'first page of results and null to use the pgNum value.  Default is null.",
          "type": "string",
          "x-nullable": true
        },
        "srtDir": {
          "enum": [
            "asc",
            "desc"
          ],
          "example": "asc",
          "title": "Sort direction.  Default is `desc`.",
          "type": "string",
          "x-nullable": true
        },
        "srtKey": {
          "enum": [
            "eventId",
            "eventType",
            "eventTimestamp",
            "insertionTimestamp",
            "filePath",
            "fileName",
            "fileType",
            "fileCategory",
            "fileCategoryByBytes",
            "fileCategoryByExtension",
            "fileSize",
            "fileOwner",
            "md5Checksum",
            "sha256Checksum",
            "createTimestamp",
            "modifyTimestamp",
            "deviceUserName",
            "deviceUid",
            "userUid",
            "osHostName",
            "domainName",
            "publicIpAddress",
            "privateIpAddresses",
            "actor",
            "directoryId",
            "source",
            "url",
            "shared",
            "sharedWith",
            "sharingTypeAdded",
            "cloudDriveId",
            "detectionSourceAlias",
            "fileId",
            "exposure",
            "processOwner",
            "processName",
            "windowTitle",
            "tabUrl",
            "tabTitles",
            "tabTitleErrors",
            "tabUrls",
            "tabUrlErrors",
            "sourceTabTitles",
            "sourceTabTitleErrors",
            "sourceTabUrls",
            "sourceTabUrlErrors",
            "fileClassificationVendors",
            "fileClassificationValues",
            "removableMediaVendor",
            "removableMediaName",
            "removableMediaSerialNumber",
            "removableMediaCapacity",
            "removableMediaBusType",
            "removableMediaMediaName",
            "removableMediaVolumeName",
            "removableMediaPartitionId",
            "syncDestination",
            "syncDestinationUsername",
            "emailDlpPolicyNames",
            "emailSubject",
            "emailSender",
            "emailFrom",
            "emailRecipients",
            "outsideActiveHours",
            "mimeTypeByBytes",
            "mimeTypeByExtension",
            "mimeTypeMismatch",
            "printJobName",
            "printerName",
            "printedFilesBackupPath",
            "remoteActivity",
            "trusted",
            "trustReason",
            "operatingSystemUser",
            "destinationCategory",
            "destinationName",
            "sourceCategory",
            "sourceName",
            "riskScore",
            "riskSeverity",
            "riskIndicatorNames",
            "riskIndicatorWeights",
            "reportName",
            "reportDescription",
            "reportColumnHeaders",
            "reportRecordCount",
            "reportType",
            "reportId"
          ],
          "example": "eventId",
          "title": "Search term for sorting.",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "groups"
      ],
      "type": "object"
    },
    "SearchRequestSearchTermV2-file-events": {
      "properties": {
        "groupClause": {
          "enum": [
            "AND",
            "OR"
          ],
          "example": "OR",
          "title": "Grouping clause for any specified groups.  Default is `AND`.",
          "type": "string",
          "x-nullable": true
        },
        "groups": {
          "items": {
            "$ref": "#/definitions/FilterGroupSearchTermV2-file-events"
          },
          "title": "One or more FilterGroups to be combined in a query.",
          "type": "array"
        },
        "pgNum": {
          "example": 1,
          "format": "int32",
          "title": "Page number for search; ignored if pgToken is included.  Default is 1.",
          "type": "integer",
          "x-nullable": true
        },
        "pgSize": {
          "example": 100,
          "format": "int32",
          "title": "Max number of results to return for a page.  Default is 100.",
          "type": "integer",
          "x-nullable": true
        },
        "pgToken": {
          "example": "0_147e9445-2f30-4a91-8b2a-9455332e880a_973435567569502913_986467523038446097_163",
          "title": "A token used to indicate the starting point for additional page results. Typically, you obtain the pgToken value from the nextPgToken provided in a previous request. A pgToken is the only way to page past 10,000 results. If pgToken is supplied, pgNum is ignored. Provide empty string to retrieve the 'first page of results and null to use the pgNum value.  Default is null.",
          "type": "string",
          "x-nullable": true
        },
        "srtDir": {
          "enum": [
            "asc",
            "desc"
          ],
          "example": "asc",
          "title": "Sort direction.  Default is `desc`.",
          "type": "string",
          "x-nullable": true
        },
        "srtKey": {
          "enum": [
            "@timestamp",
            "event.id",
            "event.inserted",
            "event.ingested",
            "event.action",
            "event.shareType",
            "event.observer",
            "event.detectorDisplayName",
            "event.vector",
            "user.email",
            "user.id",
            "user.deviceUid",
            "file.name",
            "file.originalName",
            "file.directory",
            "file.originalDirectory",
            "file.category",
            "file.mimeTypeByBytes",
            "file.categoryByBytes",
            "file.mimeTypeByExtension",
            "file.categoryByExtension",
            "file.sizeInBytes",
            "file.owner",
            "file.created",
            "file.modified",
            "file.hash.md5",
            "file.hash.sha256",
            "file.hash.md5Error",
            "file.hash.sha256Error",
            "file.id",
            "file.url",
            "file.directoryId",
            "file.cloudDriveId",
            "file.classifications.value",
            "file.classifications.vendor",
            "file.changeType",
            "file.archiveId",
            "file.parentArchiveId",
            "file.passwordProtected",
            "report.id",
            "report.name",
            "report.description",
            "report.headers",
            "report.count",
            "report.type",
            "source.category",
            "source.name",
            "source.user.email",
            "source.domain",
            "source.ip",
            "source.privateIp",
            "source.operatingSystem",
            "source.email.sender",
            "source.email.from",
            "source.remoteHostname",
            "source.removableMedia.vendor",
            "source.removableMedia.mediaName",
            "source.removableMedia.serialNumber",
            "source.removableMedia.capacity",
            "source.removableMedia.busType",
            "source.removableMedia.name",
            "source.removableMedia.volumeName",
            "source.removableMedia.partitionId",
            "source.tabs.title",
            "source.tabs.titleError",
            "source.tabs.url",
            "source.tabs.urlError",
            "source.accountName",
            "source.accountType",
            "source.domains",
            "destination.category",
            "destination.name",
            "destination.user.email",
            "destination.ip",
            "destination.privateIp",
            "destination.operatingSystem",
            "destination.printJobName",
            "destination.printerName",
            "destination.printedFilesBackupPath",
            "destination.email.recipients",
            "destination.email.subject",
            "destination.removableMedia.vendor",
            "destination.removableMedia.mediaName",
            "destination.removableMedia.serialNumber",
            "destination.removableMedia.capacity",
            "destination.removableMedia.busType",
            "destination.removableMedia.name",
            "destination.removableMedia.volumeName",
            "destination.removableMedia.partitionId",
            "destination.tabs.title",
            "destination.tabs.url",
            "destination.tabs.titleError",
            "destination.tabs.urlError",
            "destination.accountName",
            "destination.accountType",
            "destination.domains",
            "destination.remoteHostname",
            "process.executable",
            "process.owner",
            "process.extension.browser",
            "process.extension.version",
            "process.extension.loggedInUser",
            "risk.score",
            "risk.severity",
            "risk.indicators.name",
            "risk.indicators.id",
            "risk.indicators.weight",
            "risk.trusted",
            "risk.trustReason",
            "risk.untrustedValues.accountNames",
            "risk.untrustedValues.domains",
            "risk.untrustedValues.gitRepositoryUris",
            "risk.untrustedValues.slackWorkspaces",
            "risk.untrustedValues.urlPaths",
            "file.acquiredFrom.eventId",
            "file.acquiredFrom.sourceAccountName",
            "file.acquiredFrom.sourceAccountType",
            "file.acquiredFrom.sourceCategory",
            "file.acquiredFrom.sourceName",
            "file.acquiredFrom.sourceUser.email",
            "file.acquiredFrom.agentTimestamp",
            "file.acquiredFrom.userEmail",
            "file.acquiredFrom.eventAction",
            "file.acquiredFrom.tabs.title",
            "file.acquiredFrom.tabs.titleError",
            "file.acquiredFrom.tabs.url",
            "file.acquiredFrom.tabs.urlError",
            "file.acquiredFrom.sourceDomains",
            "file.acquiredFrom.fileName",
            "file.acquiredFrom.md5",
            "file.acquiredFrom.git.repositoryEmail",
            "file.acquiredFrom.git.repositoryUri",
            "file.acquiredFrom.git.repositoryUser",
            "git.eventId",
            "git.lastCommitHash",
            "git.repositoryUri",
            "git.repositoryUser",
            "git.repositoryEmail",
            "git.repositoryEndpointPath"
          ],
          "example": "@timestamp",
          "title": "Search term for sorting.",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "groups"
      ],
      "type": "object"
    },
    "SharedWithUser-file-events": {
      "example": [
        {
          "cloudUsername": "alix@example.com"
        }
      ],
      "properties": {
        "cloudUsername": {
          "example": "alix@example.com",
          "title": "Name of the user reported by the cloud provider with whom the file was shared.",
          "type": "string",
          "x-nullable": true
        }
      },
      "title": "A list of users who have been granted explicit rights to the file at the time the event occurred.",
      "type": "object"
    },
    "Source-file-events": {
      "properties": {
        "accountName": {
          "title": "For cloud sync apps installed on user devices, the name of the cloud account where the event was observed. This can help identify if the activity occurred in a business or personal account.",
          "type": "string",
          "x-nullable": true
        },
        "accountType": {
          "title": "For cloud sync apps installed on user devices, the type of account where the event was observed. For example, 'BUSINESS' or 'PERSONAL'.",
          "type": "string",
          "x-nullable": true
        },
        "category": {
          "example": "Social Media",
          "title": "General category of where the file originated. For example: Cloud Storage, Email, Social Media.",
          "type": "string",
          "x-nullable": true
        },
        "domain": {
          "example": "localhost",
          "title": "Fully qualified domain name (FQDN) for the user's device at the time the event is recorded.  If the device is unable to resolve the domain name of the host, it reports the IP address of the host.",
          "type": "string",
          "x-nullable": true
        },
        "domains": {
          "items": {
            "title": "The domain section of the URLs reported in source.tabs.url. (Note: Although similar in name, this field has no relation to source.domain, which reports the FQDN or IP address of the user’s device.)",
            "type": "string"
          },
          "title": "The domain section of the URLs reported in source.tabs.url. (Note: Although similar in name, this field has no relation to source.domain, which reports the FQDN or IP address of the user’s device.)",
          "type": "array"
        },
        "email": {
          "$ref": "#/definitions/SourceEmail-file-events"
        },
        "ip": {
          "example": "127.0.0.1",
          "title": "The external IP address of the user's device.",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "example": "Mari's MacBook",
          "title": "The name reported by the device's operating system.  This may be different than the device name in the Code42 console.",
          "type": "string",
          "x-nullable": true
        },
        "operatingSystem": {
          "example": "Windows 10",
          "title": "The operating system of the source device.",
          "type": "string",
          "x-nullable": true
        },
        "privateIp": {
          "example": [
            "127.0.0.1",
            "127.0.0.2"
          ],
          "items": {
            "example": "[\"127.0.0.1\",\"127.0.0.2\"]",
            "title": "The IP address of the user's device on your internal network, including Network interfaces, Virtual Network Interface controllers (NICs), and Loopback/non-routable addresses.",
            "type": "string"
          },
          "title": "The IP address of the user's device on your internal network, including Network interfaces, Virtual Network Interface controllers (NICs), and Loopback/non-routable addresses.",
          "type": "array"
        },
        "remoteHostname": {
          "title": "For events where a file transfer tool was used, the source hostname.",
          "type": "string",
          "x-nullable": true
        },
        "removableMedia": {
          "$ref": "#/definitions/RemovableMedia-file-events"
        },
        "tabs": {
          "items": {
            "$ref": "#/definitions/Tab-file-events"
          },
          "title": "Metadata about the browser tab source.",
          "type": "array"
        },
        "user": {
          "$ref": "#/definitions/SourceUser-file-events"
        }
      },
      "required": [
        "domains",
        "email",
        "privateIp",
        "removableMedia",
        "tabs",
        "user"
      ],
      "title": "Metadata about the source of the file event.",
      "type": "object"
    },
    "SourceEmail-file-events": {
      "properties": {
        "from": {
          "example": "ari@example.com",
          "title": "The display name of the sender, as it appears in the \"From\" field in the email. In many cases, this is the same as source.email.sender, but it can be different if the message is sent by a server or other mail agent on behalf of someone else.",
          "type": "string",
          "x-nullable": true
        },
        "sender": {
          "example": "ari@example.com",
          "title": "The address of the entity responsible for transmitting the message. In many cases, this is the same as source.email.from, but it can be different if the message is sent by a server or other mail agent on behalf of someone else.",
          "type": "string",
          "x-nullable": true
        }
      },
      "title": "Metadata about the email source.",
      "type": "object"
    },
    "SourceUser-file-events": {
      "properties": {
        "email": {
          "example": [
            "first.last@example.com",
            "first_last_example_com"
          ],
          "items": {
            "example": "[\"first.last@example.com\",\"first_last_example_com\"]",
            "title": "For endpoint events where a file in cloud storage is synced to a device, the email address of the user logged in to the cloud storage provider.",
            "type": "string"
          },
          "title": "For endpoint events where a file in cloud storage is synced to a device, the email address of the user logged in to the cloud storage provider.",
          "type": "array"
        }
      },
      "required": [
        "email"
      ],
      "title": "Metadata about the source user.",
      "type": "object"
    },
    "StreamingResponseBody-file-events": {
      "type": "object"
    },
    "Tab-file-events": {
      "properties": {
        "title": {
          "example": "Example Domain",
          "title": "The title of this app or browser tab.",
          "type": "string",
          "x-nullable": true
        },
        "titleError": {
          "example": "InsufficientPermissions",
          "title": "Reason the title of this app or browser tab is unavailable.",
          "type": "string",
          "x-nullable": true
        },
        "url": {
          "example": "https://example.com/",
          "title": "The URL of this browser tab.",
          "type": "string",
          "x-nullable": true
        },
        "urlError": {
          "example": "InsufficientPermissions",
          "title": "Reason the URL of this browser tab is unavailable.",
          "type": "string",
          "x-nullable": true
        }
      },
      "title": "Metadata about the browser tab destination.",
      "type": "object"
    },
    "UntrustedValues-file-events": {
      "properties": {
        "accountNames": {
          "items": {
            "title": "Account names that do not match an entry in your list of Trusted activity. Values are obtained from the account name metadata for the event. Only applies to event types that are evaluated for trust.",
            "type": "string"
          },
          "title": "Account names that do not match an entry in your list of Trusted activity. Values are obtained from the account name metadata for the event. Only applies to event types that are evaluated for trust.",
          "type": "array"
        },
        "domains": {
          "items": {
            "title": "Domains that do not match an entry in your list of Trusted activity. Values are obtained from the domain section of related metadata for the event. Only applies to event types that are evaluated for trust.",
            "type": "string"
          },
          "title": "Domains that do not match an entry in your list of Trusted activity. Values are obtained from the domain section of related metadata for the event. Only applies to event types that are evaluated for trust.",
          "type": "array"
        },
        "gitRepositoryUris": {
          "items": {
            "title": "Git URIs that do not match an entry in your list of Trusted activity. Values are obtained from the Git URI metadata for the event. Only applies to event types that are evaluated for trust.",
            "type": "string"
          },
          "title": "Git URIs that do not match an entry in your list of Trusted activity. Values are obtained from the Git URI metadata for the event. Only applies to event types that are evaluated for trust.",
          "type": "array"
        },
        "slackWorkspaces": {
          "items": {
            "title": "Slack workspaces that do not match an entry in your list of Trusted activity. Values are obtained from the Slack metadata for the event. Only applies to event types that are evaluated for trust.",
            "type": "string"
          },
          "title": "Slack workspaces that do not match an entry in your list of Trusted activity. Values are obtained from the Slack metadata for the event. Only applies to event types that are evaluated for trust.",
          "type": "array"
        },
        "urlPaths": {
          "items": {
            "title": "URL paths that do not match an entry in your list of Trusted activity. Values are obtained from the URL metadata for the event. Only applies to event types that are evaluated for trust.",
            "type": "string"
          },
          "title": "URL paths that do not match an entry in your list of Trusted activity. Values are obtained from the URL metadata for the event. Only applies to event types that are evaluated for trust.",
          "type": "array"
        }
      },
      "required": [
        "accountNames",
        "domains",
        "gitRepositoryUris",
        "slackWorkspaces",
        "urlPaths"
      ],
      "title": "Values that do not match an entry in your list of Trusted activity.",
      "type": "object"
    },
    "User-file-events": {
      "properties": {
        "deviceUid": {
          "example": "24681",
          "title": "Unique identifier for the device. Null if the file event occurred on a cloud provider.",
          "type": "string",
          "x-nullable": true
        },
        "email": {
          "example": "cody@example.com",
          "title": "The Code42 username used to sign in to the Code42 app on the device. Null if the file event occurred on a cloud provider.",
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "example": "1138",
          "title": "Unique identifier for the user of the Code42 app on the device. Null if the file event occurred on a cloud provider.",
          "type": "string",
          "x-nullable": true
        }
      },
      "title": "Attributes of the the Code42 username signed in to the Code42 app on the device.",
      "type": "object"
    },
    "ActivityAction-trusted-activities": {
      "description": "A list of activity actions associated with the action group.",
      "properties": {
        "providers": {
          "description": "A list of enabled providers for the specified activity action.",
          "items": {
            "$ref": "#/definitions/ActivityActionProvider-trusted-activities"
          },
          "type": "array",
          "uniqueItems": true
        },
        "type": {
          "description": "\nBelow you will find specific activity actions supported for each trusted activity type.\n\n| Action / Type | `ACCOUNT_NAME` | `DOMAIN` | `GIT_REPOSITORY_URI` | `SLACK` | `URL_PATH` |\n|:-------------:|:--------------:|:--------:|:--------------------:|:-------:|------------|\n| `CLOUD_SHARE` |                |     ✓    |                      |         |            |\n|  `CLOUD_SYNC` |        ✓       |     ✓    |                      |         |            |\n| `EMAIL`       |                |     ✓    |                      |         |            |\n| `FILE_UPLOAD` |                |     ✓    |                      |         |            |\n| `GIT_PUSH`    |                |     ✓    |           ✓          |         |            |\n\nNote: Trusted activity types `SLACK` and `URL_PATH` do not support any activity action defintion. \nFor these trusted activity types, simply pass an empty array for activityActions.\n",
          "enum": [
            "CLOUD_SHARE",
            "CLOUD_SYNC",
            "EMAIL",
            "FILE_UPLOAD",
            "GIT_PUSH"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "ActivityActionGroup-trusted-activities": {
      "description": "An Activity Action Group associated with a Trusted Activity.",
      "properties": {
        "activityActions": {
          "description": "A list of activity actions associated with the action group.",
          "items": {
            "$ref": "#/definitions/ActivityAction-trusted-activities"
          },
          "type": "array",
          "uniqueItems": true
        },
        "name": {
          "description": "The name of the activity action group.",
          "enum": [
            "DEFAULT"
          ],
          "type": "string"
        }
      },
      "required": [
        "activityActions",
        "name"
      ],
      "type": "object"
    },
    "ActivityActionProvider-trusted-activities": {
      "description": "An Activity Action Provider associated with an activity action.",
      "properties": {
        "name": {
          "description": "\nThe only two Trusted Activity Types that support specific providers are `DOMAIN` and `ACCOUNT_NAME`.\n\nBelow you will find specific providers for each action supported by the `DOMAIN` and `ACCOUNT_NAME` types. \nIf no providers are listed for a particular action, it means that no specific providers are required for that action type. \nPass an empty array for providers. \n\nProviders for each action supported by the `DOMAIN` type:\n\n| Provider / Action | `CLOUD_SHARE` | `CLOUD_SYNC` | `EMAIL` | `FILE_UPLOAD` | `GIT_PUSH` |\n|:-----------------:|:-------------:|:------------:|:-------:|:-------------:|:----------:|\n|       `BOX`       |       ✓       |       ✓      |         |               |            |\n|     `DROPBOX`     |               |              |         |               |            |\n|   `GOOGLE_DRIVE`  |       ✓       |       ✓      |         |               |            |\n|      `GMAIL`      |               |              |    ✓    |               |            |\n|      `ICLOUD`     |               |       ✓      |         |               |            |\n|    `OFFICE_365`   |               |              |    ✓    |               |            |\n|    `ONE_DRIVE`    |       ✓       |       ✓      |         |               |            |\n\nProviders for each action supported by the `ACCOUNT_NAME` type:\n\n| Provider / Action | `CLOUD_SYNC` |\n|:-----------------:|:------------:|\n|      `ICLOUD`     |              |\n|       `BOX`       |              |\n|     `DROPBOX`     |       ✓      |\n|   `GOOGLE_DRIVE`  |              |\n|      `GMAIL`      |              |\n|    `OFFICE_365`   |              |\n|    `ONE_DRIVE`    |       ✓      |\n",
          "enum": [
            "BOX",
            "DROPBOX",
            "GOOGLE_DRIVE",
            "GMAIL",
            "ICLOUD",
            "OFFICE_365",
            "ONE_DRIVE"
          ],
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "ErrorResponse-trusted-activities": {
      "properties": {
        "code": {
          "description": "Response code",
          "type": "string"
        },
        "message": {
          "description": "Message",
          "type": "string"
        }
      },
      "required": [
        "code"
      ],
      "type": "object"
    },
    "TrustedActivitiesListResponse-trusted-activities": {
      "properties": {
        "totalCount": {
          "description": "The total count of TrustedActivityResponse objects returned.",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "trustedActivities": {
          "description": "A list of TrustedActivityResponse objects.",
          "items": {
            "$ref": "#/definitions/TrustedActivityResponse-trusted-activities"
          },
          "type": "array"
        }
      },
      "required": [
        "totalCount",
        "trustedActivities"
      ],
      "type": "object"
    },
    "TrustedActivityRequest-trusted-activities": {
      "properties": {
        "activityActionGroups": {
          "description": "The collection of activity action groups the associated trusted activity applies to. \nBelow you will find specific requirements for each trusted activity type.\n- `DOMAIN` - If no activity action group is provided, the default will be assigned implicitly. Else; the supplied groups will be applied, and override any existing configuration. \n- `ACCOUNT_NAME` - At least one activity action group is required. On update, The supplied groups will be applied, and override any existing configuration.\n- `GIT_REPOSITORY_URI` - At least one activity action group is required. On update, The supplied groups will be applied, and override any existing configuration.\n- `SLACK` - No activity action groups are allowed - array must be empty.\n- `URL_PATH` - No activity action groups are allowed - array must be empty.",
          "items": {
            "$ref": "#/definitions/ActivityActionGroup-trusted-activities"
          },
          "type": "array",
          "uniqueItems": true
        },
        "description": {
          "description": "A description of the trusted activity.",
          "example": "description text",
          "type": "string"
        },
        "isHighValueSource": {
          "description": "Indicates if the resource is a high value source of company information. If true, a source risk indicator is \napplied to events for files downloaded from this location and later uploaded to an untrusted destination.\n### Supported trusted activity types\n\n- `DOMAIN`\n- `SLACK`\n- `URL_PATH`\n- `ACCOUNT_NAME`\n- `GIT_REPOSITORY_URI`\n\nNote: When updating a resource, if the `isHighValueSource` property is not explicitly set, the existing value\nof the property remains unchanged.",
          "example": true,
          "type": "boolean"
        },
        "type": {
          "description": "The type of the trusted activity.",
          "enum": [
            "ACCOUNT_NAME",
            "DOMAIN",
            "GIT_REPOSITORY_URI",
            "SLACK",
            "URL_PATH"
          ],
          "example": "DOMAIN",
          "type": "string"
        },
        "value": {
          "description": "The value of the trusted activity.",
          "example": "example.com",
          "type": "string"
        }
      },
      "required": [
        "activityActionGroups",
        "type",
        "value"
      ],
      "type": "object"
    },
    "TrustedActivityResponse-trusted-activities": {
      "properties": {
        "activityActionGroups": {
          "description": "The list of activity action groups for the trusted activity.",
          "items": {
            "$ref": "#/definitions/ActivityActionGroup-trusted-activities"
          },
          "type": "array",
          "uniqueItems": true
        },
        "activityId": {
          "description": "The unique identifier of the trusted activity.",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "description": {
          "description": "A description of the trusted activity.",
          "example": "description text",
          "type": "string"
        },
        "isHighValueSource": {
          "description": "Indicates if the resource is a high value source of company information. If true, a source risk indicator is applied to events for files downloaded from this location and later uploaded to an untrusted destination.",
          "example": true,
          "type": "boolean"
        },
        "principalType": {
          "description": "The type of the principal that last updated the resource.",
          "enum": [
            "USER",
            "API_KEY",
            "DEVICE",
            "SERVICE"
          ],
          "example": "USER",
          "type": "string"
        },
        "type": {
          "description": "The type of the trusted activity.",
          "enum": [
            "ACCOUNT_NAME",
            "DOMAIN",
            "GIT_REPOSITORY_URI",
            "SLACK",
            "URL_PATH"
          ],
          "example": "DOMAIN",
          "type": "string"
        },
        "updateTime": {
          "description": "The time at which the trust activity was last created or modified.",
          "example": "2019-05-28T09:15:00Z",
          "format": "date-time",
          "type": "string"
        },
        "updatedByPrincipalId": {
          "description": "The unique identifier of the user who last updated the trust activity.",
          "example": "123456789",
          "type": "string"
        },
        "updatedByPrincipalName": {
          "description": "The username of the user who last updated the trusted activity.",
          "example": "user@example.com",
          "type": "string"
        },
        "value": {
          "description": "The value of the trusted activity.",
          "example": "example.com",
          "type": "string"
        }
      },
      "required": [
        "activityActionGroups",
        "activityId",
        "principalType",
        "type",
        "updateTime",
        "updatedByPrincipalId",
        "updatedByPrincipalName",
        "value"
      ],
      "type": "object"
    },
    "ActivateAgentsRequest-core": {
      "type": "object",
      "properties": {
        "agentIds": {
          "description": "List of agentIds to activate.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "AgentListResponse-core": {
      "type": "object",
      "properties": {
        "agents": {
          "description": "A list of agents",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgentResponse-core"
          },
          "readOnly": true
        },
        "totalCount": {
          "format": "int32",
          "description": "The total number of agents",
          "type": "integer",
          "readOnly": true
        },
        "page": {
          "format": "int32",
          "description": "The page number.",
          "type": "integer"
        },
        "pageSize": {
          "format": "int32",
          "description": "The maximum number of result elements returned per page.",
          "type": "integer"
        }
      },
      "additionalProperties": false
    },
    "AgentResponse-core": {
      "type": "object",
      "properties": {
        "agentId": {
          "description": "A globally unique ID for the agent (same as GUID field in console).",
          "type": "string"
        },
        "name": {
          "description": "The name assigned to the agent by Code42. By default, Agent Name uses the Hostname reported by the agent's operating system. This field can be changed.",
          "type": "string"
        },
        "userId": {
          "description": "A globally unique ID for the user the agent is tied to.",
          "type": "string"
        },
        "osHostname": {
          "description": "The name of the device the agent is running on as reported by the device's operating system.",
          "type": "string"
        },
        "osName": {
          "description": "Operating system of the device.",
          "type": "string"
        },
        "active": {
          "description": "Status of agent. true=Active, false=Deactivated.",
          "type": "boolean"
        },
        "agentType": {
          "description": "Type of agent. Available values : CODE42AAT, COMBINED, CODE42",
          "type": "string"
        },
        "appVersion": {
          "description": "The agent's App Version.",
          "type": "string"
        },
        "productVersion": {
          "description": "The agent's Product Version.",
          "type": "string"
        },
        "lastConnected": {
          "description": "The time when the agent last connected to the Code42 cloud.",
          "type": "string"
        },
        "externalReference": {
          "description": "Customer provided reference info for agent.",
          "type": "string"
        },
        "creationDate": {
          "description": "Time when the agent was first registered.",
          "type": "string"
        },
        "modificationDate": {
          "description": "Time when the agent's database record was last updated.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "BaseLegalHoldMatterResponse-core": {
      "type": "object",
      "properties": {
        "matterId": {
          "description": "The unique identifier of the matter.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "The name of the matter.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "CustodianResponse-core": {
      "type": "object",
      "properties": {
        "userId": {
          "description": "The unique identifier of the Code42 user who is the custodian.",
          "type": "string",
          "readOnly": true
        },
        "username": {
          "description": "The Code42 username of the custodian.",
          "type": "string"
        },
        "email": {
          "description": "The email of the custodian.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "CustomerResponse-core": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The customer's name.",
          "type": "string"
        },
        "registrationKey": {
          "description": "The customer's Code42 registration key.",
          "type": "string"
        },
        "tenantId": {
          "description": "The customer's unique ID identifying it within Code42.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "DeactivateAgentsRequest-core": {
      "type": "object",
      "properties": {
        "agentIds": {
          "description": "List of agentIds to deactivate.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "DeviceListResponse-core": {
      "type": "object",
      "properties": {
        "totalCount": {
          "format": "int64",
          "description": "The total number of devices",
          "type": "integer"
        },
        "devices": {
          "description": "A list of devices",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DevicePreserveResponse-core"
          },
          "readOnly": true
        }
      },
      "additionalProperties": false
    },
    "DevicePreserveResponse-core": {
      "type": "object",
      "properties": {
        "deviceId": {
          "description": "A globally unique ID (guid) for this device.",
          "type": "string",
          "readOnly": true
        },
        "legacyDeviceId": {
          "description": "The device ID to use for older console-based APIs that require a device Id.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Device name.",
          "type": "string"
        },
        "osHostname": {
          "description": "Device Hostname according to the device's OS.",
          "type": "string"
        },
        "status": {
          "description": "Device status. Values: Active, Deactivated, Blocked, Deauthorized (Active/Deactivated followed by optional Blocked and/or Deauthorized)",
          "type": "string"
        },
        "active": {
          "description": "True means the device will show up on reports, etc.",
          "type": "boolean"
        },
        "blocked": {
          "description": "True means device continues backing up, but restores and logins are disabled.",
          "type": "boolean"
        },
        "alertState": {
          "format": "int32",
          "description": "0=ok, 1=connection warning, 2=connection critical",
          "type": "integer"
        },
        "userId": {
          "description": "A globally unique ID for this user.",
          "type": "string"
        },
        "legacyUserId": {
          "description": "The user ID to use for older console-based APIs that require a user Id.\r\nIf your endpoint domain starts with \"console\" instead of \"api\", use this Id for endpoints that require a userId.",
          "type": "string",
          "readOnly": true
        },
        "orgId": {
          "description": "A globally unique ID for the Code42 organization of the user owning this device.",
          "type": "string"
        },
        "legacyOrgId": {
          "description": "The org ID to use for older console-based APIs that require an org Id.\r\nIf your endpoint domain starts with \"console\" instead of \"api\", use this Id for endpoints that require an orgId.",
          "type": "string",
          "readOnly": true
        },
        "externalReferenceInfo": {
          "description": "Optional external reference information, such as a serial number, asset tag, employee ID, or help desk issue ID.",
          "type": "string",
          "readOnly": true
        },
        "notes": {
          "description": "Optional descriptive information.",
          "type": "string"
        },
        "lastConnected": {
          "description": "The last day and time this device was connected to the server.",
          "type": "string"
        },
        "osName": {
          "description": "Operating system name. Values: Windows*, Mac OS X, Linux, Android, iOS, SunOS, etc",
          "type": "string"
        },
        "osVersion": {
          "description": "Operating system version. Values: 10.5.1, 6.2, etc",
          "type": "string"
        },
        "osArch": {
          "description": "Hardware architecture. Values: i386, amd64, sparc, x86, etc",
          "type": "string"
        },
        "address": {
          "description": "Internal IP address and port. Example: 192.168.42.1:4282",
          "type": "string"
        },
        "remoteAddress": {
          "description": "External IP address and port. Example: 171.22.110.41:13958",
          "type": "string"
        },
        "timeZone": {
          "description": "Examples: Australia/Canberra, Asia/Calcutta",
          "type": "string"
        },
        "version": {
          "description": "Device product display version.",
          "type": "string",
          "readOnly": true
        },
        "build": {
          "format": "int64",
          "description": "Device build version long number, will only be applicable to CP4/SP devices.",
          "type": "integer",
          "readOnly": true
        },
        "creationDate": {
          "description": "Date and time this device was created.",
          "type": "string"
        },
        "modificationDate": {
          "description": "Date and time this device was last modified.",
          "type": "string"
        },
        "loginDate": {
          "description": "Date and time this device was last logged in.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "DeviceResponse-core": {
      "type": "object",
      "properties": {
        "deviceId": {
          "description": "A globally unique ID (guid) for this device.",
          "type": "string",
          "readOnly": true
        },
        "legacyDeviceId": {
          "description": "The device ID to use for older console-based APIs that require a device Id.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Device name.",
          "type": "string"
        },
        "osHostname": {
          "description": "Device Hostname according to the device's OS.",
          "type": "string"
        },
        "status": {
          "description": "Device status. Values: Active, Deactivated, Blocked, Deauthorized (Active/Deactivated followed by optional Blocked and/or Deauthorized)",
          "type": "string"
        },
        "active": {
          "description": "True means the device will show up on reports, etc.",
          "type": "boolean"
        },
        "blocked": {
          "description": "True means device continues backing up, but restores and logins are disabled.",
          "type": "boolean"
        },
        "alertState": {
          "format": "int32",
          "description": "0=ok, 1=connection warning, 2=connection critical",
          "type": "integer"
        },
        "userId": {
          "description": "A globally unique ID for this user.",
          "type": "string"
        },
        "legacyUserId": {
          "description": "The user ID to use for older console-based APIs that require a user Id.\r\nIf your endpoint domain starts with \"console\" instead of \"api\", use this Id for endpoints that require a userId.",
          "type": "string",
          "readOnly": true
        },
        "orgId": {
          "description": "A globally unique ID for the Code42 organization of the user owning this device.",
          "type": "string"
        },
        "legacyOrgId": {
          "description": "The org ID to use for older console-based APIs that require an org Id.\r\nIf your endpoint domain starts with \"console\" instead of \"api\", use this Id for endpoints that require an orgId.",
          "type": "string",
          "readOnly": true
        },
        "externalReferenceInfo": {
          "description": "Optional external reference information, such as a serial number, asset tag, employee ID, or help desk issue ID.",
          "type": "string",
          "readOnly": true
        },
        "notes": {
          "description": "Optional descriptive information.",
          "type": "string"
        },
        "lastConnected": {
          "description": "The last day and time this device was connected to the server.",
          "type": "string"
        },
        "osName": {
          "description": "Operating system name. Values: Windows*, Mac OS X, Linux, Android, iOS, SunOS, etc",
          "type": "string"
        },
        "osVersion": {
          "description": "Operating system version. Values: 10.5.1, 6.2, etc",
          "type": "string"
        },
        "osArch": {
          "description": "Hardware architecture. Values: i386, amd64, sparc, x86, etc",
          "type": "string"
        },
        "address": {
          "description": "Internal IP address and port. Example: 192.168.42.1:4282",
          "type": "string"
        },
        "remoteAddress": {
          "description": "External IP address and port. Example: 171.22.110.41:13958",
          "type": "string"
        },
        "timeZone": {
          "description": "Examples: Australia/Canberra, Asia/Calcutta",
          "type": "string"
        },
        "version": {
          "description": "Device product display version.",
          "type": "string",
          "readOnly": true
        },
        "build": {
          "format": "int64",
          "description": "Device build version long number, will only be applicable to CP4/SP devices.",
          "type": "integer",
          "readOnly": true
        },
        "creationDate": {
          "description": "Date and time this device was created.",
          "type": "string"
        },
        "modificationDate": {
          "description": "Date and time this device was last modified.",
          "type": "string"
        },
        "loginDate": {
          "description": "Date and time this device was last logged in.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "JwtResponse-core": {
      "type": "object",
      "properties": {
        "bearerToken": {
          "description": "A token representing a Code42 user's identity and permission set.",
          "type": "string",
          "readOnly": true
        }
      },
      "additionalProperties": false
    },
    "LegalHoldAddCustodianRequest-core": {
      "type": "object",
      "properties": {
        "userId": {
          "description": "The unique identifier of the user to add to the legal hold matter.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "LegalHoldCreatePolicyRequest-core": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The name to give to the policy.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "LegalHoldCreatorUserResponse-core": {
      "type": "object",
      "properties": {
        "userId": {
          "description": "A globally unique ID for this user.",
          "type": "string"
        },
        "username": {
          "description": "The name the user uses to log in to Code42.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "LegalHoldCustodianMatterListResponse-core": {
      "type": "object",
      "properties": {
        "matters": {
          "description": "A list of Legal Hold matters for a custodian.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LegalHoldCustodianMatterPreserveResponse-core"
          },
          "readOnly": true
        }
      },
      "additionalProperties": false
    },
    "LegalHoldCustodianMatterPreserveResponse-core": {
      "type": "object",
      "properties": {
        "membershipActive": {
          "description": "Whether the custodian's membership is active.",
          "type": "boolean",
          "readOnly": true
        },
        "membershipCreationDate": {
          "description": "The data the custodian was added to the matter.",
          "type": "string",
          "readOnly": true
        },
        "matterId": {
          "description": "The unique identifier of the matter.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "The name of the matter.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "LegalHoldMatterCustodianListResponse-core": {
      "type": "object",
      "properties": {
        "custodians": {
          "description": "A list of Legal Hold custodians on a matter.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LegalHoldMatterCustodianPreserveResponse-core"
          },
          "readOnly": true
        }
      },
      "additionalProperties": false
    },
    "LegalHoldMatterCustodianPreserveResponse-core": {
      "type": "object",
      "properties": {
        "membershipActive": {
          "description": "Whether the custodian's membership is active.",
          "type": "boolean",
          "readOnly": true
        },
        "membershipCreationDate": {
          "description": "The data the custodian was added to the matter.",
          "type": "string",
          "readOnly": true
        },
        "userId": {
          "description": "The unique identifier of the Code42 user who is the custodian.",
          "type": "string",
          "readOnly": true
        },
        "username": {
          "description": "The Code42 username of the custodian.",
          "type": "string"
        },
        "email": {
          "description": "The email of the custodian.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "LegalHoldMatterListResponse-core": {
      "type": "object",
      "properties": {
        "matters": {
          "description": "A list of Legal Hold matters.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LegalHoldMatterPreserveResponse-core"
          },
          "readOnly": true
        }
      },
      "additionalProperties": false
    },
    "LegalHoldMatterPreserveResponse-core": {
      "type": "object",
      "properties": {
        "matterId": {
          "description": "The unique identifier of the matter.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "The name of the matter.",
          "type": "string"
        },
        "description": {
          "description": "The description of the matter.",
          "type": "string"
        },
        "notes": {
          "description": "Notes about the matter.",
          "type": "string"
        },
        "active": {
          "description": "Whether the matter is currently active.",
          "type": "boolean"
        },
        "creationDate": {
          "description": "The date and time the matter was created.",
          "type": "string"
        },
        "lastModifiedDate": {
          "description": "The date and time the matter was last modified.",
          "type": "string"
        },
        "creatorObject": {
          "description": "Information about the user who created the matter."
        },
        "creatorPrincipal": {
          "$ref": "#/definitions/PrincipalInfoResponse-core"
        },
        "policyId": {
          "description": "The ID of the policy containing the matter.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "LegalHoldMatterRequest-core": {
      "type": "object",
      "properties": {
        "policyId": {
          "description": "The unique identifier of the policy involved in the matter.",
          "type": "string"
        },
        "name": {
          "description": "The name to give to the matter.",
          "type": "string"
        },
        "description": {
          "description": "An optional description to give to the matter.",
          "type": "string"
        },
        "notes": {
          "description": "Optional notes to give to the matter",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "LegalHoldMatterResponse-core": {
      "type": "object",
      "properties": {
        "matterId": {
          "description": "The unique identifier of the matter.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "The name of the matter.",
          "type": "string"
        },
        "description": {
          "description": "The description of the matter.",
          "type": "string"
        },
        "notes": {
          "description": "Notes about the matter.",
          "type": "string"
        },
        "active": {
          "description": "Whether the matter is currently active.",
          "type": "boolean"
        },
        "creationDate": {
          "description": "The date and time the matter was created.",
          "type": "string"
        },
        "lastModifiedDate": {
          "description": "The date and time the matter was last modified.",
          "type": "string"
        },
        "creatorObject": {
          "description": "Information about the user who created the matter."
        },
        "creatorPrincipal": {
          "$ref": "#/definitions/PrincipalInfoResponse-core"
        },
        "policyId": {
          "description": "The ID of the policy containing the matter.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "LegalHoldMembershipResponse-core": {
      "type": "object",
      "properties": {
        "membershipActive": {
          "description": "Whether the custodian's membership is active.",
          "type": "boolean",
          "readOnly": true
        },
        "membershipCreationDate": {
          "description": "The data the custodian was added to the matter.",
          "type": "string",
          "readOnly": true
        },
        "matter": {
          "$ref": "#/definitions/BaseLegalHoldMatterResponse-core"
        },
        "custodian": {
          "$ref": "#/definitions/CustodianResponse-core"
        }
      },
      "additionalProperties": false
    },
    "LegalHoldPolicyListResponse-core": {
      "type": "object",
      "properties": {
        "policies": {
          "description": "A list of Legal Hold policies.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LegalHoldPolicyPreserveResponse-core"
          },
          "readOnly": true
        }
      },
      "additionalProperties": false
    },
    "LegalHoldPolicyPreserveResponse-core": {
      "type": "object",
      "properties": {
        "policyId": {
          "description": "The unique identifier for a legal hold policy.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "The name of the legal hold policy.",
          "type": "string"
        },
        "creatorUser": {
          "$ref": "#/definitions/LegalHoldCreatorUserResponse-core"
        },
        "creatorPrincipal": {
          "$ref": "#/definitions/PrincipalInfoResponse-core"
        },
        "creationDate": {
          "description": "The date the policy was created.",
          "type": "string"
        },
        "modificationDate": {
          "description": "The date the policy was last modified.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "LegalHoldPolicyResponse-core": {
      "type": "object",
      "properties": {
        "policyId": {
          "description": "The unique identifier for a legal hold policy.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "The name of the legal hold policy.",
          "type": "string"
        },
        "creatorUser": {
          "$ref": "#/definitions/LegalHoldCreatorUserResponse-core"
        },
        "creatorPrincipal": {
          "$ref": "#/definitions/PrincipalInfoResponse-core"
        },
        "creationDate": {
          "description": "The date the policy was created.",
          "type": "string"
        },
        "modificationDate": {
          "description": "The date the policy was last modified.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "LegalHoldReactivateMatterResponse-core": {
      "type": "object",
      "properties": {
        "membershipsChanged": {
          "description": "Whether the memberships were changed upon reactivation.\r\nIf true, this means that there were custodians on the matter at the time the matter got deactivated,\r\nand when reactivating, these users were placed back in legal hold.",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "LegalHoldRemoveCustodianRequest-core": {
      "type": "object",
      "properties": {
        "userId": {
          "description": "The unique identifier of the user to remove from the legal hold matter.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "MoveUserRequest-core": {
      "type": "object",
      "properties": {
        "orgGuid": {
          "description": "The org GUID of the org to move the user to.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "OAuthResponse-core": {
      "type": "object",
      "properties": {
        "accessToken": {
          "description": "A token representing a Code42 user's identity and permission set.",
          "type": "string"
        },
        "tokenType": {
          "description": "Type of token.",
          "type": "string"
        },
        "expiresIn": {
          "format": "int32",
          "description": "Lifespan of the token.",
          "type": "integer"
        }
      },
      "additionalProperties": false
    },
    "OrgCreateRequest-core": {
      "type": "object",
      "properties": {
        "orgName": {
          "description": "The name of the org to create.",
          "type": "string"
        },
        "orgExtRef": {
          "description": "The external reference of the org to create.",
          "type": "string"
        },
        "parentOrgGuid": {
          "description": "The parent ID of the org to create.",
          "type": "string"
        },
        "notes": {
          "description": "The notes of the org to create.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "OrgListResponse-core": {
      "type": "object",
      "properties": {
        "totalCount": {
          "format": "int64",
          "type": "integer"
        },
        "orgs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrgPreserveResponse-core"
          }
        }
      },
      "additionalProperties": false
    },
    "OrgPreserveResponse-core": {
      "type": "object",
      "properties": {
        "orgGuid": {
          "description": "The globally unique ID of this org.",
          "type": "string"
        },
        "orgName": {
          "description": "The name of this org",
          "type": "string"
        },
        "orgExtRef": {
          "description": "The optional external reference for this org, such as a serial number, asset tag, employee ID, or help desk issue ID.",
          "type": "string"
        },
        "notes": {
          "description": "The notes for this org.  Intended for optional additional descriptive information.",
          "type": "string"
        },
        "parentOrgGuid": {
          "description": "The globally unique ID of the parent org.",
          "type": "string"
        },
        "active": {
          "description": "Whether or not the org is currently active.",
          "type": "boolean"
        },
        "creationDate": {
          "description": "The date and time the org was created.",
          "type": "string"
        },
        "modificationDate": {
          "description": "The date and time the org was last modified.",
          "type": "string"
        },
        "deactivationDate": {
          "description": "The date and time the org was deactivated.",
          "type": "string"
        },
        "registrationKey": {
          "description": "The registration key for the org.",
          "type": "string"
        },
        "userCount": {
          "format": "int32",
          "description": "The count of users within this org.",
          "type": "integer"
        },
        "computerCount": {
          "format": "int32",
          "description": "The count of computers within this org.",
          "type": "integer"
        },
        "orgCount": {
          "format": "int32",
          "description": "The count of child orgs for this org.",
          "type": "integer"
        }
      },
      "additionalProperties": false
    },
    "OrgResponse-core": {
      "type": "object",
      "properties": {
        "orgGuid": {
          "description": "The globally unique ID of this org.",
          "type": "string"
        },
        "orgName": {
          "description": "The name of this org",
          "type": "string"
        },
        "orgExtRef": {
          "description": "The optional external reference for this org, such as a serial number, asset tag, employee ID, or help desk issue ID.",
          "type": "string"
        },
        "notes": {
          "description": "The notes for this org.  Intended for optional additional descriptive information.",
          "type": "string"
        },
        "parentOrgGuid": {
          "description": "The globally unique ID of the parent org.",
          "type": "string"
        },
        "active": {
          "description": "Whether or not the org is currently active.",
          "type": "boolean"
        },
        "creationDate": {
          "description": "The date and time the org was created.",
          "type": "string"
        },
        "modificationDate": {
          "description": "The date and time the org was last modified.",
          "type": "string"
        },
        "deactivationDate": {
          "description": "The date and time the org was deactivated.",
          "type": "string"
        },
        "registrationKey": {
          "description": "The registration key for the org.",
          "type": "string"
        },
        "userCount": {
          "format": "int32",
          "description": "The count of users within this org.",
          "type": "integer"
        },
        "computerCount": {
          "format": "int32",
          "description": "The count of computers within this org.",
          "type": "integer"
        },
        "orgCount": {
          "format": "int32",
          "description": "The count of child orgs for this org.",
          "type": "integer"
        }
      },
      "additionalProperties": false
    },
    "OrgUpdateRequest-core": {
      "type": "object",
      "properties": {
        "orgName": {
          "description": "The updated name for the org.",
          "type": "string"
        },
        "orgExtRef": {
          "description": "The updated external reference for the org.",
          "type": "string"
        },
        "notes": {
          "description": "The updated notes for the org.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "PrincipalInfoResponse-core": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "principalId": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "RolePermissionResponse-core": {
      "type": "object",
      "properties": {
        "permission": {
          "description": "A permission ID.",
          "type": "string"
        },
        "description": {
          "description": "Brief description of a permission.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "RolePreserveResponse-core": {
      "type": "object",
      "properties": {
        "roleId": {
          "description": "A role ID.",
          "type": "string"
        },
        "roleName": {
          "description": "A role name.",
          "type": "string"
        },
        "creationDate": {
          "description": "The date and time the role was created.",
          "type": "string"
        },
        "modificationDate": {
          "description": "The date and time the role was last modified.",
          "type": "string"
        },
        "permissions": {
          "description": "The permissions given to this role.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RolePermissionResponse-core"
          }
        }
      },
      "additionalProperties": false
    },
    "RoleResponse-core": {
      "type": "object",
      "properties": {
        "roleId": {
          "description": "A role ID.",
          "type": "string"
        },
        "roleName": {
          "description": "A role name.",
          "type": "string"
        },
        "creationDate": {
          "description": "The date and time the role was created.",
          "type": "string"
        },
        "modificationDate": {
          "description": "The date and time the role was last modified.",
          "type": "string"
        },
        "permissions": {
          "description": "The permissions given to this role.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RolePermissionResponse-core"
          }
        }
      },
      "additionalProperties": false
    },
    "UpdateAgentRequest-core": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Updated name for agent.",
          "type": "string"
        },
        "externalReference": {
          "description": "Updated external reference data for agent.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "UpdateRolesRequest-core": {
      "type": "object",
      "properties": {
        "roleIds": {
          "description": "The list of role IDs to associate with a user.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "UpdateRolesResponse-core": {
      "type": "object",
      "properties": {
        "processedReplacementRoleIds": {
          "description": "The role IDs processed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "newlyAssignedRoleIds": {
          "description": "The role IDs newly assigned to the user.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "unassignedRoleIds": {
          "description": "The role IDs unassigned from the user.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ignoredRoleIds": {
          "description": "The role IDs ignored.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "UserListResponse-core": {
      "type": "object",
      "properties": {
        "totalCount": {
          "format": "int64",
          "type": "integer"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserPreserveResponse-core"
          }
        }
      },
      "additionalProperties": false
    },
    "UserPreserveResponse-core": {
      "type": "object",
      "properties": {
        "legacyUserId": {
          "description": "The user ID to use for older console-based APIs that require a user Id.\r\nIf your endpoint domain starts with \"console\" instead of \"api\", use this Id for endpoints that require a userId.",
          "type": "string",
          "readOnly": true
        },
        "userId": {
          "description": "A globally unique ID for this user.",
          "type": "string"
        },
        "username": {
          "description": "The name the user uses to log in to Code42.",
          "type": "string"
        },
        "firstName": {
          "description": "The first (given) name of the user.",
          "type": "string"
        },
        "lastName": {
          "description": "The last (family) name of the user.",
          "type": "string"
        },
        "legacyOrgId": {
          "description": "The org ID to use for older console-based APIs that require an org Id.\r\nIf your endpoint domain starts with \"console\" instead of \"api\", use this Id for endpoints that require an orgId.",
          "type": "string",
          "readOnly": true
        },
        "orgId": {
          "description": "The ID of the Code42 organization this user belongs to.",
          "type": "string"
        },
        "orgGuid": {
          "description": "The unique org ID of the Code42 organization this user belongs to.  This value should be used for actions conducted through the org APIs.",
          "type": "string"
        },
        "orgName": {
          "description": "The name of the Code42 organization this user belongs to.",
          "type": "string"
        },
        "notes": {
          "description": "Descriptive information about the user.",
          "type": "string"
        },
        "active": {
          "description": "Whether or not the user is enabled.",
          "type": "boolean"
        },
        "blocked": {
          "description": "Whether or not logins and restores are disabled for the user.",
          "type": "boolean"
        },
        "creationDate": {
          "description": "The date and time the user was created.",
          "type": "string"
        },
        "modificationDate": {
          "description": "The date and time the user was last modified.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "UserResponse-core": {
      "type": "object",
      "properties": {
        "legacyUserId": {
          "description": "The user ID to use for older console-based APIs that require a user Id.\r\nIf your endpoint domain starts with \"console\" instead of \"api\", use this Id for endpoints that require a userId.",
          "type": "string",
          "readOnly": true
        },
        "userId": {
          "description": "A globally unique ID for this user.",
          "type": "string"
        },
        "username": {
          "description": "The name the user uses to log in to Code42.",
          "type": "string"
        },
        "firstName": {
          "description": "The first (given) name of the user.",
          "type": "string"
        },
        "lastName": {
          "description": "The last (family) name of the user.",
          "type": "string"
        },
        "legacyOrgId": {
          "description": "The org ID to use for older console-based APIs that require an org Id.\r\nIf your endpoint domain starts with \"console\" instead of \"api\", use this Id for endpoints that require an orgId.",
          "type": "string",
          "readOnly": true
        },
        "orgId": {
          "description": "The ID of the Code42 organization this user belongs to.",
          "type": "string"
        },
        "orgGuid": {
          "description": "The unique org ID of the Code42 organization this user belongs to.  This value should be used for actions conducted through the org APIs.",
          "type": "string"
        },
        "orgName": {
          "description": "The name of the Code42 organization this user belongs to.",
          "type": "string"
        },
        "notes": {
          "description": "Descriptive information about the user.",
          "type": "string"
        },
        "active": {
          "description": "Whether or not the user is enabled.",
          "type": "boolean"
        },
        "blocked": {
          "description": "Whether or not logins and restores are disabled for the user.",
          "type": "boolean"
        },
        "creationDate": {
          "description": "The date and time the user was created.",
          "type": "string"
        },
        "modificationDate": {
          "description": "The date and time the user was last modified.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "UserRolePreserveResponse-core": {
      "type": "object",
      "properties": {
        "roleId": {
          "description": "A role ID.",
          "type": "string"
        },
        "roleName": {
          "description": "A role name.",
          "type": "string"
        },
        "modificationDate": {
          "description": "The date and time this role was last modified.",
          "type": "string"
        },
        "creationDate": {
          "description": "The date and time this role was created.",
          "type": "string"
        },
        "permissionIds": {
          "description": "The permissions given to this role.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "UserRolesListResponse-core": {
      "type": "object",
      "properties": {
        "roles": {
          "description": "A list of a user's current roles.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserRolePreserveResponse-core"
          },
          "readOnly": true
        }
      },
      "additionalProperties": false
    },
    "CaseProblemResponse-cases": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "example": "subject validation failed",
          "description": "Additional description of the problem"
        },
        "problem": {
          "type": "string",
          "example": "INVALID_USER",
          "description": "The type of problem that occured",
          "enum": [
            "DESCRIPTION_TOO_LONG",
            "FINDINGS_TOO_LONG",
            "INVALID_CHAR_IN_REQUEST",
            "INVALID_PAGE_NUMBER",
            "INVALID_PAGE_SIZE",
            "INVALID_TIME_INTERVAL",
            "INVALID_USER",
            "NAME_EMPTY",
            "NAME_EXISTS",
            "NAME_TOO_LONG",
            "NO_EDITS_ONCE_ARCHIVED",
            "NO_EDITS_ONCE_CLOSED",
            "USER_VALIDATION_FORBIDDEN",
            "USER_VALIDATION_UNAVAILABLE"
          ]
        }
      },
      "title": "CaseProblemResponse"
    },
    "CreateCaseRequest-cases": {
      "type": "object",
      "properties": {
        "assignee": {
          "type": "string",
          "example": 273411254592236320,
          "description": "The user UID of the administrator assigned to investigate the case."
        },
        "description": {
          "type": "string",
          "example": "Sample description",
          "description": "Brief description providing context for a case."
        },
        "findings": {
          "type": "string",
          "example": "Sample findings",
          "description": "Markdown formatted text summarizing the findings for a case."
        },
        "name": {
          "type": "string",
          "example": "Sample case name",
          "description": "The unique name given to the case."
        },
        "subject": {
          "type": "string",
          "example": 421380797518239200,
          "description": "The user UID of the subject being investigated in this case."
        }
      },
      "title": "CreateCaseRequest"
    },
    "EventProblemResponse-cases": {
      "type": "object",
      "properties": {
        "problem": {
          "type": "string",
          "description": "The type of problem that occured."
        }
      },
      "title": "EventProblemResponse"
    },
    "EventResponse-cases": {
      "type": "object",
      "properties": {
        "eventId": {
          "type": "string",
          "example": "0_147e9445-2f30-4a91-8b2a-9455332e880a_973435567569502913_986467523038446097_163",
          "description": "The unique identifier for the event."
        },
        "eventTimestamp": {
          "type": "string",
          "format": "date-time",
          "example": "2020-12-23T14:24:44.593Z",
          "description": "Date and time that the Code42 service on the device detected an event; based on the device’s system clock and reported in Coordinated Universal Time (UTC)."
        },
        "exposure": {
          "type": "array",
          "example": [
            "OutsideTrustedDomains",
            "IsPublic"
          ],
          "description": "Lists indicators that the data may be exposed.",
          "items": {
            "type": "string"
          }
        },
        "fileAvailability": {
          "type": "string",
          "example": "EXACT_FILE_AVAILABLE",
          "description": "The download availability status of the file associated with the event.",
          "enum": [
            "ERROR",
            "EXACT_FILE_AVAILABLE",
            "NO_FILE_AVAILABLE",
            "PENDING",
            "RECENT_FILE_AVAILABLE"
          ]
        },
        "fileName": {
          "type": "string",
          "example": "example.docx",
          "description": "The name of the file, including the file extension."
        },
        "filePath": {
          "type": "string",
          "example": "/Users/casey/Documents/",
          "description": "The file location on the user's device; a path forward or backslash should be included at the end of the filepath. Possibly null if the file event occurred on a cloud provider."
        },
        "riskIndicators": {
          "type": "array",
          "description": "List of risk indicators identified for this event. If more than one risk indicator applies to this event, the sum of all indicators determines the total risk score.",
          "items": {
            "$ref": "#/definitions/RiskIndicator-cases"
          }
        },
        "riskScore": {
          "type": "integer",
          "format": "int32",
          "example": 12,
          "description": "Sum of the weights for each risk indicator. This score is used to determine the overall risk severity of the event."
        },
        "riskSeverity": {
          "type": "string",
          "example": "CRITICAL",
          "description": "The general risk assessment of the event, based on the numeric score."
        }
      },
      "title": "EventResponse"
    },
    "MultiCaseResponse-cases": {
      "type": "object",
      "properties": {
        "cases": {
          "type": "array",
          "description": "List of cases in the response",
          "items": {
            "$ref": "#/definitions/SingleSlimCaseResponse-cases"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int64",
          "example": 42,
          "description": "Total number of cases matching the provided filters"
        }
      },
      "title": "MultiCaseResponse"
    },
    "MultiEventRequest-cases": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "example": [
            "0_147e9445-2f30-4a91-8b2a-9455332e880a_973435567569502913_986467523038446097_163",
            "0_147e9445-2f30-4a91-8b2a-9455332e880a_973435567569502913_986467523038446097_164"
          ],
          "description": "List of event IDs corresponding to events to be added to the case.",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "MultiEventRequest"
    },
    "MultipleEventsResponse-cases": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "description": "List of events in the response.",
          "items": {
            "$ref": "#/definitions/EventResponse-cases"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int64",
          "example": 42,
          "description": "Total number of events associated with the case."
        }
      },
      "title": "MultipleEventsResponse"
    },
    "RiskIndicator-cases": {
      "type": "object",
      "required": [
        "name",
        "weight"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "weight": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "RiskIndicator"
    },
    "SingleCaseResponse-cases": {
      "type": "object",
      "properties": {
        "assignee": {
          "type": "string",
          "example": 273411254592236320,
          "description": "The user UID of the administrator assigned to investigate the case."
        },
        "assigneeUsername": {
          "type": "string",
          "example": "admin@example.com",
          "description": "The username of the administrator assigned to investigate the case."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "example": "2020-10-27T15:16:05.369203Z",
          "description": "Time at which the case was created."
        },
        "createdByUserUid": {
          "type": "string",
          "example": 806150685834341100,
          "description": "User UID of the user who created the case."
        },
        "createdByUsername": {
          "type": "string",
          "example": "adrian@example.com",
          "description": "Username of the user who created the case."
        },
        "description": {
          "type": "string",
          "example": "Sample description",
          "description": "Brief description providing context for a case."
        },
        "findings": {
          "type": "string",
          "example": "Sample findings",
          "description": "Markdown formatted text summarizing the findings for a case."
        },
        "lastModifiedByUserUid": {
          "type": "string",
          "example": 806150685834341100,
          "description": "User UID of the user who last modified the case."
        },
        "lastModifiedByUsername": {
          "type": "string",
          "example": "adrian@example.com",
          "description": "Username of the user who last modified the case."
        },
        "name": {
          "type": "string",
          "example": "Sample case name",
          "description": "The unique name given to the case."
        },
        "number": {
          "type": "integer",
          "format": "int64",
          "example": 1,
          "description": "Unique numeric identifier for the case."
        },
        "status": {
          "type": "string",
          "example": "OPEN",
          "description": "Indicates the status of the case.\nOPEN: The case is active and all aspects of the case are editable.\nCLOSED: The case is resolved. Closed cases cannot be re-opened or modified. Case data for closed cases is retained indefinitely.\nARCHIVED: The case is no longer active. File events and file contents are permanently deleted and no longer accessible. Archived cases cannot be un-archived or modified.",
          "enum": [
            "ARCHIVED",
            "CLOSED",
            "OPEN"
          ]
        },
        "subject": {
          "type": "string",
          "example": 421380797518239200,
          "description": "The user UID of the subject being investigated in this case."
        },
        "subjectUsername": {
          "type": "string",
          "example": "casey@example.com",
          "description": "The username of the subject being investigated in this case."
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "example": "2020-10-27T15:20:26.311894Z",
          "description": "Time at which the case was last updated."
        }
      },
      "title": "SingleCaseResponse"
    },
    "SingleSlimCaseResponse-cases": {
      "type": "object",
      "properties": {
        "assignee": {
          "type": "string",
          "example": 273411254592236320,
          "description": "The user UID of the administrator assigned to investigate the case."
        },
        "assigneeUsername": {
          "type": "string",
          "example": "admin@example.com",
          "description": "The username of the administrator assigned to investigate the case."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "example": "2020-10-27T15:16:05.369203Z",
          "description": "Time at which the case was created."
        },
        "createdByUserUid": {
          "type": "string",
          "example": 806150685834341100,
          "description": "User UID of the user who created the case."
        },
        "createdByUsername": {
          "type": "string",
          "example": "adrian@example.com",
          "description": "Username of the user who created the case."
        },
        "lastModifiedByUserUid": {
          "type": "string",
          "example": 806150685834341100,
          "description": "User UID of the user who last modified the case."
        },
        "lastModifiedByUsername": {
          "type": "string",
          "example": "adrian@example.com",
          "description": "Username of the user who last modified the case."
        },
        "name": {
          "type": "string",
          "example": "Sample case name",
          "description": "The unique name given to the case."
        },
        "number": {
          "type": "integer",
          "format": "int64",
          "example": 1,
          "description": "Unique numeric identifier for the case."
        },
        "status": {
          "type": "string",
          "example": "OPEN",
          "description": "Indicates the status of the case.\nOPEN: The case is active and all aspects of the case are editable.\nCLOSED: The case is resolved. Closed cases cannot be re-opened or modified. Case data for closed cases is retained indefinitely.\nARCHIVED: The case is no longer active. File events and file contents are permanently deleted and no longer accessible. Archived cases cannot be un-archived or modified.",
          "enum": [
            "ARCHIVED",
            "CLOSED",
            "OPEN"
          ]
        },
        "subject": {
          "type": "string",
          "example": 421380797518239200,
          "description": "The user UID of the subject being investigated in this case."
        },
        "subjectUsername": {
          "type": "string",
          "example": "casey@example.com",
          "description": "The username of the subject being investigated in this case."
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "example": "2020-10-27T15:20:26.311894Z",
          "description": "Time at which the case was last updated."
        }
      },
      "title": "SingleSlimCaseResponse"
    },
    "StreamingResponseBody-cases": {
      "type": "object",
      "title": "StreamingResponseBody"
    },
    "UpdateCaseRequest-cases": {
      "type": "object",
      "properties": {
        "assignee": {
          "type": "string",
          "example": 273411254592236320,
          "description": "The user UID of the administrator assigned to investigate the case."
        },
        "description": {
          "type": "string",
          "example": "Sample description",
          "description": "Brief description providing context for a case."
        },
        "findings": {
          "type": "string",
          "example": "Sample findings",
          "description": "Markdown formatted text summarizing the findings for a case."
        },
        "name": {
          "type": "string",
          "example": "Sample case name",
          "description": "The unique name given to the case."
        },
        "status": {
          "type": "string",
          "example": "OPEN",
          "description": "Indicates the status of the case.\nOPEN: The case is active and all aspects of the case are editable.\nCLOSED: The case is resolved. Closed cases cannot be re-opened or modified. Case data for closed cases is retained indefinitely.\nARCHIVED: The case is no longer active. File events and file contents are permanently deleted and no longer accessible. Archived cases cannot be un-archived or modified.",
          "enum": [
            "ARCHIVED",
            "CLOSED",
            "OPEN"
          ]
        },
        "subject": {
          "type": "string",
          "example": 421380797518239200,
          "description": "The user UID of the subject being investigated in this case."
        }
      },
      "title": "UpdateCaseRequest"
    },
    "UpdateIsEnabledCommand-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "isEnabled",
            "tenantId",
            "ruleIds"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 100,
              "example": "MyExampleTenant"
            },
            "ruleIds": {
              "type": "array",
              "description": "The unique identifiers representing the rules you want to act upon.",
              "maxLength": 100,
              "example": [
                "ExampleRuleId1",
                "ExampleRuleId2"
              ],
              "items": {
                "type": "string"
              }
            },
            "isEnabled": {
              "type": "boolean",
              "description": "What to set the rule's enabled activity to.  Either TRUE or FALSE.",
              "example": "TRUE"
            }
          }
        }
      ]
    },
    "DomainValue-alert-rules": {
      "type": "object",
      "x-abstract": true
    },
    "AddUsersToRuleCommand-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "ruleId",
            "userList"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 100,
              "example": "MyExampleTenant"
            },
            "ruleId": {
              "type": "string",
              "description": "The unique identifier representing the rule you want to act upon.",
              "maxLength": 40,
              "example": "ExampleRuleId"
            },
            "userList": {
              "type": "array",
              "description": "List of users to add to the rule.",
              "items": {
                "$ref": "#/definitions/UserBag-alert-rules"
              }
            }
          }
        }
      ]
    },
    "UserBag-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "userIdFromAuthority",
            "userAliasList"
          ],
          "properties": {
            "userIdFromAuthority": {
              "type": "string",
              "description": "User ID from authority.",
              "example": "userIdFromAuthority"
            },
            "userAliasList": {
              "type": "array",
              "description": "List of user aliases corresponding to the user ID from the authority.",
              "example": [
                "userAlias1",
                "userAlias2"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "RemoveUsersFromRuleCommand-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "ruleId",
            "userIdList"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 100,
              "example": "MyExampleTenant"
            },
            "ruleId": {
              "type": "string",
              "description": "The unique identifier representing the rule you want to act upon.",
              "maxLength": 40,
              "example": "ExampleRuleId"
            },
            "userIdList": {
              "type": "array",
              "description": "List of user id (from authority) to remove from the rule.  Will remove all associated aliases",
              "example": [
                "userIdFromAuthority"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "RemoveUserAliasesFromRuleCommand-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "ruleId",
            "userList"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 100,
              "example": "MyExampleTenant"
            },
            "ruleId": {
              "type": "string",
              "description": "The unique identifier representing the rule you want to act upon.",
              "maxLength": 40,
              "example": "ExampleRuleId"
            },
            "userList": {
              "type": "array",
              "description": "List of users to remove from the rule.",
              "items": {
                "$ref": "#/definitions/UserBag-alert-rules"
              }
            }
          }
        }
      ]
    },
    "RemoveAllUsersFromRuleCommand-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "ruleId"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 100,
              "example": "MyExampleTenant"
            },
            "ruleId": {
              "type": "string",
              "description": "The unique identifier representing the rule you want to act upon.",
              "maxLength": 40,
              "example": "ExampleRuleId"
            }
          }
        }
      ]
    },
    "UsersInRuleResponse-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "usersToAlertOn"
          ],
          "properties": {
            "users": {
              "type": "array",
              "description": "List of users to being watched in the rule.\nNote that a userIdFromAuthority value of \"Null UserIdFromAuthority.  These usernames must be edited in the web app.\"indicates that the user alias must be edited via the Code42 console or the Code42 CLI.",
              "items": {
                "$ref": "#/definitions/UserBag-alert-rules"
              }
            },
            "usersToAlertOn": {
              "$ref": "#/definitions/UsersToAlertOn-alert-rules"
            }
          }
        }
      ]
    },
    "UsersToAlertOn-alert-rules": {
      "type": "integer",
      "description": "Possible users list config values for a rule.",
      "example": "ALL_USERS",
      "x-enumNames": [
        "AllUsers",
        "SpecifiedUsers",
        "AllUsersNotSpecified"
      ],
      "enum": [
        "ALL_USERS",
        "ALL_USERS_NOT_SPECIFIED",
        "SPECIFIED_USERS"
      ]
    },
    "GetUsersInRuleQuery-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "ruleId"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 100,
              "example": "MyExampleTenant"
            },
            "ruleId": {
              "type": "string",
              "description": "The unique identifier representing the rule you want to act upon.",
              "maxLength": 40,
              "example": "ExampleRuleId"
            }
          }
        }
      ]
    },
    "CloudSharePermissionsRuleDetailsResponse-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "properties": {
            "rules": {
              "type": "array",
              "description": "List of rule details returned from the query.",
              "items": {
                "$ref": "#/definitions/CloudSharePermissionsRuleDetails-alert-rules"
              }
            }
          }
        }
      ]
    },
    "CloudSharePermissionsRuleDetails-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/CloudSharePermissionsRule-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "createdAt",
            "modifiedAt",
            "isSystem"
          ],
          "properties": {
            "createdAt": {
              "type": "string",
              "description": "The timestamp when the rule was created.",
              "format": "date-time",
              "example": "2020-02-18T01:00:45.006683Z"
            },
            "createdBy": {
              "type": "string",
              "description": "Username of the individual who created the rule.",
              "example": "UserWhoCreatedTheRule"
            },
            "modifiedAt": {
              "type": "string",
              "description": "Timestamp of when the rule was last modified.",
              "format": "date-time",
              "example": "2020-02-19T01:57:45.006683Z"
            },
            "modifiedBy": {
              "type": "string",
              "description": "Username of the individual who last modified the rule.",
              "example": "UserWhoMostRecentlyModifiedTheRule"
            },
            "isSystem": {
              "type": "boolean",
              "description": "Boolean indicator of if the rule is a system rule.",
              "example": "FALSE"
            }
          }
        }
      ]
    },
    "CloudSharePermissionsRule-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/CloudSharePermissionsCriteria-alert-rules"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique id of the rule.",
              "example": "RuleId"
            }
          }
        }
      ]
    },
    "CloudSharePermissionsCriteria-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/ExfiltrationRule-alert-rules"
        },
        {
          "type": "object",
          "properties": {
            "watchGoogleDrive": {
              "description": "Watch configuration for google.",
              "$ref": "#/definitions/WatchGoogleDrive-alert-rules"
            },
            "watchMicrosoftOneDrive": {
              "description": "Watch configuration for microsoft one drive.",
              "$ref": "#/definitions/WatchMicrosoftOneDrive-alert-rules"
            },
            "watchBox": {
              "description": "Watch configuration for box.",
              "$ref": "#/definitions/WatchBox-alert-rules"
            }
          }
        }
      ]
    },
    "WatchGoogleDrive-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "publicOnTheWeb",
            "publicViaLink"
          ],
          "properties": {
            "publicOnTheWeb": {
              "type": "boolean",
              "description": "Boolean indicating whether to alert on public on the web shares.",
              "example": "TRUE"
            },
            "publicViaLink": {
              "type": "boolean",
              "description": "Boolean indicating whether to alert on public via link shares.",
              "example": "FALSE"
            },
            "outsideTrustedDomains": {
              "type": "boolean",
              "description": "Boolean indicating whether to alert on outside trusted domains shares.",
              "example": "TRUE"
            }
          }
        }
      ]
    },
    "WatchMicrosoftOneDrive-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "publicViaLink"
          ],
          "properties": {
            "publicViaLink": {
              "type": "boolean",
              "description": "Boolean indicating whether to alert on public via link shares.",
              "example": "FALSE"
            },
            "outsideTrustedDomains": {
              "type": "boolean",
              "description": "Boolean indicating whether to alert on outside trusted domains shares.",
              "example": "TRUE"
            }
          }
        }
      ]
    },
    "WatchBox-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "publicViaLink"
          ],
          "properties": {
            "publicViaLink": {
              "type": "boolean",
              "description": "Boolean indicating whether to alert on public via link shares.",
              "example": "FALSE"
            },
            "outsideTrustedDomains": {
              "type": "boolean",
              "description": "Boolean indicating whether to alert on outside trusted domains shares.",
              "example": "TRUE"
            }
          }
        }
      ]
    },
    "ExfiltrationRule-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "x-abstract": true,
          "required": [
            "isEnabled",
            "tenantId"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 100,
              "example": "MyExampleTenant"
            },
            "name": {
              "type": "string",
              "description": "The name of the rule.",
              "example": "Removable Media Exfiltration Rule"
            },
            "description": {
              "type": "string",
              "description": "The description of the rule.",
              "example": "Alert me on all removable media exfiltration."
            },
            "severity": {
              "description": "Indicates severity of the rule.",
              "$ref": "#/definitions/SeverityRating-alert-rules"
            },
            "isEnabled": {
              "type": "boolean",
              "description": "Boolean indicating if the rule is currently enabled.",
              "example": "TRUE"
            },
            "fileBelongsTo": {
              "$ref": "#/definitions/FileBelongsTo-alert-rules"
            },
            "notificationConfig": {
              "$ref": "#/definitions/NotificationConfig-alert-rules"
            },
            "fileCategoryWatch": {
              "$ref": "#/definitions/FileCategoryWatch-alert-rules"
            },
            "ruleSource": {
              "type": "string",
              "description": "Indicates source of rule creation.  Either alerting or lens application name.",
              "example": "Departing Employee"
            }
          }
        }
      ]
    },
    "SeverityRating-alert-rules": {
      "type": "integer",
      "description": "Possible severity values for a rule.",
      "example": "LOW",
      "x-enumNames": [
        "Low",
        "Medium",
        "High"
      ],
      "enum": [
        "HIGH",
        "MEDIUM",
        "LOW"
      ]
    },
    "FileBelongsTo-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "usersToAlertOn"
          ],
          "properties": {
            "usersToAlertOn": {
              "description": "Indicates setting of how to interact with user list.",
              "$ref": "#/definitions/UsersToAlertOn-alert-rules"
            },
            "userList": {
              "type": "array",
              "description": "List of users who's activity is specified as either watching or excluding from watching.",
              "example": [
                "user1",
                "user2"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "NotificationConfig-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "enabled"
          ],
          "properties": {
            "enabled": {
              "type": "boolean",
              "description": "Boolean indicating if the notifications are turned on.",
              "example": "TRUE"
            },
            "notificationInfo": {
              "type": "array",
              "description": "Config information for notifications.",
              "items": {
                "$ref": "#/definitions/NotificationInfo-alert-rules"
              }
            }
          }
        }
      ]
    },
    "NotificationInfo-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "notificationType"
          ],
          "properties": {
            "notificationType": {
              "description": "Type of notification.",
              "$ref": "#/definitions/NotificationType-alert-rules"
            },
            "notificationAddress": {
              "type": "string",
              "description": "Address notifications are configured to send to.",
              "example": "myUsername@company.com"
            }
          }
        }
      ]
    },
    "NotificationType-alert-rules": {
      "type": "integer",
      "description": "Type of notification.",
      "example": "EMAIL",
      "x-enumNames": [
        "Email"
      ],
      "enum": [
        "EMAIL"
      ]
    },
    "FileCategoryWatch-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "watchAllFiles"
          ],
          "properties": {
            "watchAllFiles": {
              "type": "boolean",
              "description": "Boolean indicating if rule is watching all file categories.",
              "example": "FALSE"
            },
            "fileCategoryList": {
              "type": "array",
              "description": "List of file categories to watch.",
              "items": {
                "$ref": "#/definitions/FileCategory-alert-rules"
              }
            }
          }
        }
      ]
    },
    "FileCategory-alert-rules": {
      "type": "integer",
      "description": "Type of file category.",
      "example": "ARCHIVE",
      "x-enumNames": [
        "Archive",
        "Audio",
        "Document",
        "Executable",
        "Image",
        "Pdf",
        "Presentation",
        "Script",
        "SourceCode",
        "Spreadsheet",
        "Video",
        "VirtualDiskImage"
      ],
      "enum": [
        "ARCHIVE",
        "AUDIO",
        "DOCUMENT",
        "EXECUTABLE",
        "IMAGE",
        "PDF",
        "PRESENTATION",
        "SCRIPT",
        "SOURCE_CODE",
        "SPREADSHEET",
        "VIDEO",
        "VIRTUAL_DISK_IMAGE"
      ]
    },
    "GetCloudSharePermissionsRuleDetailsQuery-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "ruleIds"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 100,
              "example": "MyExampleTenant"
            },
            "ruleIds": {
              "type": "array",
              "description": "The unique identifiers representing the rules you want to act upon.",
              "maxLength": 100,
              "example": [
                "ExampleRuleId1",
                "ExampleRuleId2"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "EndpointExfiltrationRuleDetailsResponse-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "properties": {
            "rules": {
              "type": "array",
              "description": "List of rule details returned from the query.",
              "items": {
                "$ref": "#/definitions/EndpointExfiltrationRuleDetails-alert-rules"
              }
            }
          }
        }
      ]
    },
    "EndpointExfiltrationRuleDetails-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/EndpointExfiltrationRule-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "createdAt",
            "modifiedAt",
            "isSystem"
          ],
          "properties": {
            "createdAt": {
              "type": "string",
              "description": "The timestamp when the rule was created.",
              "format": "date-time",
              "example": "2020-02-18T01:00:45.006683Z"
            },
            "createdBy": {
              "type": "string",
              "description": "Username of the individual who created the rule.",
              "example": "UserWhoCreatedTheRule"
            },
            "modifiedAt": {
              "type": "string",
              "description": "Timestamp of when the rule was last modified.",
              "format": "date-time",
              "example": "2020-02-19T01:57:45.006683Z"
            },
            "modifiedBy": {
              "type": "string",
              "description": "Username of the individual who last modified the rule.",
              "example": "UserWhoMostRecentlyModifiedTheRule"
            },
            "isSystem": {
              "type": "boolean",
              "description": "Boolean indicator of if the rule is a system rule.",
              "example": "FALSE"
            }
          }
        }
      ]
    },
    "EndpointExfiltrationRule-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/EndpointExfiltrationCriteria-alert-rules"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique id of the rule.",
              "example": "RuleId"
            }
          }
        }
      ]
    },
    "EndpointExfiltrationCriteria-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/ExfiltrationRule-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "timeWindow"
          ],
          "properties": {
            "fileSizeAndCount": {
              "description": "File size and count watch configuration.",
              "$ref": "#/definitions/FileSizeAndCount-alert-rules"
            },
            "fileActivityIs": {
              "description": "Type of file activity the rule is watching.",
              "$ref": "#/definitions/FileActivity-alert-rules"
            },
            "timeWindow": {
              "type": "integer",
              "description": "How long of a period for the activity to aggregate to hit the specified file size and count thresholds.",
              "format": "int32",
              "example": "60"
            }
          }
        }
      ]
    },
    "FileSizeAndCount-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "properties": {
            "fileCountGreaterThan": {
              "type": "integer",
              "description": "Number of files exfiltrated within time window for alert to trigger.",
              "format": "int64",
              "example": "15"
            },
            "totalSizeGreaterThanInBytes": {
              "type": "integer",
              "description": "Size of total files exfiltrated within time window for alert to trigger.",
              "format": "int64",
              "example": "5000"
            },
            "operator": {
              "description": "Operator to use to combine size and count threshold.",
              "$ref": "#/definitions/Operator-alert-rules"
            }
          }
        }
      ]
    },
    "Operator-alert-rules": {
      "type": "integer",
      "description": "Operators to use in file size and count configuration.",
      "x-enumNames": [
        "And",
        "Or"
      ],
      "enum": [
        "AND",
        "OR"
      ]
    },
    "FileActivity-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "uploadedOnRemovableMedia",
            "readByBrowserOrOther"
          ],
          "properties": {
            "syncedToCloudService": {
              "description": "Cloud services to watch for alerts.",
              "$ref": "#/definitions/SyncedToCloudService-alert-rules"
            },
            "uploadedOnRemovableMedia": {
              "type": "boolean",
              "description": "Boolean indicating if we are watching removable media uploads.",
              "example": "TRUE"
            },
            "readByBrowserOrOther": {
              "type": "boolean",
              "description": "Boolean indicating if we are watching browser read activity.",
              "example": "FALSE"
            }
          }
        }
      ]
    },
    "SyncedToCloudService-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "watchBox",
            "watchBoxDrive",
            "watchDropBox",
            "watchGoogleBackupAndSync",
            "watchAppleIcLoud",
            "watchMicrosoftOneDrive"
          ],
          "properties": {
            "watchBox": {
              "type": "boolean",
              "description": "Boolean indicating if we are watching for box cloud sync activity.",
              "example": "TRUE"
            },
            "watchBoxDrive": {
              "type": "boolean",
              "description": "Boolean indicating if we are watching for box drive cloud sync activity.",
              "example": "FALSE"
            },
            "watchDropBox": {
              "type": "boolean",
              "description": "Boolean indicating if we are watching for drop box cloud sync activity.",
              "example": "TRUE"
            },
            "watchGoogleBackupAndSync": {
              "type": "boolean",
              "description": "Boolean indicating if we are watching for google backup and sync cloud sync activity.",
              "example": "FALSE"
            },
            "watchAppleIcLoud": {
              "type": "boolean",
              "description": "Boolean indicating if we are watching for apple iCloud sync activity.",
              "example": "TRUE"
            },
            "watchMicrosoftOneDrive": {
              "type": "boolean",
              "description": "Boolean indicating if we are watching for microsoft one drive cloud sync activity.",
              "example": "TRUE"
            }
          }
        }
      ]
    },
    "GetEndpointExfiltrationRuleDetailsQuery-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "ruleIds"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 100,
              "example": "MyExampleTenant"
            },
            "ruleIds": {
              "type": "array",
              "description": "The unique identifiers representing the rules you want to act upon.",
              "maxLength": 100,
              "example": [
                "ExampleRuleId1",
                "ExampleRuleId2"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "FileTypeMismatchRuleDetailsResponse-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "properties": {
            "rules": {
              "type": "array",
              "description": "List of rule details returned from the query.",
              "items": {
                "$ref": "#/definitions/FileTypeMismatchRuleDetails-alert-rules"
              }
            }
          }
        }
      ]
    },
    "FileTypeMismatchRuleDetails-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/FileTypeMismatchRule-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "createdAt",
            "modifiedAt",
            "isSystem"
          ],
          "properties": {
            "createdAt": {
              "type": "string",
              "description": "The timestamp when the rule was created.",
              "format": "date-time",
              "example": "2020-02-18T01:00:45.006683Z"
            },
            "createdBy": {
              "type": "string",
              "description": "Username of the individual who created the rule.",
              "example": "UserWhoCreatedTheRule"
            },
            "modifiedAt": {
              "type": "string",
              "description": "Timestamp of when the rule was last modified.",
              "format": "date-time",
              "example": "2020-02-19T01:57:45.006683Z"
            },
            "modifiedBy": {
              "type": "string",
              "description": "Username of the individual who last modified the rule.",
              "example": "UserWhoMostRecentlyModifiedTheRule"
            },
            "isSystem": {
              "type": "boolean",
              "description": "Boolean indicator of if the rule is a system rule.",
              "example": "FALSE"
            }
          }
        }
      ]
    },
    "FileTypeMismatchRule-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/FileTypeMismatchCriteria-alert-rules"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique id of the rule.",
              "example": "RuleId"
            }
          }
        }
      ]
    },
    "FileTypeMismatchCriteria-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/ExfiltrationRule-alert-rules"
        },
        {
          "type": "object"
        }
      ]
    },
    "GetFileTypeMismatchRuleDetailsQuery-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "ruleIds"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 100,
              "example": "MyExampleTenant"
            },
            "ruleIds": {
              "type": "array",
              "description": "The unique identifiers representing the rules you want to act upon.",
              "maxLength": 100,
              "example": [
                "ExampleRuleId1",
                "ExampleRuleId2"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "FileNameRuleDetailsResponse-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "properties": {
            "rules": {
              "type": "array",
              "description": "List of rule details returned from the query.",
              "items": {
                "$ref": "#/definitions/FileNameRuleDetails-alert-rules"
              }
            }
          }
        }
      ]
    },
    "FileNameRuleDetails-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/FileNameRule-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "createdAt",
            "modifiedAt",
            "isSystem"
          ],
          "properties": {
            "createdAt": {
              "type": "string",
              "description": "The timestamp when the rule was created.",
              "format": "date-time",
              "example": "2020-02-18T01:00:45.006683Z"
            },
            "createdBy": {
              "type": "string",
              "description": "Username of the individual who created the rule.",
              "example": "UserWhoCreatedTheRule"
            },
            "modifiedAt": {
              "type": "string",
              "description": "Timestamp of when the rule was last modified.",
              "format": "date-time",
              "example": "2020-02-19T01:57:45.006683Z"
            },
            "modifiedBy": {
              "type": "string",
              "description": "Username of the individual who last modified the rule.",
              "example": "UserWhoMostRecentlyModifiedTheRule"
            },
            "isSystem": {
              "type": "boolean",
              "description": "Boolean indicator of if the rule is a system rule.",
              "example": "FALSE"
            }
          }
        }
      ]
    },
    "FileNameRule-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/FileNameCriteria-alert-rules"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique id of the rule.",
              "example": "RuleId"
            }
          }
        }
      ]
    },
    "FileNameCriteria-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/ExfiltrationRule-alert-rules"
        },
        {
          "type": "object",
          "properties": {
            "fileNamePatterns": {
              "type": "array",
              "description": "List of file name patterns being watched by the rule.",
              "example": [
                "Q?ProductPlan.*",
                "*.cs"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "GetFileNameRuleDetailsQuery-alert-rules": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainValue-alert-rules"
        },
        {
          "type": "object",
          "required": [
            "tenantId",
            "ruleIds"
          ],
          "properties": {
            "tenantId": {
              "type": "string",
              "description": "The unique identifier representing the tenant.",
              "maxLength": 100,
              "example": "MyExampleTenant"
            },
            "ruleIds": {
              "type": "array",
              "description": "The unique identifiers representing the rules you want to act upon.",
              "maxLength": 100,
              "example": [
                "ExampleRuleId1",
                "ExampleRuleId2"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "RuleDetails-alert-rules-v2": {
      "allOf": [
        {
          "$ref": "#/definitions/Rule-alert-rules-v2"
        },
        {
          "type": "object",
          "required": [
            "createdAt",
            "modifiedAt",
            "isSystemRule"
          ],
          "properties": {
            "createdAt": {
              "type": "string",
              "description": "Time when the rule was created.",
              "format": "date-time",
              "example": "2023-07-27T12:05:21.5219809Z"
            },
            "createdBy": {
              "type": "string",
              "description": "Individual or service who created the rule.",
              "example": "my-username@company.com"
            },
            "modifiedAt": {
              "type": "string",
              "description": "Time when the rule was last modified.",
              "format": "date-time",
              "example": "2023-07-27T12:05:21.5220135Z"
            },
            "modifiedBy": {
              "type": "string",
              "description": "Individual or service who last modified the rule.",
              "example": "my-username@company.com"
            },
            "isSystemRule": {
              "type": "boolean",
              "description": "Boolean indicator of whether or not the rule is connected to a lens.",
              "example": true
            },
            "systemRemovedRiskIndicators": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RiskIndicator-alert-rules-v2"
              }
            }
          }
        }
      ]
    },
    "RiskIndicator-alert-rules-v2": {
      "type": "object",
      "required": [
        "timestamp"
      ],
      "properties": {
        "indicatorId": {
          "type": "string"
        },
        "indicatorName": {
          "type": "string"
        },
        "categoryId": {
          "type": "string"
        },
        "subCategoryId": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Rule-alert-rules-v2": {
      "allOf": [
        {
          "$ref": "#/definitions/RuleCriteria-alert-rules-v2"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the rule.",
              "example": "115b63e5-978f-4be8-8396-ff7ad465a450"
            }
          }
        }
      ]
    },
    "RuleCriteria-alert-rules-v2": {
      "type": "object",
      "required": [
        "isEnabled",
        "alertOnBlockedBrowserActivity"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Unique name of the rule.",
          "example": "Suspicious File Mismatch Rule"
        },
        "description": {
          "type": "string",
          "description": "Description of the rule.",
          "example": "A rule created to trigger alerts on suspicious file mismatch exfiltration"
        },
        "severity": {
          "description": "[Deprecated field] Indicates severity of rule.",
          "x-deprecated": true,
          "x-deprecatedMessage": "Severity rating is no longer important since risk severity is being used",
          "example": "",
          "allOf": [
            {
              "$ref": "#/definitions/Severity-alert-rules-v2"
            }
          ]
        },
        "isEnabled": {
          "type": "boolean",
          "description": "Indicates whether the rule is enabled or not.",
          "example": true
        },
        "source": {
          "type": "string",
          "description": "[Deprecated field] Indicates source of rule creation.",
          "example": ""
        },
        "notifications": {
          "description": "Notifications configuration settings for this rule.",
          "$ref": "#/definitions/NotificationSettings-alert-rules-v2"
        },
        "education": {
          "$ref": "#/definitions/EducateUsersSettings-alert-rules-v2"
        },
        "vectors": {
          "description": "The exfiltration vectors to be watched.",
          "$ref": "#/definitions/RuleVectors-alert-rules-v2"
        },
        "filters": {
          "description": "The filters to limit the scope of activity to alert on.",
          "$ref": "#/definitions/RuleFilters-alert-rules-v2"
        },
        "alertOnBlockedBrowserActivity": {
          "type": "boolean"
        }
      }
    },
    "Severity-alert-rules-v2": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Low",
        "Medium",
        "High"
      ],
      "enum": [
        "Low",
        "Medium",
        "High"
      ]
    },
    "NotificationSettings-alert-rules-v2": {
      "type": "object",
      "required": [
        "isEnabled"
      ],
      "properties": {
        "isEnabled": {
          "type": "boolean",
          "description": "Indicates whether notifications are enabled.",
          "example": true
        },
        "contacts": {
          "type": "array",
          "description": "List of notifications configured.",
          "items": {
            "$ref": "#/definitions/NotificationContact-alert-rules-v2"
          }
        }
      }
    },
    "NotificationContact-alert-rules-v2": {
      "type": "object",
      "required": [
        "isEnabled",
        "type"
      ],
      "properties": {
        "isEnabled": {
          "type": "boolean",
          "description": "Indicates whether the notifications for this contact are enabled.",
          "example": true
        },
        "type": {
          "description": "Type of notification.",
          "$ref": "#/definitions/NotificationType-alert-rules-v2"
        },
        "address": {
          "type": "string",
          "description": "Address notifications are configured to send to.",
          "example": "myUsername@company.com"
        }
      }
    },
    "NotificationType-alert-rules-v2": {
      "type": "string",
      "description": "Type of notification.",
      "example": "EMAIL",
      "x-enumNames": [
        "Email"
      ],
      "enum": [
        "EMAIL"
      ]
    },
    "EducateUsersSettings-alert-rules-v2": {
      "type": "object",
      "required": [
        "messagingMethod",
        "isAutoDismissAlertEnabled"
      ],
      "properties": {
        "lessonId": {
          "type": "string"
        },
        "messagingMethod": {
          "$ref": "#/definitions/MessagingMethod-alert-rules-v2"
        },
        "isAutoDismissAlertEnabled": {
          "type": "boolean"
        }
      }
    },
    "MessagingMethod-alert-rules-v2": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Email",
        "Slack",
        "Teams"
      ],
      "enum": [
        "Email",
        "Slack",
        "Teams"
      ]
    },
    "RuleVectors-alert-rules-v2": {
      "type": "object",
      "properties": {
        "cloudSharing": {
          "description": "Configuration for cloud sharing vectors to monitor.",
          "$ref": "#/definitions/CloudSharingVector-alert-rules-v2"
        },
        "download": {
          "$ref": "#/definitions/DownloadVector-alert-rules-v2"
        },
        "email": {
          "$ref": "#/definitions/EmailVector-alert-rules-v2"
        },
        "fileUpload": {
          "description": "Configuration for what file upload vectors to monitor.",
          "$ref": "#/definitions/FileUploadVector-alert-rules-v2"
        },
        "removableMedia": {
          "description": "Configuration for what removable media vectors to monitor.",
          "$ref": "#/definitions/RemovableMediaVector-alert-rules-v2"
        }
      }
    },
    "CloudSharingVector-alert-rules-v2": {
      "type": "object",
      "required": [
        "criteriaOrder"
      ],
      "properties": {
        "observeAll": {
          "type": "boolean",
          "description": "Indicates whether to watch all cloud sharing connectors.",
          "example": false
        },
        "box": {
          "description": "Configuration for specific cloud sharing monitoring using the Box connector.",
          "$ref": "#/definitions/CloudSharingMechanisms-alert-rules-v2"
        },
        "googleDrive": {
          "description": "Configuration for specific cloud sharing monitoring using the Google Drive connector.",
          "$ref": "#/definitions/CloudSharingMechanisms-alert-rules-v2"
        },
        "oneDrive": {
          "description": "Configuration for specific cloud sharing monitoring using the Microsoft OneDrive connector.",
          "$ref": "#/definitions/CloudSharingMechanisms-alert-rules-v2"
        },
        "criteriaOrder": {
          "type": "integer",
          "description": "Order in which this vector was added to the rule.",
          "format": "int32",
          "example": 3
        }
      }
    },
    "CloudSharingMechanisms-alert-rules-v2": {
      "type": "object",
      "required": [
        "observeAll",
        "publicLinkShare",
        "directShare"
      ],
      "properties": {
        "observeAll": {
          "type": "boolean",
          "description": "Indicates whether we are watching the cloud sharing connector or not.",
          "example": true
        },
        "publicLinkShare": {
          "type": "boolean"
        },
        "directShare": {
          "type": "boolean"
        }
      }
    },
    "DownloadVector-alert-rules-v2": {
      "type": "object",
      "required": [
        "criteriaOrder"
      ],
      "properties": {
        "observeAll": {
          "type": "boolean"
        },
        "salesforce": {
          "type": "boolean"
        },
        "box": {
          "type": "boolean"
        },
        "googleDrive": {
          "type": "boolean"
        },
        "microsoftOneDrive": {
          "type": "boolean"
        },
        "criteriaOrder": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "EmailVector-alert-rules-v2": {
      "type": "object",
      "required": [
        "criteriaOrder"
      ],
      "properties": {
        "observeAll": {
          "type": "boolean"
        },
        "gmail": {
          "type": "boolean"
        },
        "microsoft365": {
          "type": "boolean"
        },
        "criteriaOrder": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "FileUploadVector-alert-rules-v2": {
      "type": "object",
      "required": [
        "criteriaOrder"
      ],
      "properties": {
        "cloudStorage": {
          "description": "Configuration for which cloud storage destinations to monitor.",
          "$ref": "#/definitions/FileUploadCategory-alert-rules-v2"
        },
        "email": {
          "description": "Configuration for which email destinations to monitor.",
          "$ref": "#/definitions/FileUploadCategory-alert-rules-v2"
        },
        "fileConversionTool": {
          "description": "Configuration for which file conversion tool destinations to monitor.",
          "$ref": "#/definitions/FileUploadCategory-alert-rules-v2"
        },
        "messaging": {
          "description": "Configuration for which messaging destinations to monitor.",
          "$ref": "#/definitions/FileUploadCategory-alert-rules-v2"
        },
        "pdfManager": {
          "description": "Configuration for which PDF manager destinations to monitor.",
          "$ref": "#/definitions/FileUploadCategory-alert-rules-v2"
        },
        "productivityTool": {
          "description": "Configuration for which productivity tool destinations to monitor.",
          "$ref": "#/definitions/FileUploadCategory-alert-rules-v2"
        },
        "socialMedia": {
          "description": "Configuration for which social media destinations to monitor.",
          "$ref": "#/definitions/FileUploadCategory-alert-rules-v2"
        },
        "sourceCodeRepository": {
          "description": "Configuration for which source code repository destinations to monitor.",
          "$ref": "#/definitions/FileUploadCategory-alert-rules-v2"
        },
        "webHosting": {
          "description": "Configuration for which web hosting destinations to monitor.",
          "$ref": "#/definitions/FileUploadCategory-alert-rules-v2"
        },
        "advancedSettings": {
          "description": "Advanced settings around alerting off of unknown destinations.",
          "$ref": "#/definitions/AdvancedSettings-alert-rules-v2"
        },
        "criteriaOrder": {
          "type": "integer",
          "description": "Order in which this vector was added to the rule.",
          "format": "int32",
          "example": 3
        }
      }
    },
    "FileUploadCategory-alert-rules-v2": {
      "type": "object",
      "required": [
        "observeAll"
      ],
      "properties": {
        "observeAll": {
          "type": "boolean",
          "description": "Indicates whether we are watching all of the destinations in the category.",
          "example": true
        },
        "destinations": {
          "type": "array",
          "description": "A list of specific destinations to watch within the category.",
          "example": [],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AdvancedSettings-alert-rules-v2": {
      "type": "object",
      "required": [
        "observeUncategorized"
      ],
      "properties": {
        "observeUncategorized": {
          "type": "boolean"
        }
      }
    },
    "RemovableMediaVector-alert-rules-v2": {
      "type": "object",
      "required": [
        "isEnabled",
        "criteriaOrder"
      ],
      "properties": {
        "isEnabled": {
          "type": "boolean",
          "description": "Indicates whether to watch removable media destinations or not.",
          "example": true
        },
        "criteriaOrder": {
          "type": "integer",
          "description": "Order in which this vector was added to the rule.",
          "format": "int32",
          "example": 3
        }
      }
    },
    "RuleFilters-alert-rules-v2": {
      "type": "object",
      "properties": {
        "fileCategory": {
          "description": "Configuration for what file categories to monitor.",
          "$ref": "#/definitions/FileCategoryFilter-alert-rules-v2"
        },
        "fileName": {
          "description": "Configuration for what file names to monitor.",
          "$ref": "#/definitions/FileNameFilter-alert-rules-v2"
        },
        "fileTypeMismatch": {
          "description": "Configuration for whether to only alert on file mismatches.",
          "$ref": "#/definitions/FileTypeMismatchFilter-alert-rules-v2"
        },
        "fileVolume": {
          "description": "Activity thresholds to exceed for an alert to be generated.",
          "$ref": "#/definitions/FileVolumeFilter-alert-rules-v2"
        },
        "riskIndicator": {
          "$ref": "#/definitions/RiskIndicatorFilter-alert-rules-v2"
        },
        "riskIndicatorExcludes": {
          "$ref": "#/definitions/RiskIndicatorFilter-alert-rules-v2"
        },
        "riskSeverity": {
          "$ref": "#/definitions/RiskSeverityFilter-alert-rules-v2"
        },
        "username": {
          "description": "Configuration for which users to monitor.",
          "$ref": "#/definitions/UsernameFilter-alert-rules-v2"
        },
        "watchlist": {
          "$ref": "#/definitions/WatchlistFilter-alert-rules-v2"
        }
      }
    },
    "FileCategoryFilter-alert-rules-v2": {
      "type": "object",
      "required": [
        "criteriaOrder"
      ],
      "properties": {
        "categories": {
          "type": "array",
          "description": "List of file categories to alert on.",
          "example": [
            "Archive",
            "Pdf",
            "SourceCode"
          ],
          "items": {
            "type": "string"
          }
        },
        "criteriaOrder": {
          "type": "integer",
          "description": "Order in which this vector was added to the rule.",
          "format": "int32",
          "example": 3
        }
      }
    },
    "FileNameFilter-alert-rules-v2": {
      "type": "object",
      "required": [
        "criteriaOrder"
      ],
      "properties": {
        "patterns": {
          "type": "array",
          "description": "List of file name patterns to alert on.",
          "example": [
            "*.cs",
            "*.sh"
          ],
          "items": {
            "type": "string"
          }
        },
        "criteriaOrder": {
          "type": "integer",
          "description": "Order in which this vector was added to the rule.",
          "format": "int32",
          "example": 3
        }
      }
    },
    "FileTypeMismatchFilter-alert-rules-v2": {
      "type": "object",
      "required": [
        "isEnabled",
        "criteriaOrder"
      ],
      "properties": {
        "isEnabled": {
          "type": "boolean",
          "description": "Indicates whether or not to alert on file type mismatches only.",
          "example": true
        },
        "criteriaOrder": {
          "type": "integer",
          "description": "Order in which this vector was added to the rule.",
          "format": "int32",
          "example": 3
        }
      }
    },
    "FileVolumeFilter-alert-rules-v2": {
      "type": "object",
      "required": [
        "countGreaterThan",
        "operator",
        "sizeGreaterThanInBytes",
        "criteriaOrder"
      ],
      "properties": {
        "countGreaterThan": {
          "type": "integer",
          "description": "File count threshold that must be exceeded to trigger an alert.",
          "format": "int64",
          "example": 125
        },
        "operator": {
          "description": "Operator to use to combine size and count threshold.",
          "$ref": "#/definitions/FileVolumeOperator-alert-rules-v2"
        },
        "sizeGreaterThanInBytes": {
          "type": "integer",
          "description": "File size threshold that must be exceeded to trigger an alert.",
          "format": "int64",
          "example": 1024
        },
        "criteriaOrder": {
          "type": "integer",
          "description": "Order in which this vector was added to the rule.",
          "format": "int32",
          "example": 3
        }
      }
    },
    "FileVolumeOperator-alert-rules-v2": {
      "type": "string",
      "description": "Operators to use in file size and count configuration.",
      "example": "AND",
      "x-enumNames": [
        "And",
        "Or"
      ],
      "enum": [
        "AND",
        "OR"
      ]
    },
    "RiskIndicatorFilter-alert-rules-v2": {
      "type": "object",
      "required": [
        "criteriaOrder"
      ],
      "properties": {
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "indicators": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "criteriaOrder": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "RiskSeverityFilter-alert-rules-v2": {
      "type": "object",
      "required": [
        "low",
        "moderate",
        "high",
        "critical",
        "criteriaOrder"
      ],
      "properties": {
        "low": {
          "type": "boolean"
        },
        "moderate": {
          "type": "boolean"
        },
        "high": {
          "type": "boolean"
        },
        "critical": {
          "type": "boolean"
        },
        "criteriaOrder": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "UsernameFilter-alert-rules-v2": {
      "type": "object",
      "required": [
        "mode",
        "criteriaOrder"
      ],
      "properties": {
        "mode": {
          "description": "Indicates how to filter on the user list.",
          "$ref": "#/definitions/UsernameFilterMode-alert-rules-v2"
        },
        "usernames": {
          "type": "array",
          "description": "List of usernames.  Will either alert only on these users or on any user not in list.",
          "example": [
            "myUsername@company.com",
            "anotherUsername@company.com"
          ],
          "items": {
            "type": "string"
          }
        },
        "criteriaOrder": {
          "type": "integer",
          "description": "Order in which this vector was added to the rule.",
          "format": "int32",
          "example": 3
        }
      }
    },
    "UsernameFilterMode-alert-rules-v2": {
      "type": "string",
      "description": "Indicates how to filter on the user list.",
      "example": "INCLUDE",
      "x-enumNames": [
        "Include",
        "Exclude"
      ],
      "enum": [
        "INCLUDE",
        "EXCLUDE"
      ]
    },
    "WatchlistFilter-alert-rules-v2": {
      "type": "object",
      "required": [
        "criteriaOrder"
      ],
      "properties": {
        "watchlists": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Watchlist-alert-rules-v2"
          }
        },
        "criteriaOrder": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Watchlist-alert-rules-v2": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "UserAliases-alert-rules-v2": {
      "type": "object",
      "properties": {
        "userIdFromAuthority": {
          "type": "string",
          "description": "User id that matches internal user identifier for our product.",
          "example": "5b47a1cd-c49c-46b0-ae89-d17cb1e1a893"
        },
        "aliases": {
          "type": "array",
          "description": "A list of known aliases for the authority user id.",
          "example": [
            "myUsername@company.com",
            "anotherUsername@company.com"
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "RuleUsersResponse-alert-rules-v2": {
      "type": "object",
      "required": [
        "mode"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the rule.",
          "example": "33ef3d1b-08c5-4eba-9646-7eec76084669"
        },
        "users": {
          "type": "array",
          "description": "A list of users in the rule's username filter.",
          "items": {
            "$ref": "#/definitions/UserAliases-alert-rules-v2"
          }
        },
        "mode": {
          "description": "Indicates how to filter on the user list.",
          "$ref": "#/definitions/UsernameFilterMode2-alert-rules-v2"
        }
      }
    },
    "UsernameFilterMode2-alert-rules-v2": {
      "type": "integer",
      "description": "Indicates how the rule is set to filter on the user list.",
      "example": "INCLUDE",
      "x-enumNames": [
        "Include",
        "Exclude"
      ],
      "enum": [
        "INCLUDE",
        "EXCLUDE"
      ]
    },
    "AddCloudAliasesRequest": {
      "additionalProperties": false,
      "properties": {
        "cloudAliases": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "userId": {
          "description": "The ID of the user to add cloud aliases.",
          "example": "123",
          "type": "string"
        }
      },
      "type": "object"
    },
    "AddExcludedUsersRequest": {
      "additionalProperties": false,
      "properties": {
        "userIds": {
          "description": "A list of user IDs to add.",
          "items": {
            "description": "A list of user IDs to add.",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "AddIncludedDepartmentsRequest": {
      "additionalProperties": false,
      "properties": {
        "departments": {
          "description": "A list of departments to add.",
          "items": {
            "description": "A list of departments to add.",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "AddIncludedDirectoryGroupsRequest": {
      "additionalProperties": false,
      "properties": {
        "groupIds": {
          "description": "A list of group IDs to add.",
          "items": {
            "description": "A list of group IDs to add.",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "AddIncludedUsersRequest": {
      "additionalProperties": false,
      "properties": {
        "userIds": {
          "description": "A list of user IDs to add.",
          "items": {
            "description": "A list of user IDs to add.",
            "type": "string"
          },
          "type": "array"
        },
        "watchlistId": {
          "description": "A unique watchlist ID.",
          "example": "123",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CreateWatchlistRequest": {
      "additionalProperties": false,
      "properties": {
        "description": {
          "description": "The optional description of a custom watchlist.",
          "example": "List of users that fit a custom use case.",
          "maxLength": 250,
          "type": "string"
        },
        "title": {
          "description": "The required title for a custom watchlist.",
          "example": "My Custom List",
          "maxLength": 50,
          "type": "string"
        },
        "watchlistType": {
          "$ref": "#/definitions/WatchlistType",
          "type": "string"
        }
      },
      "required": [
        "watchlistType"
      ],
      "type": "object"
    },
    "Date": {
      "additionalProperties": false,
      "properties": {
        "day": {
          "description": "Day of month. Must be from 1 to 31 and valid for the year and month, or 0\n if specifying a year by itself or a year and month where the day is not\n significant.",
          "format": "int32",
          "type": "integer"
        },
        "month": {
          "description": "Month of year. Must be from 1 to 12, or 0 if specifying a year without a\n month and day.",
          "format": "int32",
          "type": "integer"
        },
        "year": {
          "description": "Year of date. Must be from 1 to 9999, or 0 if specifying a date without\n a year.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "DeleteCloudAliasesRequest": {
      "additionalProperties": false,
      "properties": {
        "cloudAliases": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "userId": {
          "description": "The ID of the user to delete cloud aliases.",
          "example": "123",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DeleteExcludedUsersRequest": {
      "additionalProperties": false,
      "properties": {
        "userIds": {
          "description": "A list of user IDs to delete.",
          "items": {
            "description": "A list of user IDs to delete.",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "DeleteIncludedDepartmentsRequest": {
      "additionalProperties": false,
      "properties": {
        "departments": {
          "description": "A list of departments to delete.",
          "items": {
            "description": "A list of departments to delete.",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "DeleteIncludedDirectoryGroupsRequest": {
      "additionalProperties": false,
      "properties": {
        "groupIds": {
          "description": "A list of group IDs to delete.",
          "items": {
            "description": "A list of group IDs to delete.",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "DeleteIncludedUsersRequest": {
      "additionalProperties": false,
      "properties": {
        "userIds": {
          "description": "A list of user IDs to delete.",
          "items": {
            "description": "A list of user IDs to delete.",
            "type": "string"
          },
          "type": "array"
        },
        "watchlistId": {
          "description": "A unique watchlist ID.",
          "example": "123",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DirectoryGroup": {
      "additionalProperties": false,
      "properties": {
        "groupId": {
          "description": "A unique group ID.",
          "example": "23",
          "type": "string"
        },
        "name": {
          "example": "Research and development",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ExcludedUser": {
      "additionalProperties": false,
      "properties": {
        "addedTime": {
          "format": "date-time",
          "type": "string"
        },
        "userId": {
          "description": "A unique user ID.",
          "example": "23",
          "type": "string"
        },
        "username": {
          "example": "foo@bar.com",
          "type": "string"
        }
      },
      "required": [
        "addedTime"
      ],
      "type": "object"
    },
    "IncludedDepartment": {
      "additionalProperties": false,
      "properties": {
        "addedTime": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "example": "Engineering",
          "type": "string"
        }
      },
      "required": [
        "addedTime"
      ],
      "type": "object"
    },
    "IncludedDirectoryGroup": {
      "additionalProperties": false,
      "properties": {
        "addedTime": {
          "format": "date-time",
          "type": "string"
        },
        "groupId": {
          "description": "A unique group ID.",
          "example": "23",
          "type": "string"
        },
        "isDeleted": {
          "description": "Whether the included group was deleted by the directory provider but still referenced by the watchlist",
          "type": "boolean"
        },
        "name": {
          "example": "Research and development",
          "type": "string"
        }
      },
      "required": [
        "addedTime"
      ],
      "type": "object"
    },
    "IncludedUser": {
      "additionalProperties": false,
      "properties": {
        "addedTime": {
          "format": "date-time",
          "type": "string"
        },
        "userId": {
          "description": "A unique user ID.",
          "example": "23",
          "type": "string"
        },
        "username": {
          "example": "foo@bar.com",
          "type": "string"
        }
      },
      "required": [
        "addedTime"
      ],
      "type": "object"
    },
    "ListDepartmentsResponse": {
      "additionalProperties": false,
      "properties": {
        "departments": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "totalCount": {
          "description": "The total count of all departments.",
          "example": 10,
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ListDirectoryGroupsResponse": {
      "additionalProperties": false,
      "properties": {
        "directoryGroups": {
          "items": {
            "$ref": "#/definitions/DirectoryGroup"
          },
          "type": "array"
        },
        "totalCount": {
          "description": "The total count of all directory groups.",
          "example": 10,
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ListExcludedUsersResponse": {
      "additionalProperties": false,
      "properties": {
        "excludedUsers": {
          "items": {
            "$ref": "#/definitions/ExcludedUser"
          },
          "type": "array"
        },
        "totalCount": {
          "description": "The total count of all excluded users.",
          "example": 10,
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ListIncludedDepartmentsResponse": {
      "additionalProperties": false,
      "properties": {
        "includedDepartments": {
          "items": {
            "$ref": "#/definitions/IncludedDepartment"
          },
          "type": "array"
        },
        "totalCount": {
          "description": "The total count of all included departments.",
          "example": 10,
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ListIncludedDirectoryGroupsResponse": {
      "additionalProperties": false,
      "properties": {
        "includedDirectoryGroups": {
          "items": {
            "$ref": "#/definitions/IncludedDirectoryGroup"
          },
          "type": "array"
        },
        "totalCount": {
          "description": "The total count of all included directory groups.",
          "example": 10,
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ListIncludedUsersResponse": {
      "additionalProperties": false,
      "properties": {
        "includedUsers": {
          "description": "A paged collection of users explictly added as included users for a watchlist.",
          "items": {
            "$ref": "#/definitions/IncludedUser"
          },
          "type": "array"
        },
        "totalCount": {
          "description": "The total count of all included users.",
          "example": 10,
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ListUserRiskProfilesResponse": {
      "additionalProperties": false,
      "properties": {
        "totalCount": {
          "description": "The total count of all user risk profiles.",
          "example": 10,
          "format": "int64",
          "type": "integer"
        },
        "userRiskProfiles": {
          "items": {
            "$ref": "#/definitions/UserRiskProfile"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ListWatchlistMembersResponse": {
      "additionalProperties": false,
      "properties": {
        "totalCount": {
          "description": "The total count of all watchlist members.",
          "example": 10,
          "format": "int64",
          "type": "integer"
        },
        "watchlistMembers": {
          "description": "A paged collection of users who are members of the watchlist.  These users may have been added as an included user, or are members of an included department, etc.",
          "items": {
            "$ref": "#/definitions/WatchlistMember"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ListWatchlistsResponse": {
      "additionalProperties": false,
      "properties": {
        "totalCount": {
          "description": "The total count of all watchlists.",
          "example": 10,
          "format": "int64",
          "type": "integer"
        },
        "watchlists": {
          "description": "The list of watchlists.",
          "items": {
            "$ref": "#/definitions/Watchlist"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "UpdatedUserRiskProfile": {
      "additionalProperties": false,
      "properties": {
        "endDate": {
          "$ref": "#/definitions/Date"
        },
        "notes": {
          "description": "Notes to add to the user risk profile.",
          "example": "These are my notes",
          "type": "string",
          "x-nullable": true
        },
        "startDate": {
          "$ref": "#/definitions/Date"
        }
      },
      "type": "object"
    },
    "UpdatedWatchlist": {
      "additionalProperties": false,
      "properties": {
        "description": {
          "description": "Description for a custom watchlist.",
          "example": "A watchlist for a custom use case.",
          "maxLength": 250,
          "type": "string",
          "x-nullable": true
        },
        "title": {
          "description": "Title of a custom watchlist.",
          "example": "My Custom watchlist title",
          "maxLength": 50,
          "nullable": false,
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserRiskProfile": {
      "additionalProperties": false,
      "properties": {
        "active": {
          "description": "Whether the user is active.",
          "type": "boolean"
        },
        "cloudAliases": {
          "description": "A list of cloud aliases for the user.",
          "items": {
            "description": "A list of cloud aliases for the user.",
            "type": "string"
          },
          "type": "array"
        },
        "country": {
          "description": "The user's country.",
          "type": "string"
        },
        "deleted": {
          "description": "Whether the user is deleted.",
          "type": "boolean"
        },
        "department": {
          "description": "The user's department.",
          "type": "string"
        },
        "displayName": {
          "description": "The user's friendly display name.",
          "type": "string"
        },
        "division": {
          "description": "The user's division.",
          "type": "string"
        },
        "employmentType": {
          "description": "The user's employment type.",
          "type": "string"
        },
        "endDate": {
          "$ref": "#/definitions/Date"
        },
        "locality": {
          "description": "The user's locality (city).",
          "type": "string"
        },
        "managerDisplayName": {
          "description": "The user's manager's friendly display name.",
          "type": "string"
        },
        "managerId": {
          "description": "The Code42 user ID of the user's manager.",
          "type": "string"
        },
        "managerUsername": {
          "description": "The Code42 username of the user's manager.",
          "type": "string"
        },
        "notes": {
          "description": "Notes about the user.",
          "type": "string"
        },
        "region": {
          "description": "The user's region (state).",
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/Date"
        },
        "supportUser": {
          "description": "Whether the user is a support user.",
          "type": "boolean"
        },
        "tenantId": {
          "description": "A unique tenant ID.",
          "type": "string"
        },
        "title": {
          "description": "The user's job title.",
          "type": "string"
        },
        "userId": {
          "description": "A unique user ID.",
          "type": "string"
        },
        "username": {
          "description": "The user's Code42 username.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Watchlist": {
      "additionalProperties": false,
      "properties": {
        "description": {
          "description": "Description for a custom watchlist.",
          "type": "string"
        },
        "listType": {
          "$ref": "#/definitions/WatchlistType",
          "type": "string"
        },
        "stats": {
          "$ref": "#/definitions/WatchlistStats"
        },
        "tenantId": {
          "description": "A unique tenant ID.",
          "type": "string"
        },
        "title": {
          "description": "Title for a custom watchlist.",
          "type": "string"
        },
        "watchlistId": {
          "description": "A unique watchlist ID.",
          "type": "string"
        }
      },
      "required": [
        "listType"
      ],
      "type": "object"
    },
    "WatchlistMember": {
      "additionalProperties": false,
      "properties": {
        "addedTime": {
          "format": "date-time",
          "type": "string"
        },
        "userId": {
          "description": "A unique user ID.",
          "example": "23",
          "type": "string"
        },
        "username": {
          "example": "foo@bar.com",
          "type": "string"
        }
      },
      "required": [
        "addedTime"
      ],
      "type": "object"
    },
    "WatchlistStats": {
      "additionalProperties": false,
      "properties": {
        "excludedUsersCount": {
          "description": "The number of users explicitly excluded from the watchlist.",
          "format": "int64",
          "type": "integer"
        },
        "includedDepartmentsCount": {
          "description": "The number of departments explicitly included on the watchlist.",
          "format": "int64",
          "type": "integer"
        },
        "includedDirectoryGroupsCount": {
          "description": "The number of directory groups explicitly included on the watchlist.",
          "format": "int64",
          "type": "integer"
        },
        "includedUsersCount": {
          "description": "The number of users explicitly included on the watchlist.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "WatchlistType": {
      "enum": [
        "WATCHLIST_TYPE_UNSPECIFIED",
        "CONTRACT_EMPLOYEE",
        "DEPARTING_EMPLOYEE",
        "ELEVATED_ACCESS_PRIVILEGES",
        "FLIGHT_RISK",
        "HIGH_IMPACT_EMPLOYEE",
        "NEW_EMPLOYEE",
        "PERFORMANCE_CONCERNS",
        "POOR_SECURITY_PRACTICES",
        "SUSPICIOUS_SYSTEM_ACTIVITY",
        "CUSTOM"
      ],
      "type": "string"
    }
  }
}
